
Dominguez/RTOS_I/RTOS1_15CO/Entregas/B4/out/B4.elf:     file format elf32-littlearm
Dominguez/RTOS_I/RTOS1_15CO/Entregas/B4/out/B4.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000525

Program Header:
0x70000001 off    0x00018240 vaddr 0x1a008240 paddr 0x1a008240 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002bb4 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00008248 memsz 0x00008248 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a008248 align 2**16
         filesz 0x000009e4 memsz 0x000009e4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000823c  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009e4  10000000  1a008248  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209e4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209e4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209e4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209e4  2**2
                  CONTENTS
  6 .bss          000021d0  100009e4  100009e4  000009e4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209e4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209e4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209e4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209e4  2**2
                  CONTENTS
 11 .init_array   00000004  1a00823c  1a00823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a008240  1a008240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209e4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209e4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209e4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209e4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209e4  2**2
                  CONTENTS
 18 .noinit       00000000  10002bb4  10002bb4  000209e4  2**2
                  CONTENTS
 19 .debug_info   0001f254  00000000  00000000  000209e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004ba9  00000000  00000000  0003fc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000a1fd  00000000  00000000  000447e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000970  00000000  00000000  0004e9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001d68  00000000  00000000  0004f34e  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000d4fd  00000000  00000000  000510b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00012f1c  00000000  00000000  0005e5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002f06f  00000000  00000000  000714cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000a053e  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000a05a6  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002928  00000000  00000000  000a05d8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100009e4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00823c l    d  .init_array	00000000 .init_array
1a008240 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002bb4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 system.c
100009e4 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_4.c
1a0006cc l     F .text	0000005c prvInsertBlockIntoFreeList
100009ec l     O .bss	00002000 ucHeap
100009e8 l     O .bss	00000004 pxEnd
100029ec l     O .bss	00000004 xBlockAllocatedBit
100029f0 l     O .bss	00000004 xFreeBytesRemaining
100029f4 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100029f8 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 tasks.c
1a00091c l     F .text	00000070 prvIdleTask
1a00098c l     F .text	00000038 prvTaskIsTaskSuspended
1a0009c4 l     F .text	00000018 prvResetNextTaskUnblockTime.part.1
1a0009dc l     F .text	00000090 vTaskSwitchContext.part.4
10002a04 l     O .bss	00000004 pxDelayedTaskList
10002a08 l     O .bss	00000004 pxOverflowDelayedTaskList
10002a0c l     O .bss	0000008c pxReadyTasksLists
10002a98 l     O .bss	00000004 uxCurrentNumberOfTasks
10002a9c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002aa0 l     O .bss	00000004 uxPendedTicks
10002aa4 l     O .bss	00000004 uxSchedulerSuspended
10002aa8 l     O .bss	00000004 uxTaskNumber
10002aac l     O .bss	00000004 uxTopReadyPriority
10002ab0 l     O .bss	00000014 xDelayedTaskList1
10002ac4 l     O .bss	00000014 xDelayedTaskList2
10002ad8 l     O .bss	00000004 xIdleTaskHandle
10002adc l     O .bss	00000004 xNextTaskUnblockTime
10002ae0 l     O .bss	00000004 xNumOfOverflows
10002ae4 l     O .bss	00000014 xPendingReadyList
10002af8 l     O .bss	00000004 xSchedulerRunning
10002afc l     O .bss	00000014 xSuspendedTaskList
10002b10 l     O .bss	00000014 xTasksWaitingTermination
10002b24 l     O .bss	00000004 xTickCount
10002b28 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 port.c
1a00123c l     F .text	00000022 prvPortStartFirstTask
1a001264 l     F .text	0000000e vPortEnableVFP
1a001278 l     F .text	00000040 prvTaskExitError
1a001310 l       .text	00000000 pxCurrentTCBConst2
1a0013e0 l       .text	00000000 pxCurrentTCBConst
10002b2c l     O .bss	00000001 ucMaxSysCallPriority
10002b30 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a007d70 l     O .text	00000008 GpioButtons
1a007d78 l     O .text	0000000c GpioLeds
1a007d84 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a007d9c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001a2c l     F .text	000000ac pll_calc_divs
1a001d64 l     F .text	00000034 Chip_Clock_GetDivRate.isra.0
10002b34 l     O .bss	00000008 audio_usb_pll_freq
1a007e18 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a007e84 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b3c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a002ffc l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a0058f4 l     F .text	00000084 __sbprintf
1a008100 l     O .text	00000010 blanks.8693
1a008110 l     O .text	00000010 zeroes.8694
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a005a48 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a008220 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a0079a0 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000040 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a008240 l       .init_array	00000000 __init_array_end
1a00823c l       .bss_RAM5	00000000 __preinit_array_end
1a00823c l       .init_array	00000000 __init_array_start
1a00823c l       .bss_RAM5	00000000 __preinit_array_start
1a002a04 g     F .text	0000002c .hidden __aeabi_dcmpun
1a000618 g     F .text	00000010 _isatty_r
1a0029c8 g     F .text	00000012 .hidden __aeabi_dcmple
1a003b80 g     F .text	0000009c _puts_r
1a002904 g     F .text	0000007a .hidden __cmpdf2
1a000628 g     F .text	0000000a _lseek_r
1a00013c  w    F .text	00000002 DebugMon_Handler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a002904 g     F .text	0000007a .hidden __eqdf2
1a0000c0 g       .text	00000000 __section_table_start
1a00034c g     F .text	00000020 delay_con_while
1a001358 g     F .text	00000028 vPortExitCritical
1a002474 g     F .text	0000005a .hidden __floatdidf
1a000d64 g     F .text	00000028 uxTaskPriorityGet
1a000170  w    F .text	00000002 I2C0_IRQHandler
1a003b58 g     F .text	00000028 printf
1a0016e0 g     F .text	00000004 __stdio_init
10002b90 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a007c78 g     F .text	00000034 _wcrtomb_r
1a003c90 g     F .text	00000020 __sseek
1a003058 g     F .text	00000054 __sinit
1a007bc8 g     F .text	000000b0 __swbuf_r
1a000128  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a001a24 g     F .text	00000008 Chip_ADC_SetResolution
1a003b4c g     F .text	0000000c __malloc_unlock
1a0013e4 g     F .text	0000002c SysTick_Handler
1a000170  w    F .text	00000002 SPIFI_ADCHS_IRQHandler
10002b94 g     O .bss	00000001 __lock___arc4random_mutex
1a000520  w    F .text	00000002 initialise_monitor_handles
1a000170  w    F .text	00000002 SDIO_IRQHandler
1a006e70 g     F .text	000000ce memmove
10002b74 g     O .bss	00000004 task_handle_a
1a001380 g     F .text	00000064 PendSV_Handler
1a000124  w    F .text	00000002 NMI_Handler
1a006f40 g     F .text	0000004c _Balloc
1a008248 g       .ARM.exidx	00000000 __exidx_end
1a0000fc g       .text	00000000 __data_section_table_end
1a000170  w    F .text	00000002 UART1_IRQHandler
1a0028f4 g     F .text	0000008a .hidden __gtdf2
10002a00 g     O .bss	00000004 pxCurrentTCB
1a00060c g     F .text	0000000a _fstat_r
53ff74fa g       *ABS*	00000000 __valid_user_code_checksum
1a008248 g       .ARM.exidx	00000000 _etext
1a002990 g     F .text	00000010 .hidden __aeabi_cdcmple
1a000170  w    F .text	00000002 USB1_IRQHandler
1a000170  w    F .text	00000002 TIMER3_IRQHandler
1a001d98 g     F .text	00000024 Chip_Clock_GetBaseClocktHz
1a000170  w    F .text	00000002 UART0_IRQHandler
1a000160 g     F .text	00000010 bss_init
1a00144c g     F .text	00000110 xPortStartScheduler
1a00396c g     F .text	00000134 memcpy
1a002980 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a000170  w    F .text	00000002 SGPIO_IRQHandler
1a0004cc g     F .text	00000030 tarea_C_code
1a00304c g     F .text	0000000c _cleanup_r
1a0023fc g     F .text	00000022 .hidden __floatsidf
1a001410  w    F .text	0000003c vPortSetupTimerInterrupt
1a0028fc g     F .text	00000082 .hidden __ltdf2
1a00036c g     F .text	00000040 tarea_D_code
1a002a80 g     F .text	00000000 .hidden __aeabi_uldivmod
10002bb4 g       .noinit	00000000 _noinit
1a003c1c g     F .text	00000010 puts
1a000844 g     F .text	00000070 vPortFree
10002b88 g     O .bss	00000004 SystemCoreClock
1a0017dc g     F .text	00000068 Chip_UART_Init
1a000170  w    F .text	00000002 ADC0_IRQHandler
1a008158 g     O .text	000000c8 __mprec_tens
1a000134  w    F .text	00000002 UsageFault_Handler
1a001e64 g     F .text	00000058 Chip_Clock_GetRate
1a0008d4 g     F .text	0000001e vListInsertEnd
10002b70 g     O .bss	00000004 __malloc_top_pad
1a0016e4 g     F .text	00000054 Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0023dc g     F .text	0000001e .hidden __aeabi_ui2d
1a006ccc g     F .text	00000008 _localeconv_r
1a0070cc g     F .text	00000012 __i2b
1a0069c4 g     F .text	00000308 __sfvwrite_r
1a002ab0 g     F .text	000002d0 .hidden __udivmoddi4
1a002158 g     F .text	00000000 .hidden __aeabi_drsub
1a0006b0 g     F .text	0000001c _sbrk_r
1a007d6c g     O .text	00000004 ExtRateIn
1a000170  w    F .text	00000002 IntDefaultHandler
1a000170  w    F .text	00000002 SSP0_SSP1_IRQHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000634 g     F .text	0000004e _read_r
1a0008cc g     F .text	00000006 vListInitialiseItem
1a0029b4 g     F .text	00000012 .hidden __aeabi_dcmplt
1a002d84 g     F .text	000000ce _fclose_r
10002b68 g     O .bss	00000004 __malloc_max_sbrked_mem
1a002420 g     F .text	00000042 .hidden __extendsfdf2
1a002724 g     F .text	000001d0 .hidden __aeabi_ddiv
1a002164 g     F .text	00000276 .hidden __adddf3
1a008240 g       .ARM.exidx	00000000 __exidx_start
10002b98 g     O .bss	00000001 __lock___env_recursive_mutex
1a0024d0 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10002b9c g     O .bss	00000001 __lock___sinit_recursive_mutex
1a000490 g     F .text	0000003c tarea_B_code
1a007554 g     F .text	0000036c _realloc_r
1a0033a4 g     F .text	00000048 __libc_init_array
1a007b2c g     F .text	00000064 _fputwc_r
1a008130 g     O .text	00000028 __mprec_bigtens
1a0023dc g     F .text	0000001e .hidden __floatunsidf
1a000170  w    F .text	00000002 ADC1_IRQHandler
1a007364 g     F .text	00000038 __mcmp
1a000728 g     F .text	0000011c pvPortMalloc
1a000170  w    F .text	00000002 RIT_WDT_IRQHandler
1a000170  w    F .text	00000002 FLASH_EEPROM_ATIMER_IRQHandler
1a001580 g     F .text	00000134 Board_Init
1a0005fc  w    F .text	00000002 _init
1a0008b4 g     F .text	00000016 vListInitialise
1a0000c0 g       .text	00000000 __data_section_table
1a000fb0 g     F .text	0000000c xTaskGetTickCount
1a000170  w    F .text	00000002 RTC_IRQHandler
10002bb4 g       .bss	00000000 _ebss
1a000170  w    F .text	00000002 TIMER0_IRQHandler
1a000524 g     F .text	000000d4 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00702c g     F .text	00000040 __hi0bits
1a0017b0 g     F .text	0000002c Chip_I2C_SetClockRate
1a002a30 g     F .text	0000004e .hidden __fixdfsi
1a000170  w    F .text	00000002 LCD_IRQHandler
1a001ad8 g     F .text	00000048 Chip_Clock_EnableCrystal
10002ba0 g     O .bss	00000001 __lock___malloc_recursive_mutex
1a000170  w    F .text	00000002 M4_IRQHandler
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002164 g     F .text	00000276 .hidden __aeabi_dadd
1a000148 g     F .text	00000018 data_init
1a0028fc g     F .text	00000082 .hidden __ledf2
1a007210 g     F .text	000000a0 __pow5mult
1a002464 g     F .text	0000006a .hidden __aeabi_ul2d
10002b78 g     O .bss	00000004 task_handle_c
1a001790 g     F .text	00000020 Chip_I2C_Init
1a000c64 g     F .text	00000100 vTaskDelete
1a0033f8 g     F .text	00000002 __retarget_lock_release_recursive
1a001d04 g     F .text	00000060 Chip_Clock_GetMainPLLHz
1a007ecc g     O .text	000000e6 gpioPinsInit
1a0029f0 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a002100 g     F .text	00000040 gpioToggle
1a0030ac g     F .text	0000000c __sfp_lock_acquire
1a006dd0 g     F .text	00000000 memchr
1a003164 g     F .text	000001ec _free_r
1a007b90 g     F .text	0000000c __locale_mb_cur_max
1a0029dc g     F .text	00000012 .hidden __aeabi_dcmpge
100009e4 g       .bss	00000000 _bss
1a0019b4 g     F .text	00000070 Chip_ADC_SetSampleRate
1a002160 g     F .text	0000027a .hidden __aeabi_dsub
10000870 g     O .data	00000004 __malloc_sbrk_base
1a000fa0 g     F .text	00000010 vTaskSuspendAll
1a002464 g     F .text	0000006a .hidden __floatundidf
1a0072b0 g     F .text	000000b2 __lshift
1a002024 g     F .text	00000058 Chip_SSP_SetBitRate
1a0008f4 g     F .text	00000026 uxListRemove
1a000170  w    F .text	00000002 I2S0_I2S1_QEI_IRQHandler
1a002020 g     F .text	00000002 Chip_GPIO_Init
1a007d98 g     O .text	00000004 OscRateIn
1a0070e0 g     F .text	00000130 __multiply
10002bb4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00792c g     F .text	00000072 strncpy
10002b40 g     O .bss	00000028 __malloc_current_mallinfo
1a000e9c g     F .text	0000008c vTaskResume
1a007494 g     F .text	000000be __d2b
1a001220 g     F .text	0000001c vTaskSwitchContext
1a000124 g       .text	00000000 __bss_section_table_end
1a000600 g     F .text	0000000a _close_r
1a0023fc g     F .text	00000022 .hidden __aeabi_i2d
1a0033f0 g     F .text	00000002 __retarget_lock_close_recursive
1a005978 g     F .text	000000d0 __swsetup_r
1a0004fc g     F .text	00000024 vApplicationStackOverflowHook
1a002d80  w    F .text	00000002 .hidden __aeabi_ldiv0
1a000d8c g     F .text	00000110 vTaskSuspend
1a002724 g     F .text	000001d0 .hidden __divdf3
10002b7c g     O .bss	00000004 task_handle_b
10000468 g     O .data	00000408 __malloc_av_
1a0024d0 g     F .text	00000254 .hidden __muldf3
1a003c2c g     F .text	00000022 __sread
1a002140 g     F .text	00000018 USB0_IRQHandler
1a003b40 g     F .text	0000000c __malloc_lock
1a000170  w    F .text	00000002 SCT_IRQHandler
1a002fa0 g     F .text	0000005a _fflush_r
1a007a2c g     F .text	0000005e _calloc_r
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0033f4 g     F .text	00000002 __retarget_lock_acquire_recursive
1a003aa0 g     F .text	000000a0 memset
1a00012c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	0000004c main
10002b6c g     O .bss	00000004 __malloc_max_total_mem
1a0033ec g     F .text	00000002 __retarget_lock_init_recursive
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a0012f0 g     F .text	00000024 SVC_Handler
1a003cb0 g     F .text	00000008 __sclose
1a005b70 g     F .text	00000e54 _dtoa_r
1a0033fc g     F .text	00000570 _malloc_r
1a007cac g     F .text	0000001a __ascii_wctomb
1a002474 g     F .text	0000005a .hidden __aeabi_l2d
1a001dfc g     F .text	00000034 Chip_Clock_EnableOpts
1a0016c8 g     F .text	00000018 __stdio_getchar
1a0030c4 g     F .text	000000a0 _malloc_trim_r
1a001b20 g     F .text	000000a8 Chip_Clock_GetClockInputHz
1a001bc8 g     F .text	0000013c Chip_Clock_CalcMainPLLValue
1a0020c8 g     F .text	00000038 SystemInit
1a0000fc g       .text	00000000 __bss_section_table
1a002904 g     F .text	0000007a .hidden __nedf2
1a0005f8  w    F .text	00000002 _fini
1a00110c g     F .text	00000114 xTaskResumeAll
1a000f28 g     F .text	00000078 vTaskStartScheduler
1a001950 g     F .text	00000064 Chip_ADC_Init
10002b8c g     O .bss	00000004 g_pUsbApi
1a001844 g     F .text	0000010c Chip_UART_SetBaudFDR
1a000684 g     F .text	0000002a _write_r
10002b80 g     O .bss	00000004 task_handle_d
1a000170  w    F .text	00000002 SPI_DAC_IRQHandler
1a000170  w    F .text	00000002 ETH_IRQHandler
1000003c g     O .data	00000004 _impure_ptr
1a002e54 g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a000170  w    F .text	00000002 CAN0_IRQHandler
1a007b9c g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
10002bb4 g       .bss	00000000 _pvHeapStart
1a000170  w    F .text	00000002 UART2_CAN1_IRQHandler
1a000124 g       .text	00000000 __section_table_end
1a00207c g     F .text	0000004c Chip_SSP_Init
1a000fbc g     F .text	00000150 xTaskIncrementTick
1a006cd4 g     F .text	0000005c __swhatbuf_r
1a00155c g     F .text	00000024 Board_Debug_Init
1a0029a0 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a0016b4 g     F .text	00000014 __stdio_putchar
100009e4 g       .data	00000000 _edata
1a001774 g     F .text	0000001c Chip_I2C_EventHandler
1a000170  w    F .text	00000002 M0SUB_IRQHandler
1a007a8c g     F .text	0000009e __fputwc
10002ba4 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a000a6c g     F .text	000001f8 xTaskCreate
1a001ed0 g     F .text	00000150 Chip_SetupCoreClock
1a003c50 g     F .text	0000003e __swrite
10000874 g     O .data	00000004 __malloc_trim_threshold
10002b84 g     O .bss	00000001 debugPrint
1a000000 g     O .text	00000040 g_pfnVectors
1a003350 g     F .text	00000052 _fwalk_reent
1a001ebc g     F .text	00000014 SystemCoreClockUpdate
1a00739c g     F .text	000000f8 __mdiff
1a002a30 g     F .text	0000004e .hidden __aeabi_d2iz
1a000170  w    F .text	00000002 DMA_IRQHandler
1a000170  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0030b8 g     F .text	0000000c __sfp_lock_release
1a007fb4 g     O .text	00000101 _ctype_
1a002d80  w    F .text	00000002 .hidden __aeabi_idiv0
1a002a04 g     F .text	0000002c .hidden __unorddf2
1a000130  w    F .text	00000002 BusFault_Handler
10002ba8 g     O .bss	00000001 __lock___dd_hash_mutex
1a006d30 g     F .text	00000094 __smakebuf_r
10002bac g     O .bss	00000001 __lock___tz_mutex
1a003cc0 g     F .text	000000dc strlen
1a0012b8 g     F .text	0000002c pxPortInitialiseStack
1a0003ac g     F .text	000000e4 tarea_A_code
1a001e30 g     F .text	00000034 Chip_Clock_Enable
1a002990 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a0028f4 g     F .text	0000008a .hidden __gedf2
1a000170  w    F .text	00000002 UART3_IRQHandler
1a000170  w    F .text	00000002 MCPWM_IRQHandler
1a007a18 g     F .text	00000014 __sprint_r
1a002420 g     F .text	00000042 .hidden __aeabi_f2d
1a001314 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	00000080 g_pfnVendorVectors
1a002160 g     F .text	0000027a .hidden __subdf3
1a003da0 g     F .text	00001b54 _vfprintf_r
1a000170  w    F .text	00000002 GINT1_IRQHandler
1a00706c g     F .text	00000060 __lo0bits
1a0078c0 g     F .text	0000006c frexp
10000878 g     O .data	0000016c __global_locale
1a001dbc g     F .text	00000040 Chip_Clock_SetBaseClock
1a000170  w    F .text	00000002 GPIO4_IRQHandler
10002bb0 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a001738 g     F .text	0000003c Board_SystemInit
1a006fa0 g     F .text	0000008a __multadd
1a006f8c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 25 05 00 1a 25 01 00 1a 29 01 00 1a     ....%...%...)...
1a000010:	2d 01 00 1a 31 01 00 1a 35 01 00 1a fa 74 ff 53     -...1...5....t.S
	...
1a00002c:	f1 12 00 1a 3d 01 00 1a 00 00 00 00 81 13 00 1a     ....=...........
1a00003c:	e5 13 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	71 01 00 1a 71 01 00 1a 71 01 00 1a 00 00 00 00     q...q...q.......
1a000050:	71 01 00 1a 71 01 00 1a 71 01 00 1a 71 01 00 1a     q...q...q...q...
1a000060:	41 21 00 1a 71 01 00 1a 71 01 00 1a 71 01 00 1a     A!..q...q...q...
1a000070:	71 01 00 1a 71 01 00 1a 71 01 00 1a 71 01 00 1a     q...q...q...q...
1a000080:	71 01 00 1a 71 01 00 1a 71 01 00 1a 71 01 00 1a     q...q...q...q...
1a000090:	71 01 00 1a 71 01 00 1a 71 01 00 1a 71 01 00 1a     q...q...q...q...
1a0000a0:	71 01 00 1a 71 01 00 1a 71 01 00 1a 71 01 00 1a     q...q...q...q...
1a0000b0:	71 01 00 1a 71 01 00 1a 71 01 00 1a 71 01 00 1a     q...q...q...q...

1a0000c0 <__data_section_table>:
1a0000c0:	1a008248 	.word	0x1a008248
1a0000c4:	10000000 	.word	0x10000000
1a0000c8:	000009e4 	.word	0x000009e4
1a0000cc:	1a008248 	.word	0x1a008248
1a0000d0:	10080000 	.word	0x10080000
1a0000d4:	00000000 	.word	0x00000000
1a0000d8:	1a008248 	.word	0x1a008248
1a0000dc:	20000000 	.word	0x20000000
1a0000e0:	00000000 	.word	0x00000000
1a0000e4:	1a008248 	.word	0x1a008248
1a0000e8:	20008000 	.word	0x20008000
1a0000ec:	00000000 	.word	0x00000000
1a0000f0:	1a008248 	.word	0x1a008248
1a0000f4:	2000c000 	.word	0x2000c000
1a0000f8:	00000000 	.word	0x00000000

1a0000fc <__bss_section_table>:
1a0000fc:	100009e4 	.word	0x100009e4
1a000100:	000021d0 	.word	0x000021d0
1a000104:	10080000 	.word	0x10080000
1a000108:	00000000 	.word	0x00000000
1a00010c:	20000000 	.word	0x20000000
1a000110:	00000000 	.word	0x00000000
1a000114:	20008000 	.word	0x20008000
1a000118:	00000000 	.word	0x00000000
1a00011c:	2000c000 	.word	0x2000c000
1a000120:	00000000 	.word	0x00000000

1a000124 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000124:	e7fe      	b.n	1a000124 <NMI_Handler>
1a000126:	bf00      	nop

1a000128 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000128:	e7fe      	b.n	1a000128 <HardFault_Handler>
1a00012a:	bf00      	nop

1a00012c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00012c:	e7fe      	b.n	1a00012c <MemManage_Handler>
1a00012e:	bf00      	nop

1a000130 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000130:	e7fe      	b.n	1a000130 <BusFault_Handler>
1a000132:	bf00      	nop

1a000134 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000134:	e7fe      	b.n	1a000134 <UsageFault_Handler>
1a000136:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000138:	e7fe      	b.n	1a000138 <UsageFault_Handler+0x4>
1a00013a:	bf00      	nop

1a00013c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00013c:	e7fe      	b.n	1a00013c <DebugMon_Handler>
1a00013e:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000140:	e7fe      	b.n	1a000140 <DebugMon_Handler+0x4>
1a000142:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000144:	e7fe      	b.n	1a000144 <DebugMon_Handler+0x8>
1a000146:	bf00      	nop

1a000148 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000148:	b14a      	cbz	r2, 1a00015e <data_init+0x16>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00014a:	b410      	push	{r4}
    for (loop = 0; loop < len; loop = loop + 4)
1a00014c:	2300      	movs	r3, #0
        *pulDest++ = *pulSrc++;
1a00014e:	58c4      	ldr	r4, [r0, r3]
1a000150:	50cc      	str	r4, [r1, r3]
    for (loop = 0; loop < len; loop = loop + 4)
1a000152:	3304      	adds	r3, #4
1a000154:	429a      	cmp	r2, r3
1a000156:	d8fa      	bhi.n	1a00014e <data_init+0x6>
}
1a000158:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00015c:	4770      	bx	lr
1a00015e:	4770      	bx	lr

1a000160 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000160:	b129      	cbz	r1, 1a00016e <bss_init+0xe>
1a000162:	2300      	movs	r3, #0
        *pulDest++ = 0;
1a000164:	461a      	mov	r2, r3
1a000166:	50c2      	str	r2, [r0, r3]
    for (loop = 0; loop < len; loop = loop + 4)
1a000168:	3304      	adds	r3, #4
1a00016a:	4299      	cmp	r1, r3
1a00016c:	d8fb      	bhi.n	1a000166 <bss_init+0x6>
}
1a00016e:	4770      	bx	lr

1a000170 <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a000170:	e7fe      	b.n	1a000170 <ADC0_IRQHandler>
1a000172:	bf00      	nop
1a000174:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000178:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00017c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000180:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000184:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000188:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00018c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000190:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000194:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000198:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00019c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void )
{
1a000300:	b500      	push	{lr}
    BaseType_t res;

    // ---------- CONFIGURACIONES ------------------------------
    PRINTF_CONFIGURE;
    PRINTF( EXAMPLE_WELCOME_TEXT );
1a000302:	480e      	ldr	r0, [pc, #56]	; (1a00033c <main+0x3c>)
{
1a000304:	b083      	sub	sp, #12
    PRINTF( EXAMPLE_WELCOME_TEXT );
1a000306:	f003 fc89 	bl	1a003c1c <puts>

    /* solo creo la tarea A */
    res = xTaskCreate(
1a00030a:	4b0d      	ldr	r3, [pc, #52]	; (1a000340 <main+0x40>)
1a00030c:	9301      	str	r3, [sp, #4]
1a00030e:	2304      	movs	r3, #4
1a000310:	9300      	str	r3, [sp, #0]
1a000312:	22b4      	movs	r2, #180	; 0xb4
1a000314:	2300      	movs	r3, #0
1a000316:	490b      	ldr	r1, [pc, #44]	; (1a000344 <main+0x44>)
1a000318:	480b      	ldr	r0, [pc, #44]	; (1a000348 <main+0x48>)
1a00031a:	f000 fba7 	bl	1a000a6c <xTaskCreate>
              NULL,                       // Parametros de tarea
              tskIDLE_PRIORITY+4,         // Prioridad de la tarea
              &task_handle_a            // Referencia a la tarea creada en el sistema
          );

    configASSERT( res == pdPASS );
1a00031e:	2801      	cmp	r0, #1
1a000320:	d008      	beq.n	1a000334 <main+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000322:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000326:	f383 8811 	msr	BASEPRI, r3
1a00032a:	f3bf 8f6f 	isb	sy
1a00032e:	f3bf 8f4f 	dsb	sy
1a000332:	e7fe      	b.n	1a000332 <main+0x32>


    // Iniciar scheduler
    vTaskStartScheduler();
1a000334:	f000 fdf8 	bl	1a000f28 <vTaskStartScheduler>

    // ---------- REPETIR POR SIEMPRE --------------------------
    while( 1 )
    {
        // Si cae en este while 1 significa que no pudo iniciar el scheduler
    }
1a000338:	e7fe      	b.n	1a000338 <main+0x38>
1a00033a:	bf00      	nop
1a00033c:	1a007cc8 	.word	0x1a007cc8
1a000340:	10002b74 	.word	0x10002b74
1a000344:	1a007ce4 	.word	0x1a007ce4
1a000348:	1a0003ad 	.word	0x1a0003ad

1a00034c <delay_con_while>:
			SOLO ESTA AQUI POR MOTIVOS DIDACTICOS

   @param cuentas
 */
void delay_con_while( uint32_t ms )
{
1a00034c:	b510      	push	{r4, lr}
1a00034e:	b082      	sub	sp, #8
1a000350:	4604      	mov	r4, r0
    volatile uint32_t dummy;
    /* obtengo el tick absoluto */
    TickType_t base = xTaskGetTickCount();
1a000352:	f000 fe2d 	bl	1a000fb0 <xTaskGetTickCount>
    /* calculo el tick absoluto para destrabar el while */
    TickType_t target = base  + ms ;   /* no esta contemplado el wrap arraond */
1a000356:	4404      	add	r4, r0
    while(  xTaskGetTickCount() < target   )
1a000358:	e002      	b.n	1a000360 <delay_con_while+0x14>
    {
        dummy++;
1a00035a:	9b01      	ldr	r3, [sp, #4]
1a00035c:	3301      	adds	r3, #1
1a00035e:	9301      	str	r3, [sp, #4]
    while(  xTaskGetTickCount() < target   )
1a000360:	f000 fe26 	bl	1a000fb0 <xTaskGetTickCount>
1a000364:	42a0      	cmp	r0, r4
1a000366:	d3f8      	bcc.n	1a00035a <delay_con_while+0xe>
    }
}
1a000368:	b002      	add	sp, #8
1a00036a:	bd10      	pop	{r4, pc}

1a00036c <tarea_D_code>:
    /*...... en una one shot real, nunca retonar sin matar la tarea */
    //vTaskDelete(NULL);
}

void tarea_D_code( void* taskParmPtr )
{
1a00036c:	b508      	push	{r3, lr}
    PRINTF( "Tarea D\r\n" );
1a00036e:	480b      	ldr	r0, [pc, #44]	; (1a00039c <tarea_D_code+0x30>)
1a000370:	f003 fc54 	bl	1a003c1c <puts>

    /* termino todas las tareas de mas prioridad */
    vTaskDelete( task_handle_a );
1a000374:	4b0a      	ldr	r3, [pc, #40]	; (1a0003a0 <tarea_D_code+0x34>)
1a000376:	6818      	ldr	r0, [r3, #0]
1a000378:	f000 fc74 	bl	1a000c64 <vTaskDelete>
    vTaskDelete( task_handle_b );
1a00037c:	4b09      	ldr	r3, [pc, #36]	; (1a0003a4 <tarea_D_code+0x38>)
1a00037e:	6818      	ldr	r0, [r3, #0]
1a000380:	f000 fc70 	bl	1a000c64 <vTaskDelete>
    vTaskDelete( task_handle_c );
1a000384:	4b08      	ldr	r3, [pc, #32]	; (1a0003a8 <tarea_D_code+0x3c>)
1a000386:	6818      	ldr	r0, [r3, #0]
1a000388:	f000 fc6c 	bl	1a000c64 <vTaskDelete>

    while( 1 )
    {
        gpioToggle( LED3 );
1a00038c:	202d      	movs	r0, #45	; 0x2d
1a00038e:	f001 feb7 	bl	1a002100 <gpioToggle>
        delay_con_while( 500 );
1a000392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000396:	f7ff ffd9 	bl	1a00034c <delay_con_while>
1a00039a:	e7f7      	b.n	1a00038c <tarea_D_code+0x20>
1a00039c:	1a007d28 	.word	0x1a007d28
1a0003a0:	10002b74 	.word	0x10002b74
1a0003a4:	10002b7c 	.word	0x10002b7c
1a0003a8:	10002b78 	.word	0x10002b78

1a0003ac <tarea_A_code>:
{
1a0003ac:	b530      	push	{r4, r5, lr}
    PRINTF( "Tarea A\r\n" );
1a0003ae:	482d      	ldr	r0, [pc, #180]	; (1a000464 <tarea_A_code+0xb8>)
{
1a0003b0:	b083      	sub	sp, #12
    PRINTF( "Tarea A\r\n" );
1a0003b2:	f003 fc33 	bl	1a003c1c <puts>
    UBaseType_t my_prio = uxTaskPriorityGet( 0 );   /* se podria haber usado uxTaskPriorityGet( task_handle_task1 ) */
1a0003b6:	2000      	movs	r0, #0
1a0003b8:	f000 fcd4 	bl	1a000d64 <uxTaskPriorityGet>
    res = xTaskCreate(
1a0003bc:	4b2a      	ldr	r3, [pc, #168]	; (1a000468 <tarea_A_code+0xbc>)
1a0003be:	492b      	ldr	r1, [pc, #172]	; (1a00046c <tarea_A_code+0xc0>)
1a0003c0:	1e85      	subs	r5, r0, #2
1a0003c2:	e9cd 5300 	strd	r5, r3, [sp]
    UBaseType_t my_prio = uxTaskPriorityGet( 0 );   /* se podria haber usado uxTaskPriorityGet( task_handle_task1 ) */
1a0003c6:	4604      	mov	r4, r0
    res = xTaskCreate(
1a0003c8:	2300      	movs	r3, #0
1a0003ca:	22b4      	movs	r2, #180	; 0xb4
1a0003cc:	4828      	ldr	r0, [pc, #160]	; (1a000470 <tarea_A_code+0xc4>)
1a0003ce:	f000 fb4d 	bl	1a000a6c <xTaskCreate>
    configASSERT( res == pdPASS );
1a0003d2:	2801      	cmp	r0, #1
1a0003d4:	d008      	beq.n	1a0003e8 <tarea_A_code+0x3c>
1a0003d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0003da:	f383 8811 	msr	BASEPRI, r3
1a0003de:	f3bf 8f6f 	isb	sy
1a0003e2:	f3bf 8f4f 	dsb	sy
1a0003e6:	e7fe      	b.n	1a0003e6 <tarea_A_code+0x3a>
    res = xTaskCreate(
1a0003e8:	4b22      	ldr	r3, [pc, #136]	; (1a000474 <tarea_A_code+0xc8>)
1a0003ea:	4923      	ldr	r1, [pc, #140]	; (1a000478 <tarea_A_code+0xcc>)
1a0003ec:	4823      	ldr	r0, [pc, #140]	; (1a00047c <tarea_A_code+0xd0>)
1a0003ee:	e9cd 5300 	strd	r5, r3, [sp]
1a0003f2:	22b4      	movs	r2, #180	; 0xb4
1a0003f4:	2300      	movs	r3, #0
1a0003f6:	f000 fb39 	bl	1a000a6c <xTaskCreate>
    configASSERT( res == pdPASS );
1a0003fa:	2801      	cmp	r0, #1
1a0003fc:	d008      	beq.n	1a000410 <tarea_A_code+0x64>
1a0003fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000402:	f383 8811 	msr	BASEPRI, r3
1a000406:	f3bf 8f6f 	isb	sy
1a00040a:	f3bf 8f4f 	dsb	sy
1a00040e:	e7fe      	b.n	1a00040e <tarea_A_code+0x62>
    res = xTaskCreate(
1a000410:	4b1b      	ldr	r3, [pc, #108]	; (1a000480 <tarea_A_code+0xd4>)
1a000412:	491c      	ldr	r1, [pc, #112]	; (1a000484 <tarea_A_code+0xd8>)
1a000414:	481c      	ldr	r0, [pc, #112]	; (1a000488 <tarea_A_code+0xdc>)
1a000416:	3c03      	subs	r4, #3
1a000418:	e9cd 4300 	strd	r4, r3, [sp]
1a00041c:	22b4      	movs	r2, #180	; 0xb4
1a00041e:	2300      	movs	r3, #0
1a000420:	f000 fb24 	bl	1a000a6c <xTaskCreate>
    configASSERT( res == pdPASS );
1a000424:	2801      	cmp	r0, #1
1a000426:	d008      	beq.n	1a00043a <tarea_A_code+0x8e>
1a000428:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00042c:	f383 8811 	msr	BASEPRI, r3
1a000430:	f3bf 8f6f 	isb	sy
1a000434:	f3bf 8f4f 	dsb	sy
1a000438:	e7fe      	b.n	1a000438 <tarea_A_code+0x8c>
    vTaskSuspend( NULL );                   /* se podria haber usado vTaskSuspend( task_handle_task1 ) */
1a00043a:	2000      	movs	r0, #0
1a00043c:	f000 fca6 	bl	1a000d8c <vTaskSuspend>
1a000440:	2404      	movs	r4, #4
        gpioToggle( led );
1a000442:	202a      	movs	r0, #42	; 0x2a
1a000444:	f001 fe5c 	bl	1a002100 <gpioToggle>
        delay_con_while( 500 );
1a000448:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00044c:	f7ff ff7e 	bl	1a00034c <delay_con_while>
    for( ; cycles>0 ; cycles-- )
1a000450:	3c01      	subs	r4, #1
1a000452:	d1f6      	bne.n	1a000442 <tarea_A_code+0x96>
    vTaskSuspend( task_handle_a );          /* se podria haber usado vTaskSuspend( 0 ) */
1a000454:	4b0d      	ldr	r3, [pc, #52]	; (1a00048c <tarea_A_code+0xe0>)
1a000456:	6818      	ldr	r0, [r3, #0]
}
1a000458:	b003      	add	sp, #12
1a00045a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    vTaskSuspend( task_handle_a );          /* se podria haber usado vTaskSuspend( 0 ) */
1a00045e:	f000 bc95 	b.w	1a000d8c <vTaskSuspend>
1a000462:	bf00      	nop
1a000464:	1a007cec 	.word	0x1a007cec
1a000468:	10002b7c 	.word	0x10002b7c
1a00046c:	1a007cf8 	.word	0x1a007cf8
1a000470:	1a000491 	.word	0x1a000491
1a000474:	10002b78 	.word	0x10002b78
1a000478:	1a007d00 	.word	0x1a007d00
1a00047c:	1a0004cd 	.word	0x1a0004cd
1a000480:	10002b80 	.word	0x10002b80
1a000484:	1a007d08 	.word	0x1a007d08
1a000488:	1a00036d 	.word	0x1a00036d
1a00048c:	10002b74 	.word	0x10002b74

1a000490 <tarea_B_code>:
{
1a000490:	b510      	push	{r4, lr}
    PRINTF( "Tarea B\r\n" );
1a000492:	480b      	ldr	r0, [pc, #44]	; (1a0004c0 <tarea_B_code+0x30>)
1a000494:	f003 fbc2 	bl	1a003c1c <puts>
1a000498:	2406      	movs	r4, #6
        gpioToggle( led );
1a00049a:	202b      	movs	r0, #43	; 0x2b
1a00049c:	f001 fe30 	bl	1a002100 <gpioToggle>
        delay_con_while( 500 );
1a0004a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a0004a4:	f7ff ff52 	bl	1a00034c <delay_con_while>
    for( ; cycles>0 ; cycles-- )
1a0004a8:	3c01      	subs	r4, #1
1a0004aa:	d1f6      	bne.n	1a00049a <tarea_B_code+0xa>
    vTaskResume( task_handle_a );
1a0004ac:	4b05      	ldr	r3, [pc, #20]	; (1a0004c4 <tarea_B_code+0x34>)
1a0004ae:	6818      	ldr	r0, [r3, #0]
1a0004b0:	f000 fcf4 	bl	1a000e9c <vTaskResume>
    vTaskSuspend( task_handle_b );   /* se podria haber usado vTaskSuspend( 0 ) */
1a0004b4:	4b04      	ldr	r3, [pc, #16]	; (1a0004c8 <tarea_B_code+0x38>)
}
1a0004b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    vTaskSuspend( task_handle_b );   /* se podria haber usado vTaskSuspend( 0 ) */
1a0004ba:	6818      	ldr	r0, [r3, #0]
1a0004bc:	f000 bc66 	b.w	1a000d8c <vTaskSuspend>
1a0004c0:	1a007d10 	.word	0x1a007d10
1a0004c4:	10002b74 	.word	0x10002b74
1a0004c8:	10002b7c 	.word	0x10002b7c

1a0004cc <tarea_C_code>:
{
1a0004cc:	b510      	push	{r4, lr}
    PRINTF( "Tarea C\r\n" );
1a0004ce:	4809      	ldr	r0, [pc, #36]	; (1a0004f4 <tarea_C_code+0x28>)
1a0004d0:	f003 fba4 	bl	1a003c1c <puts>
1a0004d4:	2406      	movs	r4, #6
        gpioToggle( led );
1a0004d6:	202c      	movs	r0, #44	; 0x2c
1a0004d8:	f001 fe12 	bl	1a002100 <gpioToggle>
        delay_con_while( 500 );
1a0004dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a0004e0:	f7ff ff34 	bl	1a00034c <delay_con_while>
    for( ; cycles>0 ; cycles-- )
1a0004e4:	3c01      	subs	r4, #1
1a0004e6:	d1f6      	bne.n	1a0004d6 <tarea_C_code+0xa>
    vTaskSuspend( task_handle_c );      /* se podria haber usado vTaskSuspend( 0 ) */
1a0004e8:	4b03      	ldr	r3, [pc, #12]	; (1a0004f8 <tarea_C_code+0x2c>)
}
1a0004ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    vTaskSuspend( task_handle_c );      /* se podria haber usado vTaskSuspend( 0 ) */
1a0004ee:	6818      	ldr	r0, [r3, #0]
1a0004f0:	f000 bc4c 	b.w	1a000d8c <vTaskSuspend>
1a0004f4:	1a007d1c 	.word	0x1a007d1c
1a0004f8:	10002b78 	.word	0x10002b78

1a0004fc <vApplicationStackOverflowHook>:

   @param pxTask
   @param pcTaskName
 */
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a0004fc:	b508      	push	{r3, lr}
    PRINTF( "\r\nApplication Stack Overflow!! on Task: %s\r\n", ( char* )pcTaskName );
1a0004fe:	4807      	ldr	r0, [pc, #28]	; (1a00051c <vApplicationStackOverflowHook+0x20>)
1a000500:	f003 fb2a 	bl	1a003b58 <printf>

    taskENTER_CRITICAL();
1a000504:	f000 ff06 	bl	1a001314 <vPortEnterCritical>
1a000508:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00050c:	f383 8811 	msr	BASEPRI, r3
1a000510:	f3bf 8f6f 	isb	sy
1a000514:	f3bf 8f4f 	dsb	sy
    configASSERT( 0 );   /* hang the execution for debugging purposes */
1a000518:	e7fe      	b.n	1a000518 <vApplicationStackOverflowHook+0x1c>
1a00051a:	bf00      	nop
1a00051c:	1a007d34 	.word	0x1a007d34

1a000520 <initialise_monitor_handles>:
}
1a000520:	4770      	bx	lr
1a000522:	bf00      	nop

1a000524 <Reset_Handler>:
void Reset_Handler(void) {
1a000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    __asm__ volatile("cpsid i");
1a000526:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000528:	4925      	ldr	r1, [pc, #148]	; (1a0005c0 <Reset_Handler+0x9c>)
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00052a:	4b26      	ldr	r3, [pc, #152]	; (1a0005c4 <Reset_Handler+0xa0>)
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00052c:	4826      	ldr	r0, [pc, #152]	; (1a0005c8 <Reset_Handler+0xa4>)
1a00052e:	6008      	str	r0, [r1, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000530:	4926      	ldr	r1, [pc, #152]	; (1a0005cc <Reset_Handler+0xa8>)
1a000532:	6019      	str	r1, [r3, #0]
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000534:	4a26      	ldr	r2, [pc, #152]	; (1a0005d0 <Reset_Handler+0xac>)
1a000536:	4f27      	ldr	r7, [pc, #156]	; (1a0005d4 <Reset_Handler+0xb0>)
1a000538:	4e27      	ldr	r6, [pc, #156]	; (1a0005d8 <Reset_Handler+0xb4>)
1a00053a:	4d28      	ldr	r5, [pc, #160]	; (1a0005dc <Reset_Handler+0xb8>)
1a00053c:	4c28      	ldr	r4, [pc, #160]	; (1a0005e0 <Reset_Handler+0xbc>)
1a00053e:	4829      	ldr	r0, [pc, #164]	; (1a0005e4 <Reset_Handler+0xc0>)
1a000540:	4929      	ldr	r1, [pc, #164]	; (1a0005e8 <Reset_Handler+0xc4>)
1a000542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000546:	603b      	str	r3, [r7, #0]
1a000548:	6033      	str	r3, [r6, #0]
1a00054a:	6013      	str	r3, [r2, #0]
1a00054c:	602b      	str	r3, [r5, #0]
1a00054e:	6023      	str	r3, [r4, #0]
1a000550:	6003      	str	r3, [r0, #0]
1a000552:	600b      	str	r3, [r1, #0]
1a000554:	6153      	str	r3, [r2, #20]
    __asm__ volatile("cpsie i");
1a000556:	b662      	cpsie	i
    while (SectionTableAddr < &__data_section_table_end) {
1a000558:	4a24      	ldr	r2, [pc, #144]	; (1a0005ec <Reset_Handler+0xc8>)
1a00055a:	4e25      	ldr	r6, [pc, #148]	; (1a0005f0 <Reset_Handler+0xcc>)
1a00055c:	42b2      	cmp	r2, r6
1a00055e:	d20e      	bcs.n	1a00057e <Reset_Handler+0x5a>
        ExeAddr = *SectionTableAddr++;
1a000560:	e9d2 4500 	ldrd	r4, r5, [r2]
        SectionLen = *SectionTableAddr++;
1a000564:	320c      	adds	r2, #12
1a000566:	f852 0c04 	ldr.w	r0, [r2, #-4]
    for (loop = 0; loop < len; loop = loop + 4)
1a00056a:	2800      	cmp	r0, #0
1a00056c:	d0f6      	beq.n	1a00055c <Reset_Handler+0x38>
1a00056e:	2300      	movs	r3, #0
        *pulDest++ = *pulSrc++;
1a000570:	58e1      	ldr	r1, [r4, r3]
1a000572:	50e9      	str	r1, [r5, r3]
    for (loop = 0; loop < len; loop = loop + 4)
1a000574:	3304      	adds	r3, #4
1a000576:	4298      	cmp	r0, r3
1a000578:	d8fa      	bhi.n	1a000570 <Reset_Handler+0x4c>
    while (SectionTableAddr < &__data_section_table_end) {
1a00057a:	42b2      	cmp	r2, r6
1a00057c:	d3f0      	bcc.n	1a000560 <Reset_Handler+0x3c>
    while (SectionTableAddr < &__bss_section_table_end) {
1a00057e:	491d      	ldr	r1, [pc, #116]	; (1a0005f4 <Reset_Handler+0xd0>)
1a000580:	428a      	cmp	r2, r1
1a000582:	d213      	bcs.n	1a0005ac <Reset_Handler+0x88>
1a000584:	3901      	subs	r1, #1
1a000586:	1a89      	subs	r1, r1, r2
1a000588:	f102 0310 	add.w	r3, r2, #16
1a00058c:	f021 0107 	bic.w	r1, r1, #7
1a000590:	4419      	add	r1, r3
1a000592:	3208      	adds	r2, #8
        *pulDest++ = 0;
1a000594:	2400      	movs	r4, #0
        ExeAddr = *SectionTableAddr++;
1a000596:	e952 5002 	ldrd	r5, r0, [r2, #-8]
    for (loop = 0; loop < len; loop = loop + 4)
1a00059a:	b120      	cbz	r0, 1a0005a6 <Reset_Handler+0x82>
1a00059c:	2300      	movs	r3, #0
        *pulDest++ = 0;
1a00059e:	50ec      	str	r4, [r5, r3]
    for (loop = 0; loop < len; loop = loop + 4)
1a0005a0:	3304      	adds	r3, #4
1a0005a2:	4298      	cmp	r0, r3
1a0005a4:	d8fb      	bhi.n	1a00059e <Reset_Handler+0x7a>
1a0005a6:	3208      	adds	r2, #8
    while (SectionTableAddr < &__bss_section_table_end) {
1a0005a8:	428a      	cmp	r2, r1
1a0005aa:	d1f4      	bne.n	1a000596 <Reset_Handler+0x72>
    SystemInit();
1a0005ac:	f001 fd8c 	bl	1a0020c8 <SystemInit>
    __libc_init_array();
1a0005b0:	f002 fef8 	bl	1a0033a4 <__libc_init_array>
    initialise_monitor_handles();
1a0005b4:	f7ff ffb4 	bl	1a000520 <initialise_monitor_handles>
    main();
1a0005b8:	f7ff fea2 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a0005bc:	bf30      	wfi
1a0005be:	e7fd      	b.n	1a0005bc <Reset_Handler+0x98>
1a0005c0:	40053100 	.word	0x40053100
1a0005c4:	40053104 	.word	0x40053104
1a0005c8:	10df1000 	.word	0x10df1000
1a0005cc:	01dff7ff 	.word	0x01dff7ff
1a0005d0:	e000e288 	.word	0xe000e288
1a0005d4:	e000e280 	.word	0xe000e280
1a0005d8:	e000e284 	.word	0xe000e284
1a0005dc:	e000e28c 	.word	0xe000e28c
1a0005e0:	e000e290 	.word	0xe000e290
1a0005e4:	e000e294 	.word	0xe000e294
1a0005e8:	e000e298 	.word	0xe000e298
1a0005ec:	1a0000c0 	.word	0x1a0000c0
1a0005f0:	1a0000fc 	.word	0x1a0000fc
1a0005f4:	1a000124 	.word	0x1a000124

1a0005f8 <_fini>:
1a0005f8:	4770      	bx	lr
1a0005fa:	bf00      	nop

1a0005fc <_init>:
1a0005fc:	4770      	bx	lr
1a0005fe:	bf00      	nop

1a000600 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000600:	2309      	movs	r3, #9
1a000602:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000608:	4770      	bx	lr
1a00060a:	bf00      	nop

1a00060c <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00060c:	2358      	movs	r3, #88	; 0x58
1a00060e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000614:	4770      	bx	lr
1a000616:	bf00      	nop

1a000618 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000618:	2902      	cmp	r1, #2
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a00061a:	bf83      	ittte	hi
1a00061c:	2309      	movhi	r3, #9
1a00061e:	6003      	strhi	r3, [r0, #0]
       return -1;
1a000620:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
       return 1;
1a000624:	2001      	movls	r0, #1
   }
}
1a000626:	4770      	bx	lr

1a000628 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000628:	2358      	movs	r3, #88	; 0x58
1a00062a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00062c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000630:	4770      	bx	lr
1a000632:	bf00      	nop

1a000634 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000634:	2902      	cmp	r1, #2
1a000636:	d81f      	bhi.n	1a000678 <_read_r+0x44>
1a000638:	4413      	add	r3, r2
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a00063a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00063e:	4607      	mov	r7, r0
1a000640:	1e5c      	subs	r4, r3, #1
1a000642:	1e56      	subs	r6, r2, #1
1a000644:	f1c2 0502 	rsb	r5, r2, #2
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000648:	42a6      	cmp	r6, r4
1a00064a:	d00f      	beq.n	1a00066c <_read_r+0x38>
         int c = __stdio_getchar();
1a00064c:	f001 f83c 	bl	1a0016c8 <__stdio_getchar>
         if( c != -1 ){
1a000650:	1c43      	adds	r3, r0, #1
1a000652:	d0fb      	beq.n	1a00064c <_read_r+0x18>
            ((char*) b)[i++] = (char) c;
            if( c == '\r' || c == '\n' ){
1a000654:	280d      	cmp	r0, #13
1a000656:	eb05 0806 	add.w	r8, r5, r6
            ((char*) b)[i++] = (char) c;
1a00065a:	f806 0f01 	strb.w	r0, [r6, #1]!
            if( c == '\r' || c == '\n' ){
1a00065e:	d001      	beq.n	1a000664 <_read_r+0x30>
1a000660:	280a      	cmp	r0, #10
1a000662:	d1f1      	bne.n	1a000648 <_read_r+0x14>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000664:	f001 f830 	bl	1a0016c8 <__stdio_getchar>
               return i;
1a000668:	4640      	mov	r0, r8
1a00066a:	e003      	b.n	1a000674 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a00066c:	2313      	movs	r3, #19
1a00066e:	603b      	str	r3, [r7, #0]
      return -1;
1a000670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000678:	2313      	movs	r3, #19
1a00067a:	6003      	str	r3, [r0, #0]
      return -1;
1a00067c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000680:	4770      	bx	lr
1a000682:	bf00      	nop

1a000684 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000684:	2902      	cmp	r1, #2
1a000686:	d80d      	bhi.n	1a0006a4 <_write_r+0x20>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000688:	b570      	push	{r4, r5, r6, lr}
1a00068a:	461e      	mov	r6, r3
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00068c:	b143      	cbz	r3, 1a0006a0 <_write_r+0x1c>
1a00068e:	18d5      	adds	r5, r2, r3
1a000690:	3d01      	subs	r5, #1
1a000692:	1e54      	subs	r4, r2, #1
           __stdio_putchar(((char*) b)[i]);
1a000694:	f814 0f01 	ldrb.w	r0, [r4, #1]!
1a000698:	f001 f80c 	bl	1a0016b4 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a00069c:	42ac      	cmp	r4, r5
1a00069e:	d1f9      	bne.n	1a000694 <_write_r+0x10>
       return n;
1a0006a0:	4630      	mov	r0, r6
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0006a2:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0006a4:	2313      	movs	r3, #19
1a0006a6:	6003      	str	r3, [r0, #0]
       return -1;
1a0006a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0006ac:	4770      	bx	lr
1a0006ae:	bf00      	nop

1a0006b0 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0006b0:	4b04      	ldr	r3, [pc, #16]	; (1a0006c4 <_sbrk_r+0x14>)
1a0006b2:	4a05      	ldr	r2, [pc, #20]	; (1a0006c8 <_sbrk_r+0x18>)
1a0006b4:	6818      	ldr	r0, [r3, #0]
1a0006b6:	2800      	cmp	r0, #0
1a0006b8:	bf08      	it	eq
1a0006ba:	4610      	moveq	r0, r2
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
   heap_end += incr;
1a0006bc:	4401      	add	r1, r0
1a0006be:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0006c0:	4770      	bx	lr
1a0006c2:	bf00      	nop
1a0006c4:	100009e4 	.word	0x100009e4
1a0006c8:	10002bb4 	.word	0x10002bb4

1a0006cc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a0006cc:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0006ce:	4a14      	ldr	r2, [pc, #80]	; (1a000720 <prvInsertBlockIntoFreeList+0x54>)
1a0006d0:	e000      	b.n	1a0006d4 <prvInsertBlockIntoFreeList+0x8>
1a0006d2:	461a      	mov	r2, r3
1a0006d4:	6813      	ldr	r3, [r2, #0]
1a0006d6:	4283      	cmp	r3, r0
1a0006d8:	d3fb      	bcc.n	1a0006d2 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a0006da:	6854      	ldr	r4, [r2, #4]
1a0006dc:	6841      	ldr	r1, [r0, #4]
1a0006de:	1915      	adds	r5, r2, r4
1a0006e0:	42a8      	cmp	r0, r5
1a0006e2:	d008      	beq.n	1a0006f6 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a0006e4:	1844      	adds	r4, r0, r1
1a0006e6:	42a3      	cmp	r3, r4
1a0006e8:	d00b      	beq.n	1a000702 <prvInsertBlockIntoFreeList+0x36>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0006ea:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0006ec:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0006ee:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0006f0:	bf18      	it	ne
1a0006f2:	6010      	strne	r0, [r2, #0]
}
1a0006f4:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a0006f6:	4421      	add	r1, r4
1a0006f8:	4610      	mov	r0, r2
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a0006fa:	1844      	adds	r4, r0, r1
1a0006fc:	42a3      	cmp	r3, r4
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a0006fe:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000700:	d1f3      	bne.n	1a0006ea <prvInsertBlockIntoFreeList+0x1e>
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a000702:	4c08      	ldr	r4, [pc, #32]	; (1a000724 <prvInsertBlockIntoFreeList+0x58>)
1a000704:	6824      	ldr	r4, [r4, #0]
1a000706:	42a3      	cmp	r3, r4
1a000708:	d0ef      	beq.n	1a0006ea <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a00070a:	e9d3 3400 	ldrd	r3, r4, [r3]
	if( pxIterator != pxBlockToInsert )
1a00070e:	4290      	cmp	r0, r2
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000710:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000712:	6003      	str	r3, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000714:	6041      	str	r1, [r0, #4]
}
1a000716:	bc30      	pop	{r4, r5}
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000718:	bf18      	it	ne
1a00071a:	6010      	strne	r0, [r2, #0]
}
1a00071c:	4770      	bx	lr
1a00071e:	bf00      	nop
1a000720:	100029f8 	.word	0x100029f8
1a000724:	100009e8 	.word	0x100009e8

1a000728 <pvPortMalloc>:
{
1a000728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00072c:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a00072e:	f000 fc37 	bl	1a000fa0 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a000732:	493d      	ldr	r1, [pc, #244]	; (1a000828 <pvPortMalloc+0x100>)
1a000734:	680b      	ldr	r3, [r1, #0]
1a000736:	2b00      	cmp	r3, #0
1a000738:	d039      	beq.n	1a0007ae <pvPortMalloc+0x86>
1a00073a:	4b3c      	ldr	r3, [pc, #240]	; (1a00082c <pvPortMalloc+0x104>)
1a00073c:	681d      	ldr	r5, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a00073e:	422c      	tst	r4, r5
1a000740:	d12f      	bne.n	1a0007a2 <pvPortMalloc+0x7a>
			if( xWantedSize > 0 )
1a000742:	b374      	cbz	r4, 1a0007a2 <pvPortMalloc+0x7a>
				xWantedSize += xHeapStructSize;
1a000744:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a000748:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00074a:	bf1c      	itt	ne
1a00074c:	f023 0307 	bicne.w	r3, r3, #7
1a000750:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000752:	b333      	cbz	r3, 1a0007a2 <pvPortMalloc+0x7a>
1a000754:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 1a000840 <pvPortMalloc+0x118>
1a000758:	f8d8 6000 	ldr.w	r6, [r8]
1a00075c:	429e      	cmp	r6, r3
1a00075e:	d320      	bcc.n	1a0007a2 <pvPortMalloc+0x7a>
				pxBlock = xStart.pxNextFreeBlock;
1a000760:	4a33      	ldr	r2, [pc, #204]	; (1a000830 <pvPortMalloc+0x108>)
1a000762:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000764:	e003      	b.n	1a00076e <pvPortMalloc+0x46>
1a000766:	6827      	ldr	r7, [r4, #0]
1a000768:	b127      	cbz	r7, 1a000774 <pvPortMalloc+0x4c>
1a00076a:	4622      	mov	r2, r4
1a00076c:	463c      	mov	r4, r7
1a00076e:	6860      	ldr	r0, [r4, #4]
1a000770:	4298      	cmp	r0, r3
1a000772:	d3f8      	bcc.n	1a000766 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
1a000774:	6809      	ldr	r1, [r1, #0]
1a000776:	42a1      	cmp	r1, r4
1a000778:	d013      	beq.n	1a0007a2 <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a00077a:	6821      	ldr	r1, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a00077c:	6817      	ldr	r7, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a00077e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000780:	1ac2      	subs	r2, r0, r3
1a000782:	2a10      	cmp	r2, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000784:	f107 0708 	add.w	r7, r7, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000788:	d934      	bls.n	1a0007f4 <pvPortMalloc+0xcc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a00078a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a00078c:	0741      	lsls	r1, r0, #29
1a00078e:	d02c      	beq.n	1a0007ea <pvPortMalloc+0xc2>
1a000790:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000794:	f383 8811 	msr	BASEPRI, r3
1a000798:	f3bf 8f6f 	isb	sy
1a00079c:	f3bf 8f4f 	dsb	sy
1a0007a0:	e7fe      	b.n	1a0007a0 <pvPortMalloc+0x78>
	( void ) xTaskResumeAll();
1a0007a2:	f000 fcb3 	bl	1a00110c <xTaskResumeAll>
1a0007a6:	2700      	movs	r7, #0
}
1a0007a8:	4638      	mov	r0, r7
1a0007aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
1a0007ae:	4b21      	ldr	r3, [pc, #132]	; (1a000834 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
1a0007b0:	4a21      	ldr	r2, [pc, #132]	; (1a000838 <pvPortMalloc+0x110>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0007b2:	4f22      	ldr	r7, [pc, #136]	; (1a00083c <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a0007b4:	4e1e      	ldr	r6, [pc, #120]	; (1a000830 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a0007b6:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a0007b8:	bf18      	it	ne
1a0007ba:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0007bc:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0007c0:	bf18      	it	ne
1a0007c2:	f023 0307 	bicne.w	r3, r3, #7
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0007c6:	4d1e      	ldr	r5, [pc, #120]	; (1a000840 <pvPortMalloc+0x118>)
	pxEnd = ( void * ) uxAddress;
1a0007c8:	600a      	str	r2, [r1, #0]
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a0007ca:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a0007cc:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0007ce:	603b      	str	r3, [r7, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0007d0:	602b      	str	r3, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0007d2:	4f16      	ldr	r7, [pc, #88]	; (1a00082c <pvPortMalloc+0x104>)
	xStart.xBlockSize = ( size_t ) 0;
1a0007d4:	2500      	movs	r5, #0
	pxEnd->pxNextFreeBlock = NULL;
1a0007d6:	e9c2 5500 	strd	r5, r5, [r2]
	xStart.xBlockSize = ( size_t ) 0;
1a0007da:	6075      	str	r5, [r6, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0007dc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a0007e0:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a0007e2:	6043      	str	r3, [r0, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a0007e4:	6030      	str	r0, [r6, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0007e6:	603d      	str	r5, [r7, #0]
1a0007e8:	e7a9      	b.n	1a00073e <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a0007ea:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a0007ec:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a0007ee:	f7ff ff6d 	bl	1a0006cc <prvInsertBlockIntoFreeList>
1a0007f2:	6860      	ldr	r0, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0007f4:	4911      	ldr	r1, [pc, #68]	; (1a00083c <pvPortMalloc+0x114>)
1a0007f6:	680a      	ldr	r2, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0007f8:	1a36      	subs	r6, r6, r0
					pxBlock->pxNextFreeBlock = NULL;
1a0007fa:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0007fc:	4305      	orrs	r5, r0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0007fe:	4296      	cmp	r6, r2
					pxBlock->pxNextFreeBlock = NULL;
1a000800:	e9c4 3500 	strd	r3, r5, [r4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a000804:	bf38      	it	cc
1a000806:	600e      	strcc	r6, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000808:	f8c8 6000 	str.w	r6, [r8]
	( void ) xTaskResumeAll();
1a00080c:	f000 fc7e 	bl	1a00110c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000810:	077b      	lsls	r3, r7, #29
1a000812:	d0c9      	beq.n	1a0007a8 <pvPortMalloc+0x80>
1a000814:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000818:	f383 8811 	msr	BASEPRI, r3
1a00081c:	f3bf 8f6f 	isb	sy
1a000820:	f3bf 8f4f 	dsb	sy
1a000824:	e7fe      	b.n	1a000824 <pvPortMalloc+0xfc>
1a000826:	bf00      	nop
1a000828:	100009e8 	.word	0x100009e8
1a00082c:	100029ec 	.word	0x100029ec
1a000830:	100029f8 	.word	0x100029f8
1a000834:	100009ec 	.word	0x100009ec
1a000838:	100029e4 	.word	0x100029e4
1a00083c:	100029f4 	.word	0x100029f4
1a000840:	100029f0 	.word	0x100029f0

1a000844 <vPortFree>:
	if( pv != NULL )
1a000844:	b1d0      	cbz	r0, 1a00087c <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a000846:	4a19      	ldr	r2, [pc, #100]	; (1a0008ac <vPortFree+0x68>)
1a000848:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a00084c:	6812      	ldr	r2, [r2, #0]
1a00084e:	4213      	tst	r3, r2
1a000850:	d00b      	beq.n	1a00086a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000852:	f850 1c08 	ldr.w	r1, [r0, #-8]
1a000856:	b191      	cbz	r1, 1a00087e <vPortFree+0x3a>
1a000858:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00085c:	f383 8811 	msr	BASEPRI, r3
1a000860:	f3bf 8f6f 	isb	sy
1a000864:	f3bf 8f4f 	dsb	sy
1a000868:	e7fe      	b.n	1a000868 <vPortFree+0x24>
1a00086a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00086e:	f383 8811 	msr	BASEPRI, r3
1a000872:	f3bf 8f6f 	isb	sy
1a000876:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a00087a:	e7fe      	b.n	1a00087a <vPortFree+0x36>
1a00087c:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a00087e:	ea23 0302 	bic.w	r3, r3, r2
{
1a000882:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000884:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
1a000888:	4604      	mov	r4, r0
1a00088a:	f000 fb89 	bl	1a000fa0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a00088e:	4a08      	ldr	r2, [pc, #32]	; (1a0008b0 <vPortFree+0x6c>)
1a000890:	f854 3c04 	ldr.w	r3, [r4, #-4]
1a000894:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000896:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
1a00089a:	440b      	add	r3, r1
1a00089c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a00089e:	f7ff ff15 	bl	1a0006cc <prvInsertBlockIntoFreeList>
}
1a0008a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
1a0008a6:	f000 bc31 	b.w	1a00110c <xTaskResumeAll>
1a0008aa:	bf00      	nop
1a0008ac:	100029ec 	.word	0x100029ec
1a0008b0:	100029f0 	.word	0x100029f0

1a0008b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0008b4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0008b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0008bc:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0008be:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0008c0:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0008c2:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0008c4:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0008c8:	4770      	bx	lr
1a0008ca:	bf00      	nop

1a0008cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0008cc:	2300      	movs	r3, #0
1a0008ce:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0008d0:	4770      	bx	lr
1a0008d2:	bf00      	nop

1a0008d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0008d4:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
1a0008d6:	6802      	ldr	r2, [r0, #0]
{
1a0008d8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0008da:	689c      	ldr	r4, [r3, #8]
1a0008dc:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0008de:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
1a0008e0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
1a0008e2:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0008e4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0008e6:	6099      	str	r1, [r3, #8]
}
1a0008e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0008ec:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
1a0008ee:	6002      	str	r2, [r0, #0]
}
1a0008f0:	4770      	bx	lr
1a0008f2:	bf00      	nop

1a0008f4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0008f4:	6903      	ldr	r3, [r0, #16]
{
1a0008f6:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0008f8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0008fc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0008fe:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
1a000900:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000902:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000904:	bf08      	it	eq
1a000906:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
1a000908:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
1a00090a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pvContainer = NULL;
1a00090e:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
1a000910:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
1a000912:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000914:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
1a000916:	6818      	ldr	r0, [r3, #0]
}
1a000918:	4770      	bx	lr
1a00091a:	bf00      	nop

1a00091c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
1a00091c:	b580      	push	{r7, lr}
1a00091e:	4c16      	ldr	r4, [pc, #88]	; (1a000978 <prvIdleTask+0x5c>)
1a000920:	4f16      	ldr	r7, [pc, #88]	; (1a00097c <prvIdleTask+0x60>)
1a000922:	4e17      	ldr	r6, [pc, #92]	; (1a000980 <prvIdleTask+0x64>)
1a000924:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1a000984 <prvIdleTask+0x68>
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
1a000928:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1a000988 <prvIdleTask+0x6c>
1a00092c:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
1a000930:	e014      	b.n	1a00095c <prvIdleTask+0x40>

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
1a000932:	f000 fcef 	bl	1a001314 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a000936:	68fb      	ldr	r3, [r7, #12]
1a000938:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00093a:	1d28      	adds	r0, r5, #4
1a00093c:	f7ff ffda 	bl	1a0008f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a000940:	6833      	ldr	r3, [r6, #0]
1a000942:	3b01      	subs	r3, #1
1a000944:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
1a000946:	6823      	ldr	r3, [r4, #0]
1a000948:	3b01      	subs	r3, #1
1a00094a:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
1a00094c:	f000 fd04 	bl	1a001358 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
1a000950:	6b28      	ldr	r0, [r5, #48]	; 0x30
1a000952:	f7ff ff77 	bl	1a000844 <vPortFree>
			vPortFree( pxTCB );
1a000956:	4628      	mov	r0, r5
1a000958:	f7ff ff74 	bl	1a000844 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00095c:	6823      	ldr	r3, [r4, #0]
1a00095e:	2b00      	cmp	r3, #0
1a000960:	d1e7      	bne.n	1a000932 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a000962:	f8d8 3000 	ldr.w	r3, [r8]
1a000966:	2b01      	cmp	r3, #1
1a000968:	d9f8      	bls.n	1a00095c <prvIdleTask+0x40>
				taskYIELD();
1a00096a:	f8ca 9000 	str.w	r9, [sl]
1a00096e:	f3bf 8f4f 	dsb	sy
1a000972:	f3bf 8f6f 	isb	sy
1a000976:	e7f1      	b.n	1a00095c <prvIdleTask+0x40>
1a000978:	10002a9c 	.word	0x10002a9c
1a00097c:	10002b10 	.word	0x10002b10
1a000980:	10002a98 	.word	0x10002a98
1a000984:	10002a0c 	.word	0x10002a0c
1a000988:	e000ed04 	.word	0xe000ed04

1a00098c <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
1a00098c:	b168      	cbz	r0, 1a0009aa <prvTaskIsTaskSuspended+0x1e>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1a00098e:	4b0b      	ldr	r3, [pc, #44]	; (1a0009bc <prvTaskIsTaskSuspended+0x30>)
1a000990:	6942      	ldr	r2, [r0, #20]
1a000992:	429a      	cmp	r2, r3
1a000994:	d001      	beq.n	1a00099a <prvTaskIsTaskSuspended+0xe>
	BaseType_t xReturn = pdFALSE;
1a000996:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1a000998:	4770      	bx	lr
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1a00099a:	6a80      	ldr	r0, [r0, #40]	; 0x28
1a00099c:	4b08      	ldr	r3, [pc, #32]	; (1a0009c0 <prvTaskIsTaskSuspended+0x34>)
1a00099e:	4298      	cmp	r0, r3
1a0009a0:	d0f9      	beq.n	1a000996 <prvTaskIsTaskSuspended+0xa>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
1a0009a2:	fab0 f080 	clz	r0, r0
1a0009a6:	0940      	lsrs	r0, r0, #5
1a0009a8:	4770      	bx	lr
1a0009aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009ae:	f383 8811 	msr	BASEPRI, r3
1a0009b2:	f3bf 8f6f 	isb	sy
1a0009b6:	f3bf 8f4f 	dsb	sy
		configASSERT( xTask );
1a0009ba:	e7fe      	b.n	1a0009ba <prvTaskIsTaskSuspended+0x2e>
1a0009bc:	10002afc 	.word	0x10002afc
1a0009c0:	10002ae4 	.word	0x10002ae4

1a0009c4 <prvResetNextTaskUnblockTime.part.1>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0009c4:	4a03      	ldr	r2, [pc, #12]	; (1a0009d4 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0009c6:	4b04      	ldr	r3, [pc, #16]	; (1a0009d8 <prvResetNextTaskUnblockTime.part.1+0x14>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0009c8:	6812      	ldr	r2, [r2, #0]
1a0009ca:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0009cc:	68d2      	ldr	r2, [r2, #12]
1a0009ce:	6852      	ldr	r2, [r2, #4]
1a0009d0:	601a      	str	r2, [r3, #0]
	}
}
1a0009d2:	4770      	bx	lr
1a0009d4:	10002a04 	.word	0x10002a04
1a0009d8:	10002adc 	.word	0x10002adc

1a0009dc <vTaskSwitchContext.part.4>:
		xYieldPending = pdFALSE;
1a0009dc:	4b1f      	ldr	r3, [pc, #124]	; (1a000a5c <vTaskSwitchContext.part.4+0x80>)
void vTaskSwitchContext( void )
1a0009de:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0009e0:	2200      	movs	r2, #0
		taskCHECK_FOR_STACK_OVERFLOW();
1a0009e2:	4c1f      	ldr	r4, [pc, #124]	; (1a000a60 <vTaskSwitchContext.part.4+0x84>)
		xYieldPending = pdFALSE;
1a0009e4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0009e6:	6823      	ldr	r3, [r4, #0]
1a0009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0009ea:	681a      	ldr	r2, [r3, #0]
1a0009ec:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0009f0:	d103      	bne.n	1a0009fa <vTaskSwitchContext.part.4+0x1e>
1a0009f2:	685a      	ldr	r2, [r3, #4]
1a0009f4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0009f8:	d027      	beq.n	1a000a4a <vTaskSwitchContext.part.4+0x6e>
1a0009fa:	6820      	ldr	r0, [r4, #0]
1a0009fc:	6821      	ldr	r1, [r4, #0]
1a0009fe:	3134      	adds	r1, #52	; 0x34
1a000a00:	f7ff fd7c 	bl	1a0004fc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a000a04:	4b17      	ldr	r3, [pc, #92]	; (1a000a64 <vTaskSwitchContext.part.4+0x88>)
1a000a06:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a000a08:	fab3 f383 	clz	r3, r3
1a000a0c:	b2db      	uxtb	r3, r3
1a000a0e:	f1c3 031f 	rsb	r3, r3, #31
1a000a12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000a16:	009b      	lsls	r3, r3, #2
1a000a18:	4913      	ldr	r1, [pc, #76]	; (1a000a68 <vTaskSwitchContext.part.4+0x8c>)
1a000a1a:	58ca      	ldr	r2, [r1, r3]
1a000a1c:	18c8      	adds	r0, r1, r3
1a000a1e:	b942      	cbnz	r2, 1a000a32 <vTaskSwitchContext.part.4+0x56>
	__asm volatile
1a000a20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a24:	f383 8811 	msr	BASEPRI, r3
1a000a28:	f3bf 8f6f 	isb	sy
1a000a2c:	f3bf 8f4f 	dsb	sy
1a000a30:	e7fe      	b.n	1a000a30 <vTaskSwitchContext.part.4+0x54>
1a000a32:	6842      	ldr	r2, [r0, #4]
1a000a34:	3308      	adds	r3, #8
1a000a36:	6852      	ldr	r2, [r2, #4]
1a000a38:	6042      	str	r2, [r0, #4]
1a000a3a:	440b      	add	r3, r1
1a000a3c:	429a      	cmp	r2, r3
1a000a3e:	bf04      	itt	eq
1a000a40:	6852      	ldreq	r2, [r2, #4]
1a000a42:	6042      	streq	r2, [r0, #4]
1a000a44:	68d3      	ldr	r3, [r2, #12]
1a000a46:	6023      	str	r3, [r4, #0]
}
1a000a48:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
1a000a4a:	689a      	ldr	r2, [r3, #8]
1a000a4c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a000a50:	d1d3      	bne.n	1a0009fa <vTaskSwitchContext.part.4+0x1e>
1a000a52:	68db      	ldr	r3, [r3, #12]
1a000a54:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a000a58:	d1cf      	bne.n	1a0009fa <vTaskSwitchContext.part.4+0x1e>
1a000a5a:	e7d3      	b.n	1a000a04 <vTaskSwitchContext.part.4+0x28>
1a000a5c:	10002b28 	.word	0x10002b28
1a000a60:	10002a00 	.word	0x10002a00
1a000a64:	10002aac 	.word	0x10002aac
1a000a68:	10002a0c 	.word	0x10002a0c

1a000a6c <xTaskCreate>:
	{
1a000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000a70:	0095      	lsls	r5, r2, #2
	{
1a000a72:	4607      	mov	r7, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000a74:	4628      	mov	r0, r5
	{
1a000a76:	460e      	mov	r6, r1
1a000a78:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000a7a:	f7ff fe55 	bl	1a000728 <pvPortMalloc>
			if( pxStack != NULL )
1a000a7e:	2800      	cmp	r0, #0
1a000a80:	f000 8087 	beq.w	1a000b92 <xTaskCreate+0x126>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a000a84:	4681      	mov	r9, r0
1a000a86:	2050      	movs	r0, #80	; 0x50
1a000a88:	f7ff fe4e 	bl	1a000728 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a000a8c:	4604      	mov	r4, r0
1a000a8e:	2800      	cmp	r0, #0
1a000a90:	f000 8083 	beq.w	1a000b9a <xTaskCreate+0x12e>
					pxNewTCB->pxStack = pxStack;
1a000a94:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000a98:	462a      	mov	r2, r5
1a000a9a:	21a5      	movs	r1, #165	; 0xa5
1a000a9c:	4648      	mov	r0, r9
1a000a9e:	f002 ffff 	bl	1a003aa0 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000aa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000aa4:	3d04      	subs	r5, #4
1a000aa6:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000aa8:	f025 0507 	bic.w	r5, r5, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000aac:	1e73      	subs	r3, r6, #1
1a000aae:	6465      	str	r5, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000ab0:	360f      	adds	r6, #15
1a000ab2:	f104 0133 	add.w	r1, r4, #51	; 0x33
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000ab6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
1a000aba:	f801 2f01 	strb.w	r2, [r1, #1]!
		if( pcName[ x ] == 0x00 )
1a000abe:	b10a      	cbz	r2, 1a000ac4 <xTaskCreate+0x58>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000ac0:	42b3      	cmp	r3, r6
1a000ac2:	d1f8      	bne.n	1a000ab6 <xTaskCreate+0x4a>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000ac4:	9e08      	ldr	r6, [sp, #32]
1a000ac6:	2e06      	cmp	r6, #6
1a000ac8:	bf28      	it	cs
1a000aca:	2606      	movcs	r6, #6
1a000acc:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000ad0:	f104 0904 	add.w	r9, r4, #4
	pxNewTCB->uxPriority = uxPriority;
1a000ad4:	62e6      	str	r6, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000ad6:	4648      	mov	r0, r9
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000ad8:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000adc:	f7ff fef6 	bl	1a0008cc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000ae0:	f1c6 0607 	rsb	r6, r6, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a000ae4:	f104 0018 	add.w	r0, r4, #24
1a000ae8:	f7ff fef0 	bl	1a0008cc <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
1a000aec:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000af0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a000af2:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a000af4:	f884 a04c 	strb.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a000af8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a000afa:	4642      	mov	r2, r8
1a000afc:	4639      	mov	r1, r7
1a000afe:	4628      	mov	r0, r5
1a000b00:	f000 fbda 	bl	1a0012b8 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
1a000b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a000b06:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a000b08:	b103      	cbz	r3, 1a000b0c <xTaskCreate+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a000b0a:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
1a000b0c:	f000 fc02 	bl	1a001314 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a000b10:	4a40      	ldr	r2, [pc, #256]	; (1a000c14 <xTaskCreate+0x1a8>)
		if( pxCurrentTCB == NULL )
1a000b12:	4f41      	ldr	r7, [pc, #260]	; (1a000c18 <xTaskCreate+0x1ac>)
		uxCurrentNumberOfTasks++;
1a000b14:	6813      	ldr	r3, [r2, #0]
1a000b16:	3301      	adds	r3, #1
1a000b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a000b1a:	683b      	ldr	r3, [r7, #0]
1a000b1c:	2b00      	cmp	r3, #0
1a000b1e:	d042      	beq.n	1a000ba6 <xTaskCreate+0x13a>
			if( xSchedulerRunning == pdFALSE )
1a000b20:	f8df 8138 	ldr.w	r8, [pc, #312]	; 1a000c5c <xTaskCreate+0x1f0>
1a000b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000b26:	f8d8 2000 	ldr.w	r2, [r8]
1a000b2a:	b922      	cbnz	r2, 1a000b36 <xTaskCreate+0xca>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a000b2c:	683a      	ldr	r2, [r7, #0]
1a000b2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a000b30:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
1a000b32:	bf98      	it	ls
1a000b34:	603c      	strls	r4, [r7, #0]
		uxTaskNumber++;
1a000b36:	4a39      	ldr	r2, [pc, #228]	; (1a000c1c <xTaskCreate+0x1b0>)
		prvAddTaskToReadyList( pxNewTCB );
1a000b38:	f8df c124 	ldr.w	ip, [pc, #292]	; 1a000c60 <xTaskCreate+0x1f4>
		uxTaskNumber++;
1a000b3c:	6816      	ldr	r6, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
1a000b3e:	f8dc e000 	ldr.w	lr, [ip]
1a000b42:	4837      	ldr	r0, [pc, #220]	; (1a000c20 <xTaskCreate+0x1b4>)
1a000b44:	2501      	movs	r5, #1
		uxTaskNumber++;
1a000b46:	442e      	add	r6, r5
1a000b48:	6016      	str	r6, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
1a000b4a:	fa05 f203 	lsl.w	r2, r5, r3
1a000b4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000b52:	ea42 020e 	orr.w	r2, r2, lr
1a000b56:	eb00 0083 	add.w	r0, r0, r3, lsl #2
1a000b5a:	4649      	mov	r1, r9
1a000b5c:	f8cc 2000 	str.w	r2, [ip]
1a000b60:	f7ff feb8 	bl	1a0008d4 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a000b64:	f000 fbf8 	bl	1a001358 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a000b68:	f8d8 3000 	ldr.w	r3, [r8]
1a000b6c:	b173      	cbz	r3, 1a000b8c <xTaskCreate+0x120>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a000b6e:	683a      	ldr	r2, [r7, #0]
1a000b70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000b72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a000b74:	429a      	cmp	r2, r3
1a000b76:	d209      	bcs.n	1a000b8c <xTaskCreate+0x120>
			taskYIELD_IF_USING_PREEMPTION();
1a000b78:	4b2a      	ldr	r3, [pc, #168]	; (1a000c24 <xTaskCreate+0x1b8>)
1a000b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b7e:	601a      	str	r2, [r3, #0]
1a000b80:	f3bf 8f4f 	dsb	sy
1a000b84:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
1a000b88:	4628      	mov	r0, r5
1a000b8a:	e000      	b.n	1a000b8e <xTaskCreate+0x122>
1a000b8c:	4628      	mov	r0, r5
	}
1a000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a000b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
1a000b9a:	4648      	mov	r0, r9
1a000b9c:	f7ff fe52 	bl	1a000844 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ba4:	e7f3      	b.n	1a000b8e <xTaskCreate+0x122>
			pxCurrentTCB = pxNewTCB;
1a000ba6:	603c      	str	r4, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a000ba8:	6813      	ldr	r3, [r2, #0]
1a000baa:	2b01      	cmp	r3, #1
1a000bac:	d003      	beq.n	1a000bb6 <xTaskCreate+0x14a>
1a000bae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000bb0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1a000c5c <xTaskCreate+0x1f0>
1a000bb4:	e7bf      	b.n	1a000b36 <xTaskCreate+0xca>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000bb6:	481a      	ldr	r0, [pc, #104]	; (1a000c20 <xTaskCreate+0x1b4>)
	vListInitialise( &xDelayedTaskList1 );
1a000bb8:	4e1b      	ldr	r6, [pc, #108]	; (1a000c28 <xTaskCreate+0x1bc>)
	vListInitialise( &xDelayedTaskList2 );
1a000bba:	4d1c      	ldr	r5, [pc, #112]	; (1a000c2c <xTaskCreate+0x1c0>)
1a000bbc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1a000c5c <xTaskCreate+0x1f0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000bc0:	f7ff fe78 	bl	1a0008b4 <vListInitialise>
1a000bc4:	481a      	ldr	r0, [pc, #104]	; (1a000c30 <xTaskCreate+0x1c4>)
1a000bc6:	f7ff fe75 	bl	1a0008b4 <vListInitialise>
1a000bca:	481a      	ldr	r0, [pc, #104]	; (1a000c34 <xTaskCreate+0x1c8>)
1a000bcc:	f7ff fe72 	bl	1a0008b4 <vListInitialise>
1a000bd0:	4819      	ldr	r0, [pc, #100]	; (1a000c38 <xTaskCreate+0x1cc>)
1a000bd2:	f7ff fe6f 	bl	1a0008b4 <vListInitialise>
1a000bd6:	4819      	ldr	r0, [pc, #100]	; (1a000c3c <xTaskCreate+0x1d0>)
1a000bd8:	f7ff fe6c 	bl	1a0008b4 <vListInitialise>
1a000bdc:	4818      	ldr	r0, [pc, #96]	; (1a000c40 <xTaskCreate+0x1d4>)
1a000bde:	f7ff fe69 	bl	1a0008b4 <vListInitialise>
1a000be2:	4818      	ldr	r0, [pc, #96]	; (1a000c44 <xTaskCreate+0x1d8>)
1a000be4:	f7ff fe66 	bl	1a0008b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
1a000be8:	4630      	mov	r0, r6
1a000bea:	f7ff fe63 	bl	1a0008b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a000bee:	4628      	mov	r0, r5
1a000bf0:	f7ff fe60 	bl	1a0008b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a000bf4:	4814      	ldr	r0, [pc, #80]	; (1a000c48 <xTaskCreate+0x1dc>)
1a000bf6:	f7ff fe5d 	bl	1a0008b4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a000bfa:	4814      	ldr	r0, [pc, #80]	; (1a000c4c <xTaskCreate+0x1e0>)
1a000bfc:	f7ff fe5a 	bl	1a0008b4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a000c00:	4813      	ldr	r0, [pc, #76]	; (1a000c50 <xTaskCreate+0x1e4>)
1a000c02:	f7ff fe57 	bl	1a0008b4 <vListInitialise>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a000c06:	4b13      	ldr	r3, [pc, #76]	; (1a000c54 <xTaskCreate+0x1e8>)
	pxDelayedTaskList = &xDelayedTaskList1;
1a000c08:	4a13      	ldr	r2, [pc, #76]	; (1a000c58 <xTaskCreate+0x1ec>)
1a000c0a:	6016      	str	r6, [r2, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a000c0c:	601d      	str	r5, [r3, #0]
1a000c0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000c10:	e791      	b.n	1a000b36 <xTaskCreate+0xca>
1a000c12:	bf00      	nop
1a000c14:	10002a98 	.word	0x10002a98
1a000c18:	10002a00 	.word	0x10002a00
1a000c1c:	10002aa8 	.word	0x10002aa8
1a000c20:	10002a0c 	.word	0x10002a0c
1a000c24:	e000ed04 	.word	0xe000ed04
1a000c28:	10002ab0 	.word	0x10002ab0
1a000c2c:	10002ac4 	.word	0x10002ac4
1a000c30:	10002a20 	.word	0x10002a20
1a000c34:	10002a34 	.word	0x10002a34
1a000c38:	10002a48 	.word	0x10002a48
1a000c3c:	10002a5c 	.word	0x10002a5c
1a000c40:	10002a70 	.word	0x10002a70
1a000c44:	10002a84 	.word	0x10002a84
1a000c48:	10002ae4 	.word	0x10002ae4
1a000c4c:	10002b10 	.word	0x10002b10
1a000c50:	10002afc 	.word	0x10002afc
1a000c54:	10002a08 	.word	0x10002a08
1a000c58:	10002a04 	.word	0x10002a04
1a000c5c:	10002af8 	.word	0x10002af8
1a000c60:	10002aac 	.word	0x10002aac

1a000c64 <vTaskDelete>:
	{
1a000c64:	b570      	push	{r4, r5, r6, lr}
1a000c66:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1a000c68:	4d32      	ldr	r5, [pc, #200]	; (1a000d34 <vTaskDelete+0xd0>)
		taskENTER_CRITICAL();
1a000c6a:	f000 fb53 	bl	1a001314 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1a000c6e:	2c00      	cmp	r4, #0
1a000c70:	d048      	beq.n	1a000d04 <vTaskDelete+0xa0>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a000c72:	1d26      	adds	r6, r4, #4
1a000c74:	4630      	mov	r0, r6
1a000c76:	f7ff fe3d 	bl	1a0008f4 <uxListRemove>
1a000c7a:	b930      	cbnz	r0, 1a000c8a <vTaskDelete+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a000c7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1a000c7e:	4a2e      	ldr	r2, [pc, #184]	; (1a000d38 <vTaskDelete+0xd4>)
1a000c80:	eb01 0381 	add.w	r3, r1, r1, lsl #2
1a000c84:	009b      	lsls	r3, r3, #2
1a000c86:	58d3      	ldr	r3, [r2, r3]
1a000c88:	b35b      	cbz	r3, 1a000ce2 <vTaskDelete+0x7e>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a000c8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a000c8c:	b11b      	cbz	r3, 1a000c96 <vTaskDelete+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a000c8e:	f104 0018 	add.w	r0, r4, #24
1a000c92:	f7ff fe2f 	bl	1a0008f4 <uxListRemove>
			uxTaskNumber++;
1a000c96:	4a29      	ldr	r2, [pc, #164]	; (1a000d3c <vTaskDelete+0xd8>)
			if( pxTCB == pxCurrentTCB )
1a000c98:	6829      	ldr	r1, [r5, #0]
			uxTaskNumber++;
1a000c9a:	6813      	ldr	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
1a000c9c:	42a1      	cmp	r1, r4
			uxTaskNumber++;
1a000c9e:	f103 0301 	add.w	r3, r3, #1
1a000ca2:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
1a000ca4:	d025      	beq.n	1a000cf2 <vTaskDelete+0x8e>
				--uxCurrentNumberOfTasks;
1a000ca6:	4a26      	ldr	r2, [pc, #152]	; (1a000d40 <vTaskDelete+0xdc>)
			vPortFree( pxTCB->pxStack );
1a000ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
				--uxCurrentNumberOfTasks;
1a000caa:	6813      	ldr	r3, [r2, #0]
1a000cac:	3b01      	subs	r3, #1
1a000cae:	6013      	str	r3, [r2, #0]
			vPortFree( pxTCB->pxStack );
1a000cb0:	f7ff fdc8 	bl	1a000844 <vPortFree>
			vPortFree( pxTCB );
1a000cb4:	4620      	mov	r0, r4
1a000cb6:	f7ff fdc5 	bl	1a000844 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000cba:	4b22      	ldr	r3, [pc, #136]	; (1a000d44 <vTaskDelete+0xe0>)
1a000cbc:	681b      	ldr	r3, [r3, #0]
1a000cbe:	681b      	ldr	r3, [r3, #0]
1a000cc0:	b153      	cbz	r3, 1a000cd8 <vTaskDelete+0x74>
1a000cc2:	f7ff fe7f 	bl	1a0009c4 <prvResetNextTaskUnblockTime.part.1>
		taskEXIT_CRITICAL();
1a000cc6:	f000 fb47 	bl	1a001358 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
1a000cca:	4b1f      	ldr	r3, [pc, #124]	; (1a000d48 <vTaskDelete+0xe4>)
1a000ccc:	681b      	ldr	r3, [r3, #0]
1a000cce:	b113      	cbz	r3, 1a000cd6 <vTaskDelete+0x72>
			if( pxTCB == pxCurrentTCB )
1a000cd0:	682b      	ldr	r3, [r5, #0]
1a000cd2:	42a3      	cmp	r3, r4
1a000cd4:	d018      	beq.n	1a000d08 <vTaskDelete+0xa4>
	}
1a000cd6:	bd70      	pop	{r4, r5, r6, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
1a000cd8:	4b1c      	ldr	r3, [pc, #112]	; (1a000d4c <vTaskDelete+0xe8>)
1a000cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000cde:	601a      	str	r2, [r3, #0]
1a000ce0:	e7f1      	b.n	1a000cc6 <vTaskDelete+0x62>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a000ce2:	481b      	ldr	r0, [pc, #108]	; (1a000d50 <vTaskDelete+0xec>)
1a000ce4:	2201      	movs	r2, #1
1a000ce6:	6803      	ldr	r3, [r0, #0]
1a000ce8:	408a      	lsls	r2, r1
1a000cea:	ea23 0302 	bic.w	r3, r3, r2
1a000cee:	6003      	str	r3, [r0, #0]
1a000cf0:	e7cb      	b.n	1a000c8a <vTaskDelete+0x26>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1a000cf2:	4631      	mov	r1, r6
1a000cf4:	4817      	ldr	r0, [pc, #92]	; (1a000d54 <vTaskDelete+0xf0>)
1a000cf6:	f7ff fded 	bl	1a0008d4 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
1a000cfa:	4a17      	ldr	r2, [pc, #92]	; (1a000d58 <vTaskDelete+0xf4>)
1a000cfc:	6813      	ldr	r3, [r2, #0]
1a000cfe:	3301      	adds	r3, #1
1a000d00:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1a000d02:	e7e0      	b.n	1a000cc6 <vTaskDelete+0x62>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1a000d04:	682c      	ldr	r4, [r5, #0]
1a000d06:	e7b4      	b.n	1a000c72 <vTaskDelete+0xe>
				configASSERT( uxSchedulerSuspended == 0 );
1a000d08:	4b14      	ldr	r3, [pc, #80]	; (1a000d5c <vTaskDelete+0xf8>)
1a000d0a:	681b      	ldr	r3, [r3, #0]
1a000d0c:	b143      	cbz	r3, 1a000d20 <vTaskDelete+0xbc>
1a000d0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d12:	f383 8811 	msr	BASEPRI, r3
1a000d16:	f3bf 8f6f 	isb	sy
1a000d1a:	f3bf 8f4f 	dsb	sy
1a000d1e:	e7fe      	b.n	1a000d1e <vTaskDelete+0xba>
				portYIELD_WITHIN_API();
1a000d20:	4b0f      	ldr	r3, [pc, #60]	; (1a000d60 <vTaskDelete+0xfc>)
1a000d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d26:	601a      	str	r2, [r3, #0]
1a000d28:	f3bf 8f4f 	dsb	sy
1a000d2c:	f3bf 8f6f 	isb	sy
	}
1a000d30:	bd70      	pop	{r4, r5, r6, pc}
1a000d32:	bf00      	nop
1a000d34:	10002a00 	.word	0x10002a00
1a000d38:	10002a0c 	.word	0x10002a0c
1a000d3c:	10002aa8 	.word	0x10002aa8
1a000d40:	10002a98 	.word	0x10002a98
1a000d44:	10002a04 	.word	0x10002a04
1a000d48:	10002af8 	.word	0x10002af8
1a000d4c:	10002adc 	.word	0x10002adc
1a000d50:	10002aac 	.word	0x10002aac
1a000d54:	10002b10 	.word	0x10002b10
1a000d58:	10002a9c 	.word	0x10002a9c
1a000d5c:	10002aa4 	.word	0x10002aa4
1a000d60:	e000ed04 	.word	0xe000ed04

1a000d64 <uxTaskPriorityGet>:
	{
1a000d64:	b510      	push	{r4, lr}
1a000d66:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
1a000d68:	f000 fad4 	bl	1a001314 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
1a000d6c:	b124      	cbz	r4, 1a000d78 <uxTaskPriorityGet+0x14>
			uxReturn = pxTCB->uxPriority;
1a000d6e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
1a000d70:	f000 faf2 	bl	1a001358 <vPortExitCritical>
	}
1a000d74:	4620      	mov	r0, r4
1a000d76:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
1a000d78:	4b03      	ldr	r3, [pc, #12]	; (1a000d88 <uxTaskPriorityGet+0x24>)
1a000d7a:	681c      	ldr	r4, [r3, #0]
			uxReturn = pxTCB->uxPriority;
1a000d7c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
1a000d7e:	f000 faeb 	bl	1a001358 <vPortExitCritical>
	}
1a000d82:	4620      	mov	r0, r4
1a000d84:	bd10      	pop	{r4, pc}
1a000d86:	bf00      	nop
1a000d88:	10002a00 	.word	0x10002a00

1a000d8c <vTaskSuspend>:
	{
1a000d8c:	b570      	push	{r4, r5, r6, lr}
1a000d8e:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1a000d90:	4d37      	ldr	r5, [pc, #220]	; (1a000e70 <vTaskSuspend+0xe4>)
		taskENTER_CRITICAL();
1a000d92:	f000 fabf 	bl	1a001314 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1a000d96:	2c00      	cmp	r4, #0
1a000d98:	d047      	beq.n	1a000e2a <vTaskSuspend+0x9e>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a000d9a:	1d26      	adds	r6, r4, #4
1a000d9c:	4630      	mov	r0, r6
1a000d9e:	f7ff fda9 	bl	1a0008f4 <uxListRemove>
1a000da2:	b930      	cbnz	r0, 1a000db2 <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a000da4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1a000da6:	4a33      	ldr	r2, [pc, #204]	; (1a000e74 <vTaskSuspend+0xe8>)
1a000da8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
1a000dac:	009b      	lsls	r3, r3, #2
1a000dae:	58d3      	ldr	r3, [r2, r3]
1a000db0:	b343      	cbz	r3, 1a000e04 <vTaskSuspend+0x78>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a000db2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a000db4:	b11b      	cbz	r3, 1a000dbe <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a000db6:	f104 0018 	add.w	r0, r4, #24
1a000dba:	f7ff fd9b 	bl	1a0008f4 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1a000dbe:	4631      	mov	r1, r6
1a000dc0:	482d      	ldr	r0, [pc, #180]	; (1a000e78 <vTaskSuspend+0xec>)
		if( xSchedulerRunning != pdFALSE )
1a000dc2:	4e2e      	ldr	r6, [pc, #184]	; (1a000e7c <vTaskSuspend+0xf0>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1a000dc4:	f7ff fd86 	bl	1a0008d4 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1a000dc8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
1a000dcc:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a000dce:	bf04      	itt	eq
1a000dd0:	2300      	moveq	r3, #0
1a000dd2:	f884 304c 	strbeq.w	r3, [r4, #76]	; 0x4c
		taskEXIT_CRITICAL();
1a000dd6:	f000 fabf 	bl	1a001358 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
1a000dda:	6833      	ldr	r3, [r6, #0]
1a000ddc:	b9d3      	cbnz	r3, 1a000e14 <vTaskSuspend+0x88>
		if( pxTCB == pxCurrentTCB )
1a000dde:	682b      	ldr	r3, [r5, #0]
1a000de0:	42a3      	cmp	r3, r4
1a000de2:	d000      	beq.n	1a000de6 <vTaskSuspend+0x5a>
	}
1a000de4:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
1a000de6:	6833      	ldr	r3, [r6, #0]
1a000de8:	b333      	cbz	r3, 1a000e38 <vTaskSuspend+0xac>
				configASSERT( uxSchedulerSuspended == 0 );
1a000dea:	4b25      	ldr	r3, [pc, #148]	; (1a000e80 <vTaskSuspend+0xf4>)
1a000dec:	681b      	ldr	r3, [r3, #0]
1a000dee:	2b00      	cmp	r3, #0
1a000df0:	d02f      	beq.n	1a000e52 <vTaskSuspend+0xc6>
1a000df2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000df6:	f383 8811 	msr	BASEPRI, r3
1a000dfa:	f3bf 8f6f 	isb	sy
1a000dfe:	f3bf 8f4f 	dsb	sy
1a000e02:	e7fe      	b.n	1a000e02 <vTaskSuspend+0x76>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a000e04:	481f      	ldr	r0, [pc, #124]	; (1a000e84 <vTaskSuspend+0xf8>)
1a000e06:	2201      	movs	r2, #1
1a000e08:	6803      	ldr	r3, [r0, #0]
1a000e0a:	408a      	lsls	r2, r1
1a000e0c:	ea23 0302 	bic.w	r3, r3, r2
1a000e10:	6003      	str	r3, [r0, #0]
1a000e12:	e7ce      	b.n	1a000db2 <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
1a000e14:	f000 fa7e 	bl	1a001314 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000e18:	4b1b      	ldr	r3, [pc, #108]	; (1a000e88 <vTaskSuspend+0xfc>)
1a000e1a:	681b      	ldr	r3, [r3, #0]
1a000e1c:	681b      	ldr	r3, [r3, #0]
1a000e1e:	b133      	cbz	r3, 1a000e2e <vTaskSuspend+0xa2>
1a000e20:	f7ff fdd0 	bl	1a0009c4 <prvResetNextTaskUnblockTime.part.1>
			taskEXIT_CRITICAL();
1a000e24:	f000 fa98 	bl	1a001358 <vPortExitCritical>
1a000e28:	e7d9      	b.n	1a000dde <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1a000e2a:	682c      	ldr	r4, [r5, #0]
1a000e2c:	e7b5      	b.n	1a000d9a <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
1a000e2e:	4b17      	ldr	r3, [pc, #92]	; (1a000e8c <vTaskSuspend+0x100>)
1a000e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000e34:	601a      	str	r2, [r3, #0]
1a000e36:	e7f5      	b.n	1a000e24 <vTaskSuspend+0x98>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1a000e38:	490f      	ldr	r1, [pc, #60]	; (1a000e78 <vTaskSuspend+0xec>)
1a000e3a:	4a15      	ldr	r2, [pc, #84]	; (1a000e90 <vTaskSuspend+0x104>)
1a000e3c:	6809      	ldr	r1, [r1, #0]
1a000e3e:	6812      	ldr	r2, [r2, #0]
1a000e40:	4291      	cmp	r1, r2
1a000e42:	d00f      	beq.n	1a000e64 <vTaskSuspend+0xd8>
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a000e44:	4b0e      	ldr	r3, [pc, #56]	; (1a000e80 <vTaskSuspend+0xf4>)
1a000e46:	681b      	ldr	r3, [r3, #0]
1a000e48:	b173      	cbz	r3, 1a000e68 <vTaskSuspend+0xdc>
		xYieldPending = pdTRUE;
1a000e4a:	4b12      	ldr	r3, [pc, #72]	; (1a000e94 <vTaskSuspend+0x108>)
1a000e4c:	2201      	movs	r2, #1
1a000e4e:	601a      	str	r2, [r3, #0]
	}
1a000e50:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
1a000e52:	4b11      	ldr	r3, [pc, #68]	; (1a000e98 <vTaskSuspend+0x10c>)
1a000e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e58:	601a      	str	r2, [r3, #0]
1a000e5a:	f3bf 8f4f 	dsb	sy
1a000e5e:	f3bf 8f6f 	isb	sy
	}
1a000e62:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB = NULL;
1a000e64:	602b      	str	r3, [r5, #0]
	}
1a000e66:	bd70      	pop	{r4, r5, r6, pc}
1a000e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
1a000e6c:	f7ff bdb6 	b.w	1a0009dc <vTaskSwitchContext.part.4>
1a000e70:	10002a00 	.word	0x10002a00
1a000e74:	10002a0c 	.word	0x10002a0c
1a000e78:	10002afc 	.word	0x10002afc
1a000e7c:	10002af8 	.word	0x10002af8
1a000e80:	10002aa4 	.word	0x10002aa4
1a000e84:	10002aac 	.word	0x10002aac
1a000e88:	10002a04 	.word	0x10002a04
1a000e8c:	10002adc 	.word	0x10002adc
1a000e90:	10002a98 	.word	0x10002a98
1a000e94:	10002b28 	.word	0x10002b28
1a000e98:	e000ed04 	.word	0xe000ed04

1a000e9c <vTaskResume>:
	{
1a000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
1a000e9e:	b178      	cbz	r0, 1a000ec0 <vTaskResume+0x24>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1a000ea0:	4d1d      	ldr	r5, [pc, #116]	; (1a000f18 <vTaskResume+0x7c>)
1a000ea2:	682b      	ldr	r3, [r5, #0]
1a000ea4:	4283      	cmp	r3, r0
1a000ea6:	d00a      	beq.n	1a000ebe <vTaskResume+0x22>
			taskENTER_CRITICAL();
1a000ea8:	4604      	mov	r4, r0
1a000eaa:	f000 fa33 	bl	1a001314 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1a000eae:	4620      	mov	r0, r4
1a000eb0:	f7ff fd6c 	bl	1a00098c <prvTaskIsTaskSuspended>
1a000eb4:	b968      	cbnz	r0, 1a000ed2 <vTaskResume+0x36>
	}
1a000eb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			taskEXIT_CRITICAL();
1a000eba:	f000 ba4d 	b.w	1a001358 <vPortExitCritical>
	}
1a000ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000ec0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ec4:	f383 8811 	msr	BASEPRI, r3
1a000ec8:	f3bf 8f6f 	isb	sy
1a000ecc:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
1a000ed0:	e7fe      	b.n	1a000ed0 <vTaskResume+0x34>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1a000ed2:	1d27      	adds	r7, r4, #4
					prvAddTaskToReadyList( pxTCB );
1a000ed4:	4e11      	ldr	r6, [pc, #68]	; (1a000f1c <vTaskResume+0x80>)
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1a000ed6:	4638      	mov	r0, r7
1a000ed8:	f7ff fd0c 	bl	1a0008f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a000edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a000ede:	f8d6 c000 	ldr.w	ip, [r6]
1a000ee2:	480f      	ldr	r0, [pc, #60]	; (1a000f20 <vTaskResume+0x84>)
1a000ee4:	2301      	movs	r3, #1
1a000ee6:	4093      	lsls	r3, r2
1a000ee8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000eec:	ea43 030c 	orr.w	r3, r3, ip
1a000ef0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
1a000ef4:	4639      	mov	r1, r7
1a000ef6:	6033      	str	r3, [r6, #0]
1a000ef8:	f7ff fcec 	bl	1a0008d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a000efc:	682b      	ldr	r3, [r5, #0]
1a000efe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a000f02:	429a      	cmp	r2, r3
1a000f04:	d3d7      	bcc.n	1a000eb6 <vTaskResume+0x1a>
						taskYIELD_IF_USING_PREEMPTION();
1a000f06:	4b07      	ldr	r3, [pc, #28]	; (1a000f24 <vTaskResume+0x88>)
1a000f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f0c:	601a      	str	r2, [r3, #0]
1a000f0e:	f3bf 8f4f 	dsb	sy
1a000f12:	f3bf 8f6f 	isb	sy
1a000f16:	e7ce      	b.n	1a000eb6 <vTaskResume+0x1a>
1a000f18:	10002a00 	.word	0x10002a00
1a000f1c:	10002aac 	.word	0x10002aac
1a000f20:	10002a0c 	.word	0x10002a0c
1a000f24:	e000ed04 	.word	0xe000ed04

1a000f28 <vTaskStartScheduler>:
{
1a000f28:	b530      	push	{r4, r5, lr}
1a000f2a:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
1a000f2c:	4b16      	ldr	r3, [pc, #88]	; (1a000f88 <vTaskStartScheduler+0x60>)
1a000f2e:	9301      	str	r3, [sp, #4]
1a000f30:	2400      	movs	r4, #0
1a000f32:	9400      	str	r4, [sp, #0]
1a000f34:	4623      	mov	r3, r4
1a000f36:	225a      	movs	r2, #90	; 0x5a
1a000f38:	4914      	ldr	r1, [pc, #80]	; (1a000f8c <vTaskStartScheduler+0x64>)
1a000f3a:	4815      	ldr	r0, [pc, #84]	; (1a000f90 <vTaskStartScheduler+0x68>)
1a000f3c:	f7ff fd96 	bl	1a000a6c <xTaskCreate>
	if( xReturn == pdPASS )
1a000f40:	2801      	cmp	r0, #1
1a000f42:	d003      	beq.n	1a000f4c <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a000f44:	3001      	adds	r0, #1
1a000f46:	d016      	beq.n	1a000f76 <vTaskStartScheduler+0x4e>
}
1a000f48:	b003      	add	sp, #12
1a000f4a:	bd30      	pop	{r4, r5, pc}
1a000f4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f50:	f383 8811 	msr	BASEPRI, r3
1a000f54:	f3bf 8f6f 	isb	sy
1a000f58:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a000f5c:	490d      	ldr	r1, [pc, #52]	; (1a000f94 <vTaskStartScheduler+0x6c>)
		xSchedulerRunning = pdTRUE;
1a000f5e:	4a0e      	ldr	r2, [pc, #56]	; (1a000f98 <vTaskStartScheduler+0x70>)
		xTickCount = ( TickType_t ) 0U;
1a000f60:	4b0e      	ldr	r3, [pc, #56]	; (1a000f9c <vTaskStartScheduler+0x74>)
		xNextTaskUnblockTime = portMAX_DELAY;
1a000f62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a000f66:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
1a000f68:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
1a000f6a:	601c      	str	r4, [r3, #0]
}
1a000f6c:	b003      	add	sp, #12
1a000f6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
1a000f72:	f000 ba6b 	b.w	1a00144c <xPortStartScheduler>
1a000f76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f7a:	f383 8811 	msr	BASEPRI, r3
1a000f7e:	f3bf 8f6f 	isb	sy
1a000f82:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a000f86:	e7fe      	b.n	1a000f86 <vTaskStartScheduler+0x5e>
1a000f88:	10002ad8 	.word	0x10002ad8
1a000f8c:	1a007d64 	.word	0x1a007d64
1a000f90:	1a00091d 	.word	0x1a00091d
1a000f94:	10002adc 	.word	0x10002adc
1a000f98:	10002af8 	.word	0x10002af8
1a000f9c:	10002b24 	.word	0x10002b24

1a000fa0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a000fa0:	4a02      	ldr	r2, [pc, #8]	; (1a000fac <vTaskSuspendAll+0xc>)
1a000fa2:	6813      	ldr	r3, [r2, #0]
1a000fa4:	3301      	adds	r3, #1
1a000fa6:	6013      	str	r3, [r2, #0]
}
1a000fa8:	4770      	bx	lr
1a000faa:	bf00      	nop
1a000fac:	10002aa4 	.word	0x10002aa4

1a000fb0 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a000fb0:	4b01      	ldr	r3, [pc, #4]	; (1a000fb8 <xTaskGetTickCount+0x8>)
1a000fb2:	6818      	ldr	r0, [r3, #0]
}
1a000fb4:	4770      	bx	lr
1a000fb6:	bf00      	nop
1a000fb8:	10002b24 	.word	0x10002b24

1a000fbc <xTaskIncrementTick>:
{
1a000fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a000fc0:	4b47      	ldr	r3, [pc, #284]	; (1a0010e0 <xTaskIncrementTick+0x124>)
1a000fc2:	681b      	ldr	r3, [r3, #0]
1a000fc4:	2b00      	cmp	r3, #0
1a000fc6:	d148      	bne.n	1a00105a <xTaskIncrementTick+0x9e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a000fc8:	4b46      	ldr	r3, [pc, #280]	; (1a0010e4 <xTaskIncrementTick+0x128>)
1a000fca:	681e      	ldr	r6, [r3, #0]
1a000fcc:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
1a000fce:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a000fd0:	2e00      	cmp	r6, #0
1a000fd2:	d04f      	beq.n	1a001074 <xTaskIncrementTick+0xb8>
1a000fd4:	f8df b12c 	ldr.w	fp, [pc, #300]	; 1a001104 <xTaskIncrementTick+0x148>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a000fd8:	f8db 2000 	ldr.w	r2, [fp]
1a000fdc:	42b2      	cmp	r2, r6
1a000fde:	d860      	bhi.n	1a0010a2 <xTaskIncrementTick+0xe6>
1a000fe0:	4d41      	ldr	r5, [pc, #260]	; (1a0010e8 <xTaskIncrementTick+0x12c>)
1a000fe2:	4f42      	ldr	r7, [pc, #264]	; (1a0010ec <xTaskIncrementTick+0x130>)
1a000fe4:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1a001108 <xTaskIncrementTick+0x14c>
BaseType_t xSwitchRequired = pdFALSE;
1a000fe8:	2400      	movs	r4, #0
1a000fea:	e02d      	b.n	1a001048 <xTaskIncrementTick+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000fec:	682a      	ldr	r2, [r5, #0]
1a000fee:	68d2      	ldr	r2, [r2, #12]
1a000ff0:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a000ff4:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000ff8:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
1a000ffc:	428e      	cmp	r6, r1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a000ffe:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
1a001000:	d367      	bcc.n	1a0010d2 <xTaskIncrementTick+0x116>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001002:	f7ff fc77 	bl	1a0008f4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001006:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00100a:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a00100e:	b109      	cbz	r1, 1a001014 <xTaskIncrementTick+0x58>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001010:	f7ff fc70 	bl	1a0008f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001014:	4a36      	ldr	r2, [pc, #216]	; (1a0010f0 <xTaskIncrementTick+0x134>)
1a001016:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
1a00101a:	6813      	ldr	r3, [r2, #0]
1a00101c:	2101      	movs	r1, #1
1a00101e:	fa01 fc00 	lsl.w	ip, r1, r0
1a001022:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001026:	4651      	mov	r1, sl
1a001028:	eb07 0080 	add.w	r0, r7, r0, lsl #2
1a00102c:	ea4c 0c03 	orr.w	ip, ip, r3
1a001030:	f8c2 c000 	str.w	ip, [r2]
1a001034:	f7ff fc4e 	bl	1a0008d4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001038:	f8d8 0000 	ldr.w	r0, [r8]
1a00103c:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
1a001040:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
1a001042:	4291      	cmp	r1, r2
1a001044:	bf28      	it	cs
1a001046:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001048:	682a      	ldr	r2, [r5, #0]
1a00104a:	6812      	ldr	r2, [r2, #0]
1a00104c:	2a00      	cmp	r2, #0
1a00104e:	d1cd      	bne.n	1a000fec <xTaskIncrementTick+0x30>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001054:	f8cb 2000 	str.w	r2, [fp]
					break;
1a001058:	e027      	b.n	1a0010aa <xTaskIncrementTick+0xee>
		++uxPendedTicks;
1a00105a:	4a26      	ldr	r2, [pc, #152]	; (1a0010f4 <xTaskIncrementTick+0x138>)
1a00105c:	6813      	ldr	r3, [r2, #0]
1a00105e:	3301      	adds	r3, #1
1a001060:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001062:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001064:	4b24      	ldr	r3, [pc, #144]	; (1a0010f8 <xTaskIncrementTick+0x13c>)
1a001066:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
1a001068:	2b00      	cmp	r3, #0
}
1a00106a:	bf0c      	ite	eq
1a00106c:	4620      	moveq	r0, r4
1a00106e:	2001      	movne	r0, #1
1a001070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
1a001074:	4d1c      	ldr	r5, [pc, #112]	; (1a0010e8 <xTaskIncrementTick+0x12c>)
1a001076:	682b      	ldr	r3, [r5, #0]
1a001078:	681b      	ldr	r3, [r3, #0]
1a00107a:	bb0b      	cbnz	r3, 1a0010c0 <xTaskIncrementTick+0x104>
1a00107c:	4b1f      	ldr	r3, [pc, #124]	; (1a0010fc <xTaskIncrementTick+0x140>)
1a00107e:	6829      	ldr	r1, [r5, #0]
1a001080:	4a1f      	ldr	r2, [pc, #124]	; (1a001100 <xTaskIncrementTick+0x144>)
1a001082:	6818      	ldr	r0, [r3, #0]
1a001084:	6028      	str	r0, [r5, #0]
1a001086:	6019      	str	r1, [r3, #0]
1a001088:	6813      	ldr	r3, [r2, #0]
1a00108a:	3301      	adds	r3, #1
1a00108c:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00108e:	682b      	ldr	r3, [r5, #0]
1a001090:	681b      	ldr	r3, [r3, #0]
1a001092:	bb0b      	cbnz	r3, 1a0010d8 <xTaskIncrementTick+0x11c>
		xNextTaskUnblockTime = portMAX_DELAY;
1a001094:	f8df b06c 	ldr.w	fp, [pc, #108]	; 1a001104 <xTaskIncrementTick+0x148>
1a001098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00109c:	f8cb 2000 	str.w	r2, [fp]
1a0010a0:	e79a      	b.n	1a000fd8 <xTaskIncrementTick+0x1c>
1a0010a2:	4f12      	ldr	r7, [pc, #72]	; (1a0010ec <xTaskIncrementTick+0x130>)
1a0010a4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1a001108 <xTaskIncrementTick+0x14c>
BaseType_t xSwitchRequired = pdFALSE;
1a0010a8:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0010aa:	f8d8 3000 	ldr.w	r3, [r8]
1a0010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0010b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0010b4:	009b      	lsls	r3, r3, #2
1a0010b6:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
1a0010b8:	2b02      	cmp	r3, #2
1a0010ba:	bf28      	it	cs
1a0010bc:	2401      	movcs	r4, #1
1a0010be:	e7d1      	b.n	1a001064 <xTaskIncrementTick+0xa8>
1a0010c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010c4:	f383 8811 	msr	BASEPRI, r3
1a0010c8:	f3bf 8f6f 	isb	sy
1a0010cc:	f3bf 8f4f 	dsb	sy
			taskSWITCH_DELAYED_LISTS();
1a0010d0:	e7fe      	b.n	1a0010d0 <xTaskIncrementTick+0x114>
						xNextTaskUnblockTime = xItemValue;
1a0010d2:	f8cb 1000 	str.w	r1, [fp]
						break;
1a0010d6:	e7e8      	b.n	1a0010aa <xTaskIncrementTick+0xee>
1a0010d8:	f7ff fc74 	bl	1a0009c4 <prvResetNextTaskUnblockTime.part.1>
1a0010dc:	e77a      	b.n	1a000fd4 <xTaskIncrementTick+0x18>
1a0010de:	bf00      	nop
1a0010e0:	10002aa4 	.word	0x10002aa4
1a0010e4:	10002b24 	.word	0x10002b24
1a0010e8:	10002a04 	.word	0x10002a04
1a0010ec:	10002a0c 	.word	0x10002a0c
1a0010f0:	10002aac 	.word	0x10002aac
1a0010f4:	10002aa0 	.word	0x10002aa0
1a0010f8:	10002b28 	.word	0x10002b28
1a0010fc:	10002a08 	.word	0x10002a08
1a001100:	10002ae0 	.word	0x10002ae0
1a001104:	10002adc 	.word	0x10002adc
1a001108:	10002a00 	.word	0x10002a00

1a00110c <xTaskResumeAll>:
{
1a00110c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
1a001110:	4c38      	ldr	r4, [pc, #224]	; (1a0011f4 <xTaskResumeAll+0xe8>)
1a001112:	6823      	ldr	r3, [r4, #0]
1a001114:	b943      	cbnz	r3, 1a001128 <xTaskResumeAll+0x1c>
1a001116:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00111a:	f383 8811 	msr	BASEPRI, r3
1a00111e:	f3bf 8f6f 	isb	sy
1a001122:	f3bf 8f4f 	dsb	sy
1a001126:	e7fe      	b.n	1a001126 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
1a001128:	f000 f8f4 	bl	1a001314 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00112c:	6823      	ldr	r3, [r4, #0]
1a00112e:	3b01      	subs	r3, #1
1a001130:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001132:	6824      	ldr	r4, [r4, #0]
1a001134:	2c00      	cmp	r4, #0
1a001136:	d14a      	bne.n	1a0011ce <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001138:	4b2f      	ldr	r3, [pc, #188]	; (1a0011f8 <xTaskResumeAll+0xec>)
1a00113a:	681b      	ldr	r3, [r3, #0]
1a00113c:	2b00      	cmp	r3, #0
1a00113e:	d046      	beq.n	1a0011ce <xTaskResumeAll+0xc2>
1a001140:	4d2e      	ldr	r5, [pc, #184]	; (1a0011fc <xTaskResumeAll+0xf0>)
1a001142:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1a001214 <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
1a001146:	4e2e      	ldr	r6, [pc, #184]	; (1a001200 <xTaskResumeAll+0xf4>)
1a001148:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1a001218 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00114c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1a00121c <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001150:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
1a001154:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001156:	b323      	cbz	r3, 1a0011a2 <xTaskResumeAll+0x96>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001158:	f8da 300c 	ldr.w	r3, [sl, #12]
1a00115c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00115e:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001162:	f104 0018 	add.w	r0, r4, #24
1a001166:	f7ff fbc5 	bl	1a0008f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00116a:	4640      	mov	r0, r8
1a00116c:	f7ff fbc2 	bl	1a0008f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001170:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a001172:	6832      	ldr	r2, [r6, #0]
1a001174:	fa07 f300 	lsl.w	r3, r7, r0
1a001178:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00117c:	4313      	orrs	r3, r2
1a00117e:	4641      	mov	r1, r8
1a001180:	eb09 0080 	add.w	r0, r9, r0, lsl #2
1a001184:	6033      	str	r3, [r6, #0]
1a001186:	f7ff fba5 	bl	1a0008d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00118a:	f8db 3000 	ldr.w	r3, [fp]
1a00118e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001192:	429a      	cmp	r2, r3
1a001194:	d3dc      	bcc.n	1a001150 <xTaskResumeAll+0x44>
						xYieldPending = pdTRUE;
1a001196:	602f      	str	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001198:	f8da 3000 	ldr.w	r3, [sl]
					prvAddTaskToReadyList( pxTCB );
1a00119c:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00119e:	2b00      	cmp	r3, #0
1a0011a0:	d1da      	bne.n	1a001158 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
1a0011a2:	b13c      	cbz	r4, 1a0011b4 <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0011a4:	4b17      	ldr	r3, [pc, #92]	; (1a001204 <xTaskResumeAll+0xf8>)
1a0011a6:	681b      	ldr	r3, [r3, #0]
1a0011a8:	681b      	ldr	r3, [r3, #0]
1a0011aa:	bb03      	cbnz	r3, 1a0011ee <xTaskResumeAll+0xe2>
		xNextTaskUnblockTime = portMAX_DELAY;
1a0011ac:	4b16      	ldr	r3, [pc, #88]	; (1a001208 <xTaskResumeAll+0xfc>)
1a0011ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0011b2:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0011b4:	4e15      	ldr	r6, [pc, #84]	; (1a00120c <xTaskResumeAll+0x100>)
1a0011b6:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0011b8:	b13c      	cbz	r4, 1a0011ca <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
1a0011ba:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
1a0011bc:	f7ff fefe 	bl	1a000fbc <xTaskIncrementTick>
1a0011c0:	b100      	cbz	r0, 1a0011c4 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
1a0011c2:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0011c4:	3c01      	subs	r4, #1
1a0011c6:	d1f9      	bne.n	1a0011bc <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
1a0011c8:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
1a0011ca:	682b      	ldr	r3, [r5, #0]
1a0011cc:	b92b      	cbnz	r3, 1a0011da <xTaskResumeAll+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
1a0011ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0011d0:	f000 f8c2 	bl	1a001358 <vPortExitCritical>
}
1a0011d4:	4620      	mov	r0, r4
1a0011d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					taskYIELD_IF_USING_PREEMPTION();
1a0011da:	4b0d      	ldr	r3, [pc, #52]	; (1a001210 <xTaskResumeAll+0x104>)
1a0011dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011e0:	601a      	str	r2, [r3, #0]
1a0011e2:	f3bf 8f4f 	dsb	sy
1a0011e6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0011ea:	2401      	movs	r4, #1
1a0011ec:	e7f0      	b.n	1a0011d0 <xTaskResumeAll+0xc4>
1a0011ee:	f7ff fbe9 	bl	1a0009c4 <prvResetNextTaskUnblockTime.part.1>
1a0011f2:	e7df      	b.n	1a0011b4 <xTaskResumeAll+0xa8>
1a0011f4:	10002aa4 	.word	0x10002aa4
1a0011f8:	10002a98 	.word	0x10002a98
1a0011fc:	10002b28 	.word	0x10002b28
1a001200:	10002aac 	.word	0x10002aac
1a001204:	10002a04 	.word	0x10002a04
1a001208:	10002adc 	.word	0x10002adc
1a00120c:	10002aa0 	.word	0x10002aa0
1a001210:	e000ed04 	.word	0xe000ed04
1a001214:	10002ae4 	.word	0x10002ae4
1a001218:	10002a0c 	.word	0x10002a0c
1a00121c:	10002a00 	.word	0x10002a00

1a001220 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001220:	4b04      	ldr	r3, [pc, #16]	; (1a001234 <vTaskSwitchContext+0x14>)
1a001222:	681b      	ldr	r3, [r3, #0]
1a001224:	b11b      	cbz	r3, 1a00122e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001226:	4b04      	ldr	r3, [pc, #16]	; (1a001238 <vTaskSwitchContext+0x18>)
1a001228:	2201      	movs	r2, #1
1a00122a:	601a      	str	r2, [r3, #0]
}
1a00122c:	4770      	bx	lr
1a00122e:	f7ff bbd5 	b.w	1a0009dc <vTaskSwitchContext.part.4>
1a001232:	bf00      	nop
1a001234:	10002aa4 	.word	0x10002aa4
1a001238:	10002b28 	.word	0x10002b28

1a00123c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a00123c:	4808      	ldr	r0, [pc, #32]	; (1a001260 <prvPortStartFirstTask+0x24>)
1a00123e:	6800      	ldr	r0, [r0, #0]
1a001240:	6800      	ldr	r0, [r0, #0]
1a001242:	f380 8808 	msr	MSP, r0
1a001246:	f04f 0000 	mov.w	r0, #0
1a00124a:	f380 8814 	msr	CONTROL, r0
1a00124e:	b662      	cpsie	i
1a001250:	b661      	cpsie	f
1a001252:	f3bf 8f4f 	dsb	sy
1a001256:	f3bf 8f6f 	isb	sy
1a00125a:	df00      	svc	0
1a00125c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a00125e:	0000      	.short	0x0000
1a001260:	e000ed08 	.word	0xe000ed08

1a001264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001274 <vPortEnableVFP+0x10>
1a001268:	6801      	ldr	r1, [r0, #0]
1a00126a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00126e:	6001      	str	r1, [r0, #0]
1a001270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a001272:	0000      	.short	0x0000
1a001274:	e000ed88 	.word	0xe000ed88

1a001278 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
1a001278:	4b0e      	ldr	r3, [pc, #56]	; (1a0012b4 <prvTaskExitError+0x3c>)
1a00127a:	681b      	ldr	r3, [r3, #0]
{
1a00127c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00127e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
1a001280:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
1a001282:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
1a001284:	d008      	beq.n	1a001298 <prvTaskExitError+0x20>
1a001286:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00128a:	f383 8811 	msr	BASEPRI, r3
1a00128e:	f3bf 8f6f 	isb	sy
1a001292:	f3bf 8f4f 	dsb	sy
1a001296:	e7fe      	b.n	1a001296 <prvTaskExitError+0x1e>
1a001298:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00129c:	f383 8811 	msr	BASEPRI, r3
1a0012a0:	f3bf 8f6f 	isb	sy
1a0012a4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
1a0012a8:	9b01      	ldr	r3, [sp, #4]
1a0012aa:	2b00      	cmp	r3, #0
1a0012ac:	d0fc      	beq.n	1a0012a8 <prvTaskExitError+0x30>
}
1a0012ae:	b002      	add	sp, #8
1a0012b0:	4770      	bx	lr
1a0012b2:	bf00      	nop
1a0012b4:	10000000 	.word	0x10000000

1a0012b8 <pxPortInitialiseStack>:
{
1a0012b8:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0012ba:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0012be:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0012c2:	4c07      	ldr	r4, [pc, #28]	; (1a0012e0 <pxPortInitialiseStack+0x28>)
1a0012c4:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0012c8:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0012cc:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0012d0:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0012d4:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a0012d8:	bc30      	pop	{r4, r5}
1a0012da:	3844      	subs	r0, #68	; 0x44
1a0012dc:	4770      	bx	lr
1a0012de:	bf00      	nop
1a0012e0:	1a001279 	.word	0x1a001279
1a0012e4:	ffffffff 	.word	0xffffffff
1a0012e8:	ffffffff 	.word	0xffffffff
1a0012ec:	ffffffff 	.word	0xffffffff

1a0012f0 <SVC_Handler>:
	__asm volatile (
1a0012f0:	4b07      	ldr	r3, [pc, #28]	; (1a001310 <pxCurrentTCBConst2>)
1a0012f2:	6819      	ldr	r1, [r3, #0]
1a0012f4:	6808      	ldr	r0, [r1, #0]
1a0012f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0012fa:	f380 8809 	msr	PSP, r0
1a0012fe:	f3bf 8f6f 	isb	sy
1a001302:	f04f 0000 	mov.w	r0, #0
1a001306:	f380 8811 	msr	BASEPRI, r0
1a00130a:	4770      	bx	lr
1a00130c:	f3af 8000 	nop.w

1a001310 <pxCurrentTCBConst2>:
1a001310:	10002a00 	.word	0x10002a00

1a001314 <vPortEnterCritical>:
1a001314:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001318:	f383 8811 	msr	BASEPRI, r3
1a00131c:	f3bf 8f6f 	isb	sy
1a001320:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001324:	4a0a      	ldr	r2, [pc, #40]	; (1a001350 <vPortEnterCritical+0x3c>)
1a001326:	6813      	ldr	r3, [r2, #0]
1a001328:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
1a00132a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
1a00132c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00132e:	d000      	beq.n	1a001332 <vPortEnterCritical+0x1e>
}
1a001330:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001332:	4b08      	ldr	r3, [pc, #32]	; (1a001354 <vPortEnterCritical+0x40>)
1a001334:	681b      	ldr	r3, [r3, #0]
1a001336:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00133a:	d0f9      	beq.n	1a001330 <vPortEnterCritical+0x1c>
1a00133c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001340:	f383 8811 	msr	BASEPRI, r3
1a001344:	f3bf 8f6f 	isb	sy
1a001348:	f3bf 8f4f 	dsb	sy
1a00134c:	e7fe      	b.n	1a00134c <vPortEnterCritical+0x38>
1a00134e:	bf00      	nop
1a001350:	10000000 	.word	0x10000000
1a001354:	e000ed04 	.word	0xe000ed04

1a001358 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001358:	4a08      	ldr	r2, [pc, #32]	; (1a00137c <vPortExitCritical+0x24>)
1a00135a:	6813      	ldr	r3, [r2, #0]
1a00135c:	b943      	cbnz	r3, 1a001370 <vPortExitCritical+0x18>
1a00135e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001362:	f383 8811 	msr	BASEPRI, r3
1a001366:	f3bf 8f6f 	isb	sy
1a00136a:	f3bf 8f4f 	dsb	sy
1a00136e:	e7fe      	b.n	1a00136e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001370:	3b01      	subs	r3, #1
1a001372:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001374:	b90b      	cbnz	r3, 1a00137a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a001376:	f383 8811 	msr	BASEPRI, r3
}
1a00137a:	4770      	bx	lr
1a00137c:	10000000 	.word	0x10000000

1a001380 <PendSV_Handler>:
	__asm volatile
1a001380:	f3ef 8009 	mrs	r0, PSP
1a001384:	f3bf 8f6f 	isb	sy
1a001388:	4b15      	ldr	r3, [pc, #84]	; (1a0013e0 <pxCurrentTCBConst>)
1a00138a:	681a      	ldr	r2, [r3, #0]
1a00138c:	f01e 0f10 	tst.w	lr, #16
1a001390:	bf08      	it	eq
1a001392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00139a:	6010      	str	r0, [r2, #0]
1a00139c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0013a0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0013a4:	f380 8811 	msr	BASEPRI, r0
1a0013a8:	f3bf 8f4f 	dsb	sy
1a0013ac:	f3bf 8f6f 	isb	sy
1a0013b0:	f7ff ff36 	bl	1a001220 <vTaskSwitchContext>
1a0013b4:	f04f 0000 	mov.w	r0, #0
1a0013b8:	f380 8811 	msr	BASEPRI, r0
1a0013bc:	bc09      	pop	{r0, r3}
1a0013be:	6819      	ldr	r1, [r3, #0]
1a0013c0:	6808      	ldr	r0, [r1, #0]
1a0013c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0013c6:	f01e 0f10 	tst.w	lr, #16
1a0013ca:	bf08      	it	eq
1a0013cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0013d0:	f380 8809 	msr	PSP, r0
1a0013d4:	f3bf 8f6f 	isb	sy
1a0013d8:	4770      	bx	lr
1a0013da:	bf00      	nop
1a0013dc:	f3af 8000 	nop.w

1a0013e0 <pxCurrentTCBConst>:
1a0013e0:	10002a00 	.word	0x10002a00

1a0013e4 <SysTick_Handler>:
{
1a0013e4:	b508      	push	{r3, lr}
	__asm volatile
1a0013e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013ea:	f383 8811 	msr	BASEPRI, r3
1a0013ee:	f3bf 8f6f 	isb	sy
1a0013f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a0013f6:	f7ff fde1 	bl	1a000fbc <xTaskIncrementTick>
1a0013fa:	b118      	cbz	r0, 1a001404 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0013fc:	4b03      	ldr	r3, [pc, #12]	; (1a00140c <SysTick_Handler+0x28>)
1a0013fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001402:	601a      	str	r2, [r3, #0]
	__asm volatile
1a001404:	2300      	movs	r3, #0
1a001406:	f383 8811 	msr	BASEPRI, r3
}
1a00140a:	bd08      	pop	{r3, pc}
1a00140c:	e000ed04 	.word	0xe000ed04

1a001410 <vPortSetupTimerInterrupt>:
{
1a001410:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a001412:	4a09      	ldr	r2, [pc, #36]	; (1a001438 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a001414:	4d09      	ldr	r5, [pc, #36]	; (1a00143c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a001416:	4b0a      	ldr	r3, [pc, #40]	; (1a001440 <vPortSetupTimerInterrupt+0x30>)
1a001418:	4c0a      	ldr	r4, [pc, #40]	; (1a001444 <vPortSetupTimerInterrupt+0x34>)
1a00141a:	480b      	ldr	r0, [pc, #44]	; (1a001448 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a00141c:	2100      	movs	r1, #0
1a00141e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a001420:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a001422:	681b      	ldr	r3, [r3, #0]
1a001424:	fba4 1303 	umull	r1, r3, r4, r3
1a001428:	099b      	lsrs	r3, r3, #6
1a00142a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00142c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00142e:	6003      	str	r3, [r0, #0]
}
1a001430:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a001432:	6011      	str	r1, [r2, #0]
}
1a001434:	4770      	bx	lr
1a001436:	bf00      	nop
1a001438:	e000e010 	.word	0xe000e010
1a00143c:	e000e018 	.word	0xe000e018
1a001440:	10002b88 	.word	0x10002b88
1a001444:	10624dd3 	.word	0x10624dd3
1a001448:	e000e014 	.word	0xe000e014

1a00144c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a00144c:	4b3a      	ldr	r3, [pc, #232]	; (1a001538 <xPortStartScheduler+0xec>)
1a00144e:	4a3b      	ldr	r2, [pc, #236]	; (1a00153c <xPortStartScheduler+0xf0>)
1a001450:	6819      	ldr	r1, [r3, #0]
1a001452:	4291      	cmp	r1, r2
1a001454:	d041      	beq.n	1a0014da <xPortStartScheduler+0x8e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a001456:	681a      	ldr	r2, [r3, #0]
1a001458:	4b39      	ldr	r3, [pc, #228]	; (1a001540 <xPortStartScheduler+0xf4>)
1a00145a:	429a      	cmp	r2, r3
1a00145c:	d034      	beq.n	1a0014c8 <xPortStartScheduler+0x7c>
{
1a00145e:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a001460:	4b38      	ldr	r3, [pc, #224]	; (1a001544 <xPortStartScheduler+0xf8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a001462:	4c39      	ldr	r4, [pc, #228]	; (1a001548 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a001464:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a001466:	4939      	ldr	r1, [pc, #228]	; (1a00154c <xPortStartScheduler+0x100>)
{
1a001468:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a00146a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00146c:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a00146e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a001470:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a001472:	781b      	ldrb	r3, [r3, #0]
1a001474:	b2db      	uxtb	r3, r3
1a001476:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a00147a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00147e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a001482:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a001486:	2007      	movs	r0, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a001488:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a00148a:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a00148c:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00148e:	bf48      	it	mi
1a001490:	2206      	movmi	r2, #6
1a001492:	d401      	bmi.n	1a001498 <xPortStartScheduler+0x4c>
1a001494:	e00f      	b.n	1a0014b6 <xPortStartScheduler+0x6a>
1a001496:	4602      	mov	r2, r0
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a001498:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00149c:	005b      	lsls	r3, r3, #1
1a00149e:	b2db      	uxtb	r3, r3
1a0014a0:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0014a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0014a8:	061b      	lsls	r3, r3, #24
1a0014aa:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
1a0014ae:	d4f2      	bmi.n	1a001496 <xPortStartScheduler+0x4a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0014b0:	2a04      	cmp	r2, #4
1a0014b2:	d01b      	beq.n	1a0014ec <xPortStartScheduler+0xa0>
1a0014b4:	600a      	str	r2, [r1, #0]
	__asm volatile
1a0014b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014ba:	f383 8811 	msr	BASEPRI, r3
1a0014be:	f3bf 8f6f 	isb	sy
1a0014c2:	f3bf 8f4f 	dsb	sy
1a0014c6:	e7fe      	b.n	1a0014c6 <xPortStartScheduler+0x7a>
1a0014c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014cc:	f383 8811 	msr	BASEPRI, r3
1a0014d0:	f3bf 8f6f 	isb	sy
1a0014d4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0014d8:	e7fe      	b.n	1a0014d8 <xPortStartScheduler+0x8c>
1a0014da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014de:	f383 8811 	msr	BASEPRI, r3
1a0014e2:	f3bf 8f6f 	isb	sy
1a0014e6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0014ea:	e7fe      	b.n	1a0014ea <xPortStartScheduler+0x9e>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0014ec:	9a01      	ldr	r2, [sp, #4]
1a0014ee:	4815      	ldr	r0, [pc, #84]	; (1a001544 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0014f0:	4b17      	ldr	r3, [pc, #92]	; (1a001550 <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0014f2:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0014f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0014f8:	600c      	str	r4, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0014fa:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0014fc:	681a      	ldr	r2, [r3, #0]
1a0014fe:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a001502:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a001504:	681a      	ldr	r2, [r3, #0]
1a001506:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a00150a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a00150c:	f7ff ff80 	bl	1a001410 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a001510:	4b10      	ldr	r3, [pc, #64]	; (1a001554 <xPortStartScheduler+0x108>)
1a001512:	2400      	movs	r4, #0
1a001514:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a001516:	f7ff fea5 	bl	1a001264 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a00151a:	4a0f      	ldr	r2, [pc, #60]	; (1a001558 <xPortStartScheduler+0x10c>)
1a00151c:	6813      	ldr	r3, [r2, #0]
1a00151e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a001522:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a001524:	f7ff fe8a 	bl	1a00123c <prvPortStartFirstTask>
	vTaskSwitchContext();
1a001528:	f7ff fe7a 	bl	1a001220 <vTaskSwitchContext>
	prvTaskExitError();
1a00152c:	f7ff fea4 	bl	1a001278 <prvTaskExitError>
}
1a001530:	4620      	mov	r0, r4
1a001532:	b002      	add	sp, #8
1a001534:	bd10      	pop	{r4, pc}
1a001536:	bf00      	nop
1a001538:	e000ed00 	.word	0xe000ed00
1a00153c:	410fc271 	.word	0x410fc271
1a001540:	410fc270 	.word	0x410fc270
1a001544:	e000e400 	.word	0xe000e400
1a001548:	10002b2c 	.word	0x10002b2c
1a00154c:	10002b30 	.word	0x10002b30
1a001550:	e000ed20 	.word	0xe000ed20
1a001554:	10000000 	.word	0x10000000
1a001558:	e000ef34 	.word	0xe000ef34

1a00155c <Board_Debug_Init>:
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a00155c:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a00155e:	4c07      	ldr	r4, [pc, #28]	; (1a00157c <Board_Debug_Init+0x20>)
1a001560:	4620      	mov	r0, r4
1a001562:	f000 f93b 	bl	1a0017dc <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a001566:	4620      	mov	r0, r4
1a001568:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00156c:	f000 f96a 	bl	1a001844 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001570:	2203      	movs	r2, #3
    pUART->TER2 = UART_TER2_TXEN;
1a001572:	2301      	movs	r3, #1
	pUART->LCR = config;
1a001574:	60e2      	str	r2, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001576:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a001578:	bd10      	pop	{r4, pc}
1a00157a:	bf00      	nop
1a00157c:	400c1000 	.word	0x400c1000

1a001580 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001580:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001582:	b083      	sub	sp, #12
   DEBUGINIT();
1a001584:	f7ff ffea 	bl	1a00155c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a001588:	4840      	ldr	r0, [pc, #256]	; (1a00168c <Board_Init+0x10c>)
1a00158a:	f000 fd49 	bl	1a002020 <Chip_GPIO_Init>
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00158e:	4a40      	ldr	r2, [pc, #256]	; (1a001690 <Board_Init+0x110>)
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a001590:	2100      	movs	r1, #0
1a001592:	f102 0512 	add.w	r5, r2, #18
1a001596:	2303      	movs	r3, #3
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001598:	2401      	movs	r4, #1
1a00159a:	e003      	b.n	1a0015a4 <Board_Init+0x24>
1a00159c:	f812 3c02 	ldrb.w	r3, [r2, #-2]
1a0015a0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
1a0015a4:	009b      	lsls	r3, r3, #2
1a0015a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a0015aa:	f503 2376 	add.w	r3, r3, #1007616	; 0xf6000
1a0015ae:	fa04 f101 	lsl.w	r1, r4, r1
1a0015b2:	6818      	ldr	r0, [r3, #0]
1a0015b4:	3202      	adds	r2, #2
1a0015b6:	ea20 0101 	bic.w	r1, r0, r1
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0015ba:	4295      	cmp	r5, r2
1a0015bc:	6019      	str	r1, [r3, #0]
1a0015be:	d1ed      	bne.n	1a00159c <Board_Init+0x1c>
   Chip_ADC_Init(LPC_ADC0, &cs);
1a0015c0:	4669      	mov	r1, sp
1a0015c2:	4834      	ldr	r0, [pc, #208]	; (1a001694 <Board_Init+0x114>)
   Chip_SSP_Init(LPC_SSP1);
1a0015c4:	4c34      	ldr	r4, [pc, #208]	; (1a001698 <Board_Init+0x118>)
   Chip_ADC_Init(LPC_ADC0, &cs);
1a0015c6:	f000 f9c3 	bl	1a001950 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0015ca:	4669      	mov	r1, sp
1a0015cc:	4a33      	ldr	r2, [pc, #204]	; (1a00169c <Board_Init+0x11c>)
1a0015ce:	4831      	ldr	r0, [pc, #196]	; (1a001694 <Board_Init+0x114>)
1a0015d0:	f000 f9f0 	bl	1a0019b4 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0015d4:	2200      	movs	r2, #0
1a0015d6:	4669      	mov	r1, sp
1a0015d8:	482e      	ldr	r0, [pc, #184]	; (1a001694 <Board_Init+0x114>)
1a0015da:	f000 fa23 	bl	1a001a24 <Chip_ADC_SetResolution>
   Chip_SSP_Init(LPC_SSP1);
1a0015de:	4620      	mov	r0, r4
1a0015e0:	f000 fd4c 	bl	1a00207c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0015e4:	6863      	ldr	r3, [r4, #4]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0015e6:	492e      	ldr	r1, [pc, #184]	; (1a0016a0 <Board_Init+0x120>)
1a0015e8:	f023 0304 	bic.w	r3, r3, #4
1a0015ec:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0015ee:	6823      	ldr	r3, [r4, #0]
1a0015f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0015f4:	f043 0307 	orr.w	r3, r3, #7
1a0015f8:	6023      	str	r3, [r4, #0]
1a0015fa:	4620      	mov	r0, r4
1a0015fc:	f000 fd12 	bl	1a002024 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001600:	6863      	ldr	r3, [r4, #4]
1a001602:	f043 0302 	orr.w	r3, r3, #2
1a001606:	6063      	str	r3, [r4, #4]
   Chip_I2C_Init(I2C0);
1a001608:	2000      	movs	r0, #0
1a00160a:	f000 f8c1 	bl	1a001790 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00160e:	4b25      	ldr	r3, [pc, #148]	; (1a0016a4 <Board_Init+0x124>)
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a001610:	4925      	ldr	r1, [pc, #148]	; (1a0016a8 <Board_Init+0x128>)
1a001612:	f640 0208 	movw	r2, #2056	; 0x808
1a001616:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
1a00161a:	2000      	movs	r0, #0
1a00161c:	f000 f8c8 	bl	1a0017b0 <Chip_I2C_SetClockRate>
1a001620:	4922      	ldr	r1, [pc, #136]	; (1a0016ac <Board_Init+0x12c>)
	pGPIO->B[port][pin] = setting;
1a001622:	f8df e068 	ldr.w	lr, [pc, #104]	; 1a00168c <Board_Init+0x10c>
1a001626:	2400      	movs	r4, #0
1a001628:	f101 0c0a 	add.w	ip, r1, #10
1a00162c:	4627      	mov	r7, r4
1a00162e:	2205      	movs	r2, #5
	pGPIO->DIR[port] |= 1UL << pin;
1a001630:	2601      	movs	r6, #1
1a001632:	e002      	b.n	1a00163a <Board_Init+0xba>
1a001634:	788a      	ldrb	r2, [r1, #2]
1a001636:	78cc      	ldrb	r4, [r1, #3]
1a001638:	3102      	adds	r1, #2
1a00163a:	0093      	lsls	r3, r2, #2
1a00163c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a001640:	f503 2376 	add.w	r3, r3, #1007616	; 0xf6000
	pGPIO->B[port][pin] = setting;
1a001644:	eb0e 1242 	add.w	r2, lr, r2, lsl #5
	pGPIO->DIR[port] |= 1UL << pin;
1a001648:	681d      	ldr	r5, [r3, #0]
1a00164a:	fa06 f004 	lsl.w	r0, r6, r4
1a00164e:	4328      	orrs	r0, r5
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001650:	458c      	cmp	ip, r1
1a001652:	6018      	str	r0, [r3, #0]
	pGPIO->B[port][pin] = setting;
1a001654:	5517      	strb	r7, [r2, r4]
1a001656:	d1ed      	bne.n	1a001634 <Board_Init+0xb4>
1a001658:	4a15      	ldr	r2, [pc, #84]	; (1a0016b0 <Board_Init+0x130>)
1a00165a:	2104      	movs	r1, #4
1a00165c:	1d95      	adds	r5, r2, #6
1a00165e:	2300      	movs	r3, #0
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001660:	2401      	movs	r4, #1
1a001662:	009b      	lsls	r3, r3, #2
1a001664:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a001668:	f503 2376 	add.w	r3, r3, #1007616	; 0xf6000
1a00166c:	fa04 f101 	lsl.w	r1, r4, r1
1a001670:	6818      	ldr	r0, [r3, #0]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001672:	4295      	cmp	r5, r2
1a001674:	ea20 0101 	bic.w	r1, r0, r1
1a001678:	6019      	str	r1, [r3, #0]
1a00167a:	d003      	beq.n	1a001684 <Board_Init+0x104>
1a00167c:	7893      	ldrb	r3, [r2, #2]
1a00167e:	78d1      	ldrb	r1, [r2, #3]
1a001680:	3202      	adds	r2, #2
1a001682:	e7ee      	b.n	1a001662 <Board_Init+0xe2>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a001684:	f000 fc1a 	bl	1a001ebc <SystemCoreClockUpdate>
}
1a001688:	b003      	add	sp, #12
1a00168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00168c:	400f4000 	.word	0x400f4000
1a001690:	1a007d86 	.word	0x1a007d86
1a001694:	400e3000 	.word	0x400e3000
1a001698:	400c5000 	.word	0x400c5000
1a00169c:	00061a80 	.word	0x00061a80
1a0016a0:	000186a0 	.word	0x000186a0
1a0016a4:	40086000 	.word	0x40086000
1a0016a8:	000f4240 	.word	0x000f4240
1a0016ac:	1a007d78 	.word	0x1a007d78
1a0016b0:	1a007d70 	.word	0x1a007d70

1a0016b4 <__stdio_putchar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0016b4:	4a03      	ldr	r2, [pc, #12]	; (1a0016c4 <__stdio_putchar+0x10>)
1a0016b6:	6953      	ldr	r3, [r2, #20]
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0016b8:	069b      	lsls	r3, r3, #26
1a0016ba:	d5fc      	bpl.n	1a0016b6 <__stdio_putchar+0x2>
	pUART->THR = (uint32_t) data;
1a0016bc:	b2c0      	uxtb	r0, r0
1a0016be:	6010      	str	r0, [r2, #0]
}

void __stdio_putchar(int c)
{
   Board_UARTPutChar(c);
}
1a0016c0:	4770      	bx	lr
1a0016c2:	bf00      	nop
1a0016c4:	400c1000 	.word	0x400c1000

1a0016c8 <__stdio_getchar>:
	return pUART->LSR;
1a0016c8:	4b04      	ldr	r3, [pc, #16]	; (1a0016dc <__stdio_getchar+0x14>)
1a0016ca:	695a      	ldr	r2, [r3, #20]
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0016cc:	07d2      	lsls	r2, r2, #31
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0016ce:	bf46      	itte	mi
1a0016d0:	6818      	ldrmi	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0016d2:	b2c0      	uxtbmi	r0, r0
   return EOF;
1a0016d4:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff

int __stdio_getchar()
{
   return Board_UARTGetChar();;
}
1a0016d8:	4770      	bx	lr
1a0016da:	bf00      	nop
1a0016dc:	400c1000 	.word	0x400c1000

1a0016e0 <__stdio_init>:

void __stdio_init()
{
   Board_Debug_Init();
1a0016e0:	f7ff bf3c 	b.w	1a00155c <Board_Debug_Init>

1a0016e4 <Board_SetupClocking>:
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}


void Board_SetupClocking(void)
{
1a0016e4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0016e6:	4c12      	ldr	r4, [pc, #72]	; (1a001730 <Board_SetupClocking+0x4c>)
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0016e8:	4912      	ldr	r1, [pc, #72]	; (1a001734 <Board_SetupClocking+0x50>)
1a0016ea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
1a0016ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0016f2:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0016f6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0016fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
1a0016fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001702:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001706:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
1a00170a:	2201      	movs	r2, #1
1a00170c:	2006      	movs	r0, #6
1a00170e:	f000 fbdf 	bl	1a001ed0 <Chip_SetupCoreClock>
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a001712:	2301      	movs	r3, #1
1a001714:	461a      	mov	r2, r3
1a001716:	4618      	mov	r0, r3
1a001718:	210f      	movs	r1, #15
1a00171a:	f000 fb4f 	bl	1a001dbc <Chip_Clock_SetBaseClock>
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00171e:	6863      	ldr	r3, [r4, #4]
1a001720:	f023 030c 	bic.w	r3, r3, #12
1a001724:	6063      	str	r3, [r4, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001726:	6863      	ldr	r3, [r4, #4]
1a001728:	f043 0303 	orr.w	r3, r3, #3
1a00172c:	6063      	str	r3, [r4, #4]
}
1a00172e:	bd10      	pop	{r4, pc}
1a001730:	40043000 	.word	0x40043000
1a001734:	0c28cb00 	.word	0x0c28cb00

1a001738 <Board_SystemInit>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001738:	4b0c      	ldr	r3, [pc, #48]	; (1a00176c <Board_SystemInit+0x34>)


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00173a:	b430      	push	{r4, r5}
1a00173c:	2044      	movs	r0, #68	; 0x44
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00173e:	4d0c      	ldr	r5, [pc, #48]	; (1a001770 <Board_SystemInit+0x38>)
1a001740:	f103 0474 	add.w	r4, r3, #116	; 0x74
1a001744:	2200      	movs	r2, #0
1a001746:	2102      	movs	r1, #2
1a001748:	e005      	b.n	1a001756 <Board_SystemInit+0x1e>
1a00174a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
1a00174e:	f813 2c03 	ldrb.w	r2, [r3, #-3]
1a001752:	f833 0c02 	ldrh.w	r0, [r3, #-2]
1a001756:	eb02 1241 	add.w	r2, r2, r1, lsl #5
1a00175a:	3304      	adds	r3, #4
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00175c:	42a3      	cmp	r3, r4
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00175e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001762:	d1f2      	bne.n	1a00174a <Board_SystemInit+0x12>
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
    Board_SetupClocking();
}
1a001764:	bc30      	pop	{r4, r5}
    Board_SetupClocking();
1a001766:	f7ff bfbd 	b.w	1a0016e4 <Board_SetupClocking>
1a00176a:	bf00      	nop
1a00176c:	1a007da0 	.word	0x1a007da0
1a001770:	40086000 	.word	0x40086000

1a001774 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001774:	2901      	cmp	r1, #1
1a001776:	d108      	bne.n	1a00178a <Chip_I2C_EventHandler+0x16>
		return;
	}

	stat = &iic->mXfer->status;
1a001778:	4b04      	ldr	r3, [pc, #16]	; (1a00178c <Chip_I2C_EventHandler+0x18>)
1a00177a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00177e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a001782:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001784:	7d13      	ldrb	r3, [r2, #20]
1a001786:	2b04      	cmp	r3, #4
1a001788:	d0fc      	beq.n	1a001784 <Chip_I2C_EventHandler+0x10>
}
1a00178a:	4770      	bx	lr
1a00178c:	10000004 	.word	0x10000004

1a001790 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001790:	b538      	push	{r3, r4, r5, lr}
	Chip_Clock_Enable(i2c[id].clk);
1a001792:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001796:	4d05      	ldr	r5, [pc, #20]	; (1a0017ac <Chip_I2C_Init+0x1c>)
1a001798:	0084      	lsls	r4, r0, #2
1a00179a:	192b      	adds	r3, r5, r4
1a00179c:	8898      	ldrh	r0, [r3, #4]
1a00179e:	f000 fb47 	bl	1a001e30 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0017a2:	592b      	ldr	r3, [r5, r4]
1a0017a4:	226c      	movs	r2, #108	; 0x6c
1a0017a6:	619a      	str	r2, [r3, #24]
}
1a0017a8:	bd38      	pop	{r3, r4, r5, pc}
1a0017aa:	bf00      	nop
1a0017ac:	10000004 	.word	0x10000004

1a0017b0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0017b0:	b570      	push	{r4, r5, r6, lr}
	return Chip_Clock_GetRate(i2c[id].clk);
1a0017b2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0017b6:	4e08      	ldr	r6, [pc, #32]	; (1a0017d8 <Chip_I2C_SetClockRate+0x28>)
1a0017b8:	0085      	lsls	r5, r0, #2
1a0017ba:	1973      	adds	r3, r6, r5
{
1a0017bc:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0017be:	8898      	ldrh	r0, [r3, #4]
1a0017c0:	f000 fb50 	bl	1a001e64 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0017c4:	5973      	ldr	r3, [r6, r5]
	SCLValue = (getClkRate(id) / clockrate);
1a0017c6:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0017ca:	0842      	lsrs	r2, r0, #1
1a0017cc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0017ce:	6919      	ldr	r1, [r3, #16]
1a0017d0:	1a40      	subs	r0, r0, r1
1a0017d2:	6158      	str	r0, [r3, #20]
}
1a0017d4:	bd70      	pop	{r4, r5, r6, pc}
1a0017d6:	bf00      	nop
1a0017d8:	10000004 	.word	0x10000004

1a0017dc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0017dc:	b510      	push	{r4, lr}
	switch(base) {
1a0017de:	4b17      	ldr	r3, [pc, #92]	; (1a00183c <Chip_UART_Init+0x60>)
1a0017e0:	4298      	cmp	r0, r3
{
1a0017e2:	b082      	sub	sp, #8
1a0017e4:	4604      	mov	r4, r0
	switch(base) {
1a0017e6:	d027      	beq.n	1a001838 <Chip_UART_Init+0x5c>
1a0017e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0017ec:	4298      	cmp	r0, r3
1a0017ee:	d01d      	beq.n	1a00182c <Chip_UART_Init+0x50>
1a0017f0:	4813      	ldr	r0, [pc, #76]	; (1a001840 <Chip_UART_Init+0x64>)
1a0017f2:	4284      	cmp	r4, r0
1a0017f4:	bf0c      	ite	eq
1a0017f6:	2082      	moveq	r0, #130	; 0x82
1a0017f8:	2081      	movne	r0, #129	; 0x81
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0017fa:	2301      	movs	r3, #1
1a0017fc:	461a      	mov	r2, r3
1a0017fe:	4619      	mov	r1, r3
1a001800:	f000 fafc 	bl	1a001dfc <Chip_Clock_EnableOpts>
	pUART->RS485DLY = 0;
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001804:	4a0e      	ldr	r2, [pc, #56]	; (1a001840 <Chip_UART_Init+0x64>)
    pUART->TER2 = 0;
1a001806:	2300      	movs	r3, #0
	pUART->FCR = fcr;
1a001808:	2107      	movs	r1, #7
1a00180a:	4294      	cmp	r4, r2
1a00180c:	60a1      	str	r1, [r4, #8]
    pUART->TER2 = 0;
1a00180e:	65e3      	str	r3, [r4, #92]	; 0x5c
	pUART->IER = 0;
1a001810:	6063      	str	r3, [r4, #4]
	pUART->LCR = 0;
1a001812:	60e3      	str	r3, [r4, #12]
	pUART->ACR = 0;
1a001814:	6223      	str	r3, [r4, #32]
	pUART->RS485CTRL = 0;
1a001816:	64e3      	str	r3, [r4, #76]	; 0x4c
	pUART->RS485DLY = 0;
1a001818:	6563      	str	r3, [r4, #84]	; 0x54
	pUART->RS485ADRMATCH = 0;
1a00181a:	6523      	str	r3, [r4, #80]	; 0x50
    if (pUART == LPC_UART1) {
1a00181c:	d008      	beq.n	1a001830 <Chip_UART_Init+0x54>
	pUART->LCR = config;
1a00181e:	2203      	movs	r2, #3

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001820:	2310      	movs	r3, #16
1a001822:	60e2      	str	r2, [r4, #12]
1a001824:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001826:	9b01      	ldr	r3, [sp, #4]
}
1a001828:	b002      	add	sp, #8
1a00182a:	bd10      	pop	{r4, pc}
	switch(base) {
1a00182c:	20a2      	movs	r0, #162	; 0xa2
1a00182e:	e7e4      	b.n	1a0017fa <Chip_UART_Init+0x1e>
		pUART->MCR = 0;
1a001830:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a001832:	69a3      	ldr	r3, [r4, #24]
1a001834:	9301      	str	r3, [sp, #4]
1a001836:	e7f2      	b.n	1a00181e <Chip_UART_Init+0x42>
	switch(base) {
1a001838:	20a1      	movs	r0, #161	; 0xa1
1a00183a:	e7de      	b.n	1a0017fa <Chip_UART_Init+0x1e>
1a00183c:	400c1000 	.word	0x400c1000
1a001840:	40082000 	.word	0x40082000

1a001844 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch(base) {
1a001848:	4b3f      	ldr	r3, [pc, #252]	; (1a001948 <Chip_UART_SetBaudFDR+0x104>)
{
1a00184a:	b089      	sub	sp, #36	; 0x24
	switch(base) {
1a00184c:	4298      	cmp	r0, r3
{
1a00184e:	9007      	str	r0, [sp, #28]
1a001850:	468b      	mov	fp, r1
	switch(base) {
1a001852:	d075      	beq.n	1a001940 <Chip_UART_SetBaudFDR+0xfc>
1a001854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001858:	4298      	cmp	r0, r3
1a00185a:	4601      	mov	r1, r0
1a00185c:	d06d      	beq.n	1a00193a <Chip_UART_SetBaudFDR+0xf6>
1a00185e:	483b      	ldr	r0, [pc, #236]	; (1a00194c <Chip_UART_SetBaudFDR+0x108>)
1a001860:	4281      	cmp	r1, r0
1a001862:	bf0c      	ite	eq
1a001864:	f44f 70d1 	moveq.w	r0, #418	; 0x1a2
1a001868:	f44f 70e1 	movne.w	r0, #450	; 0x1c2
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00186c:	f000 fafa 	bl	1a001e64 <Chip_Clock_GetRate>

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001870:	2701      	movs	r7, #1
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001872:	0903      	lsrs	r3, r0, #4
1a001874:	0702      	lsls	r2, r0, #28
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001876:	2600      	movs	r6, #0
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001878:	9006      	str	r0, [sp, #24]
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00187a:	9305      	str	r3, [sp, #20]
1a00187c:	9204      	str	r2, [sp, #16]
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00187e:	9602      	str	r6, [sp, #8]
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001880:	469a      	mov	sl, r3
1a001882:	4690      	mov	r8, r2
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001884:	9701      	str	r7, [sp, #4]
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001886:	f8cd b00c 	str.w	fp, [sp, #12]
	uint32_t odiff = -1UL; /* old best diff */
1a00188a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00188e:	9d03      	ldr	r5, [sp, #12]
		for (d = 0; d < m; d++) {
1a001890:	2400      	movs	r4, #0
1a001892:	e006      	b.n	1a0018a2 <Chip_UART_SetBaudFDR+0x5e>
				diff = -diff;
				div ++;
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001894:	4548      	cmp	r0, r9
1a001896:	d800      	bhi.n	1a00189a <Chip_UART_SetBaudFDR+0x56>
1a001898:	b989      	cbnz	r1, 1a0018be <Chip_UART_SetBaudFDR+0x7a>
		for (d = 0; d < m; d++) {
1a00189a:	3401      	adds	r4, #1
1a00189c:	42bc      	cmp	r4, r7
1a00189e:	445d      	add	r5, fp
1a0018a0:	d01c      	beq.n	1a0018dc <Chip_UART_SetBaudFDR+0x98>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0018a2:	462a      	mov	r2, r5
1a0018a4:	2300      	movs	r3, #0
1a0018a6:	4640      	mov	r0, r8
1a0018a8:	4651      	mov	r1, sl
1a0018aa:	f001 f8e9 	bl	1a002a80 <__aeabi_uldivmod>
			if ((int)diff < 0) {
1a0018ae:	2800      	cmp	r0, #0
			diff = (uint32_t) dval;
1a0018b0:	4603      	mov	r3, r0
			div = (uint32_t) (dval >> 32);
1a0018b2:	460a      	mov	r2, r1
			if ((int)diff < 0) {
1a0018b4:	daee      	bge.n	1a001894 <Chip_UART_SetBaudFDR+0x50>
				diff = -diff;
1a0018b6:	4243      	negs	r3, r0
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0018b8:	454b      	cmp	r3, r9
1a0018ba:	d8ee      	bhi.n	1a00189a <Chip_UART_SetBaudFDR+0x56>
				div ++;
1a0018bc:	1c4a      	adds	r2, r1, #1
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0018be:	0c11      	lsrs	r1, r2, #16
1a0018c0:	d1eb      	bne.n	1a00189a <Chip_UART_SetBaudFDR+0x56>
1a0018c2:	2a02      	cmp	r2, #2
1a0018c4:	d801      	bhi.n	1a0018ca <Chip_UART_SetBaudFDR+0x86>
1a0018c6:	2c00      	cmp	r4, #0
1a0018c8:	d1e7      	bne.n	1a00189a <Chip_UART_SetBaudFDR+0x56>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0018ca:	b1bb      	cbz	r3, 1a0018fc <Chip_UART_SetBaudFDR+0xb8>
1a0018cc:	e9cd 7401 	strd	r7, r4, [sp, #4]
		for (d = 0; d < m; d++) {
1a0018d0:	3401      	adds	r4, #1
1a0018d2:	42bc      	cmp	r4, r7
1a0018d4:	4699      	mov	r9, r3
1a0018d6:	4616      	mov	r6, r2
1a0018d8:	445d      	add	r5, fp
1a0018da:	d1e2      	bne.n	1a0018a2 <Chip_UART_SetBaudFDR+0x5e>
1a0018dc:	9b04      	ldr	r3, [sp, #16]
1a0018de:	eb18 0803 	adds.w	r8, r8, r3
1a0018e2:	9b05      	ldr	r3, [sp, #20]
1a0018e4:	eb4a 0a03 	adc.w	sl, sl, r3
1a0018e8:	9b03      	ldr	r3, [sp, #12]
	for (m = 1; odiff && m < 16; m++) {
1a0018ea:	1c67      	adds	r7, r4, #1
1a0018ec:	445b      	add	r3, fp
1a0018ee:	2f10      	cmp	r7, #16
1a0018f0:	9303      	str	r3, [sp, #12]
1a0018f2:	d1cc      	bne.n	1a00188e <Chip_UART_SetBaudFDR+0x4a>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0018f4:	b1ee      	cbz	r6, 1a001932 <Chip_UART_SetBaudFDR+0xee>
1a0018f6:	e9dd 7401 	ldrd	r7, r4, [sp, #4]
1a0018fa:	4632      	mov	r2, r6
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0018fc:	9907      	ldr	r1, [sp, #28]

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0018fe:	9d06      	ldr	r5, [sp, #24]
1a001900:	68cb      	ldr	r3, [r1, #12]
1a001902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001906:	60cb      	str	r3, [r1, #12]
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
1a001908:	b2d3      	uxtb	r3, r2
	pUART->DLL = (uint32_t) dll;
1a00190a:	600b      	str	r3, [r1, #0]
1a00190c:	0a13      	lsrs	r3, r2, #8
	pUART->DLM = (uint32_t) dlm;
1a00190e:	604b      	str	r3, [r1, #4]
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001910:	4608      	mov	r0, r1
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001912:	013b      	lsls	r3, r7, #4
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001914:	68c9      	ldr	r1, [r1, #12]
1a001916:	b2db      	uxtb	r3, r3
1a001918:	4323      	orrs	r3, r4
1a00191a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00191e:	092e      	lsrs	r6, r5, #4
1a001920:	443c      	add	r4, r7
1a001922:	60c1      	str	r1, [r0, #12]
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001924:	6283      	str	r3, [r0, #40]	; 0x28
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001926:	fb07 f606 	mul.w	r6, r7, r6
1a00192a:	fb02 f404 	mul.w	r4, r2, r4
1a00192e:	fbb6 f6f4 	udiv	r6, r6, r4
}
1a001932:	4630      	mov	r0, r6
1a001934:	b009      	add	sp, #36	; 0x24
1a001936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch(base) {
1a00193a:	f44f 70b1 	mov.w	r0, #354	; 0x162
1a00193e:	e795      	b.n	1a00186c <Chip_UART_SetBaudFDR+0x28>
1a001940:	f44f 70c1 	mov.w	r0, #386	; 0x182
1a001944:	e792      	b.n	1a00186c <Chip_UART_SetBaudFDR+0x28>
1a001946:	bf00      	nop
1a001948:	400c1000 	.word	0x400c1000
1a00194c:	40082000 	.word	0x40082000

1a001950 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001950:	b570      	push	{r4, r5, r6, lr}
	if (pADC == LPC_ADC1) {
1a001952:	4d15      	ldr	r5, [pc, #84]	; (1a0019a8 <Chip_ADC_Init+0x58>)
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001954:	2301      	movs	r3, #1
		clkADC = CLK_APB3_ADC0;
1a001956:	42a8      	cmp	r0, r5
1a001958:	bf0c      	ite	eq
1a00195a:	2504      	moveq	r5, #4
1a00195c:	2503      	movne	r5, #3
{
1a00195e:	460e      	mov	r6, r1
1a001960:	4604      	mov	r4, r0
	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001962:	461a      	mov	r2, r3
1a001964:	4619      	mov	r1, r3
1a001966:	4628      	mov	r0, r5
1a001968:	f000 fa48 	bl	1a001dfc <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00196c:	2300      	movs	r3, #0

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00196e:	4a0f      	ldr	r2, [pc, #60]	; (1a0019ac <Chip_ADC_Init+0x5c>)
	pADC->INTEN = 0;		/* Disable all interrupts */
1a001970:	60e3      	str	r3, [r4, #12]
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001972:	4628      	mov	r0, r5
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001974:	80b3      	strh	r3, [r6, #4]
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001976:	6032      	str	r2, [r6, #0]
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001978:	f000 fa74 	bl	1a001e64 <Chip_Clock_GetRate>
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00197c:	0040      	lsls	r0, r0, #1
1a00197e:	f500 0086 	add.w	r0, r0, #4390912	; 0x430000
1a001982:	4a0b      	ldr	r2, [pc, #44]	; (1a0019b0 <Chip_ADC_Init+0x60>)
	clk = 11;
	ADCSetup->burstMode = false;
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
	cr |= ADC_CR_CLKDIV(div);
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001984:	7933      	ldrb	r3, [r6, #4]
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001986:	f500 500e 	add.w	r0, r0, #9088	; 0x2380
1a00198a:	fba2 2000 	umull	r2, r0, r2, r0
1a00198e:	0d00      	lsrs	r0, r0, #20
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001990:	045b      	lsls	r3, r3, #17
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001992:	3801      	subs	r0, #1
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001994:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
	cr |= ADC_CR_CLKDIV(div);
1a001998:	b2c0      	uxtb	r0, r0
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00199a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
1a00199e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	pADC->CR = cr;
1a0019a2:	6020      	str	r0, [r4, #0]
}
1a0019a4:	bd70      	pop	{r4, r5, r6, pc}
1a0019a6:	bf00      	nop
1a0019a8:	400e4000 	.word	0x400e4000
1a0019ac:	00061a80 	.word	0x00061a80
1a0019b0:	1e81080d 	.word	0x1e81080d

1a0019b4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0019b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0019b8:	6806      	ldr	r6, [r0, #0]
	ADCSetup->adcRate = rate;
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0019ba:	f891 9005 	ldrb.w	r9, [r1, #5]
	ADCSetup->adcRate = rate;
1a0019be:	600a      	str	r2, [r1, #0]
{
1a0019c0:	4604      	mov	r4, r0
	if (pADC == LPC_ADC1) {
1a0019c2:	4817      	ldr	r0, [pc, #92]	; (1a001a20 <Chip_ADC_SetSampleRate+0x6c>)
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0019c4:	f891 8004 	ldrb.w	r8, [r1, #4]
	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0019c8:	f426 266f 	bic.w	r6, r6, #978944	; 0xef000
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0019cc:	4284      	cmp	r4, r0
1a0019ce:	bf0c      	ite	eq
1a0019d0:	2004      	moveq	r0, #4
1a0019d2:	2003      	movne	r0, #3
{
1a0019d4:	460f      	mov	r7, r1
1a0019d6:	4615      	mov	r5, r2
	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0019d8:	f426 6670 	bic.w	r6, r6, #3840	; 0xf00
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0019dc:	f000 fa42 	bl	1a001e64 <Chip_Clock_GetRate>
	if (burstMode) {
1a0019e0:	f1b9 0f00 	cmp.w	r9, #0
1a0019e4:	d016      	beq.n	1a001a14 <Chip_ADC_SetSampleRate+0x60>
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0019e6:	f1c8 080b 	rsb	r8, r8, #11
		fullAdcRate = adcRate * clks;
1a0019ea:	fa5f f288 	uxtb.w	r2, r8
1a0019ee:	fb05 f502 	mul.w	r5, r5, r2
	cr |= ADC_CR_CLKDIV(div);
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0019f2:	793b      	ldrb	r3, [r7, #4]
1a0019f4:	045b      	lsls	r3, r3, #17
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0019f6:	eb05 0040 	add.w	r0, r5, r0, lsl #1
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0019fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0019fe:	006d      	lsls	r5, r5, #1
1a001a00:	fbb0 f0f5 	udiv	r0, r0, r5
1a001a04:	3801      	subs	r0, #1
1a001a06:	4333      	orrs	r3, r6
	cr |= ADC_CR_CLKDIV(div);
1a001a08:	b2c0      	uxtb	r0, r0
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001a0a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	pADC->CR = cr;
1a001a0e:	6023      	str	r3, [r4, #0]
}
1a001a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a001a14:	eb05 0285 	add.w	r2, r5, r5, lsl #2
1a001a18:	eb05 0542 	add.w	r5, r5, r2, lsl #1
1a001a1c:	e7e9      	b.n	1a0019f2 <Chip_ADC_SetSampleRate+0x3e>
1a001a1e:	bf00      	nop
1a001a20:	400e4000 	.word	0x400e4000

1a001a24 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
	ADCSetup->bitsAccuracy = resolution;
1a001a24:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001a26:	680a      	ldr	r2, [r1, #0]
1a001a28:	f7ff bfc4 	b.w	1a0019b4 <Chip_ADC_SetSampleRate>

1a001a2c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001a30:	680b      	ldr	r3, [r1, #0]
{
1a001a32:	b083      	sub	sp, #12
	if (ppll->ctrl & (1 << 7)) {
1a001a34:	f013 0280 	ands.w	r2, r3, #128	; 0x80
{
1a001a38:	9000      	str	r0, [sp, #0]
	if (ppll->ctrl & (1 << 7)) {
1a001a3a:	9201      	str	r2, [sp, #4]
1a001a3c:	d044      	beq.n	1a001ac8 <pll_calc_divs+0x9c>
		ppll->ctrl &= ~(1 << 6);
1a001a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001a42:	600b      	str	r3, [r1, #0]
1a001a44:	f04f 0e00 	mov.w	lr, #0
1a001a48:	694e      	ldr	r6, [r1, #20]
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001a4a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1a001ad0 <pll_calc_divs+0xa4>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001a4e:	f8df b084 	ldr.w	fp, [pc, #132]	; 1a001ad4 <pll_calc_divs+0xa8>
		ppll->ctrl &= ~(1 << 6);
1a001a52:	f8dd a000 	ldr.w	sl, [sp]
1a001a56:	2701      	movs	r7, #1
			for (m = 1; m <= 256; m++) {
1a001a58:	f240 1901 	movw	r9, #257	; 0x101
		for (p = 0; p < 4; p ++) {
1a001a5c:	f04f 0c00 	mov.w	ip, #0
1a001a60:	f10c 0c01 	add.w	ip, ip, #1
{
1a001a64:	4634      	mov	r4, r6
			for (m = 1; m <= 256; m++) {
1a001a66:	2201      	movs	r2, #1
				if (ppll->ctrl & (1 << 6)) {
1a001a68:	f1be 0f00 	cmp.w	lr, #0
1a001a6c:	d027      	beq.n	1a001abe <pll_calc_divs+0x92>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001a6e:	fa02 f30c 	lsl.w	r3, r2, ip
1a001a72:	fb06 f303 	mul.w	r3, r6, r3
1a001a76:	fbb3 f3f7 	udiv	r3, r3, r7
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001a7a:	4543      	cmp	r3, r8
1a001a7c:	d912      	bls.n	1a001aa4 <pll_calc_divs+0x78>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001a7e:	455b      	cmp	r3, fp
1a001a80:	d814      	bhi.n	1a001aac <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001a82:	9801      	ldr	r0, [sp, #4]
1a001a84:	b9f0      	cbnz	r0, 1a001ac4 <pll_calc_divs+0x98>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a001a86:	fa23 f50c 	lsr.w	r5, r3, ip
				}

				if (ABS(freq - fout) < prev) {
1a001a8a:	9800      	ldr	r0, [sp, #0]
1a001a8c:	1b40      	subs	r0, r0, r5
		return -val;
1a001a8e:	2800      	cmp	r0, #0
1a001a90:	bfb8      	it	lt
1a001a92:	4240      	neglt	r0, r0
				if (ABS(freq - fout) < prev) {
1a001a94:	4550      	cmp	r0, sl
1a001a96:	d205      	bcs.n	1a001aa4 <pll_calc_divs+0x78>
					ppll->nsel = n;
					ppll->psel = p + 1;
1a001a98:	e9c1 7c02 	strd	r7, ip, [r1, #8]
					ppll->msel = m;
					ppll->fout = fout;
					ppll->fcco = fcco;
1a001a9c:	e9c1 5306 	strd	r5, r3, [r1, #24]
					ppll->msel = m;
1a001aa0:	610a      	str	r2, [r1, #16]
					ppll->fcco = fcco;
1a001aa2:	4682      	mov	sl, r0
			for (m = 1; m <= 256; m++) {
1a001aa4:	3201      	adds	r2, #1
1a001aa6:	454a      	cmp	r2, r9
1a001aa8:	4434      	add	r4, r6
1a001aaa:	d1dd      	bne.n	1a001a68 <pll_calc_divs+0x3c>
		for (p = 0; p < 4; p ++) {
1a001aac:	f1bc 0f04 	cmp.w	ip, #4
1a001ab0:	d1d6      	bne.n	1a001a60 <pll_calc_divs+0x34>
	for (n = 1; n <= 4; n++) {
1a001ab2:	3701      	adds	r7, #1
1a001ab4:	2f05      	cmp	r7, #5
1a001ab6:	d1d1      	bne.n	1a001a5c <pll_calc_divs+0x30>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a001ab8:	b003      	add	sp, #12
1a001aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					fcco = (m * ppll->fin) / n;
1a001abe:	fbb4 f3f7 	udiv	r3, r4, r7
1a001ac2:	e7da      	b.n	1a001a7a <pll_calc_divs+0x4e>
1a001ac4:	461d      	mov	r5, r3
1a001ac6:	e7e0      	b.n	1a001a8a <pll_calc_divs+0x5e>
1a001ac8:	f003 0e40 	and.w	lr, r3, #64	; 0x40
1a001acc:	e7bc      	b.n	1a001a48 <pll_calc_divs+0x1c>
1a001ace:	bf00      	nop
1a001ad0:	094c5eff 	.word	0x094c5eff
1a001ad4:	1312d000 	.word	0x1312d000

1a001ad8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001ad8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001ada:	4a0e      	ldr	r2, [pc, #56]	; (1a001b14 <Chip_Clock_EnableCrystal+0x3c>)
	volatile uint32_t delay = 1000;
1a001adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001ae0:	9301      	str	r3, [sp, #4]
	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001ae2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001ae4:	6990      	ldr	r0, [r2, #24]
	OldCrystalConfig &= (~2);
1a001ae6:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001aea:	4288      	cmp	r0, r1
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001aec:	bf18      	it	ne
1a001aee:	6191      	strne	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
	if (OscRateIn >= 20000000) {
1a001af0:	4909      	ldr	r1, [pc, #36]	; (1a001b18 <Chip_Clock_EnableCrystal+0x40>)
1a001af2:	4a0a      	ldr	r2, [pc, #40]	; (1a001b1c <Chip_Clock_EnableCrystal+0x44>)
1a001af4:	6809      	ldr	r1, [r1, #0]
	OldCrystalConfig &= (~1);
1a001af6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001afa:	4291      	cmp	r1, r2
		OldCrystalConfig |= 4;	/* Set high frequency mode */

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001afc:	4a05      	ldr	r2, [pc, #20]	; (1a001b14 <Chip_Clock_EnableCrystal+0x3c>)
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001afe:	bf88      	it	hi
1a001b00:	f043 0304 	orrhi.w	r3, r3, #4
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001b04:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001b06:	9b01      	ldr	r3, [sp, #4]
1a001b08:	1e5a      	subs	r2, r3, #1
1a001b0a:	9201      	str	r2, [sp, #4]
1a001b0c:	2b00      	cmp	r3, #0
1a001b0e:	d1fa      	bne.n	1a001b06 <Chip_Clock_EnableCrystal+0x2e>
}
1a001b10:	b002      	add	sp, #8
1a001b12:	4770      	bx	lr
1a001b14:	40050000 	.word	0x40050000
1a001b18:	1a007d98 	.word	0x1a007d98
1a001b1c:	01312cff 	.word	0x01312cff

1a001b20 <Chip_Clock_GetClockInputHz>:
/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;

	switch (input) {
1a001b20:	2810      	cmp	r0, #16
1a001b22:	d841      	bhi.n	1a001ba8 <Chip_Clock_GetClockInputHz+0x88>
1a001b24:	e8df f000 	tbb	[pc, r0]
1a001b28:	180e0c3d 	.word	0x180e0c3d
1a001b2c:	29264023 	.word	0x29264023
1a001b30:	40402f2c 	.word	0x40402f2c
1a001b34:	3a373431 	.word	0x3a373431
1a001b38:	09          	.byte	0x09
1a001b39:	00          	.byte	0x00
	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
		break;

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001b3a:	2004      	movs	r0, #4
1a001b3c:	f000 b912 	b.w	1a001d64 <Chip_Clock_GetDivRate.isra.0>
		rate = CGU_IRC_FREQ;
1a001b40:	481a      	ldr	r0, [pc, #104]	; (1a001bac <Chip_Clock_GetClockInputHz+0x8c>)
		break;
1a001b42:	4770      	bx	lr
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001b44:	4b1a      	ldr	r3, [pc, #104]	; (1a001bb0 <Chip_Clock_GetClockInputHz+0x90>)
	uint32_t rate = 0;
1a001b46:	481b      	ldr	r0, [pc, #108]	; (1a001bb4 <Chip_Clock_GetClockInputHz+0x94>)
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001b48:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001b4c:	f003 0307 	and.w	r3, r3, #7
1a001b50:	2b04      	cmp	r3, #4
	uint32_t rate = 0;
1a001b52:	bf08      	it	eq
1a001b54:	2000      	moveq	r0, #0
1a001b56:	4770      	bx	lr
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001b58:	4b15      	ldr	r3, [pc, #84]	; (1a001bb0 <Chip_Clock_GetClockInputHz+0x90>)
			rate = 50000000; /* RMII uses 50 MHz */
1a001b5a:	4a17      	ldr	r2, [pc, #92]	; (1a001bb8 <Chip_Clock_GetClockInputHz+0x98>)
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001b5c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
			rate = 50000000; /* RMII uses 50 MHz */
1a001b60:	4814      	ldr	r0, [pc, #80]	; (1a001bb4 <Chip_Clock_GetClockInputHz+0x94>)
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001b62:	f003 0307 	and.w	r3, r3, #7
			rate = 50000000; /* RMII uses 50 MHz */
1a001b66:	2b04      	cmp	r3, #4
1a001b68:	bf08      	it	eq
1a001b6a:	4610      	moveq	r0, r2
1a001b6c:	4770      	bx	lr
		rate = ExtRateIn;
1a001b6e:	4b13      	ldr	r3, [pc, #76]	; (1a001bbc <Chip_Clock_GetClockInputHz+0x9c>)
1a001b70:	6818      	ldr	r0, [r3, #0]
		break;
1a001b72:	4770      	bx	lr
		rate = OscRateIn;
1a001b74:	4b12      	ldr	r3, [pc, #72]	; (1a001bc0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001b76:	6818      	ldr	r0, [r3, #0]
		break;
1a001b78:	4770      	bx	lr
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001b7a:	4b12      	ldr	r3, [pc, #72]	; (1a001bc4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001b7c:	6818      	ldr	r0, [r3, #0]
		break;
1a001b7e:	4770      	bx	lr
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001b80:	4b10      	ldr	r3, [pc, #64]	; (1a001bc4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001b82:	6858      	ldr	r0, [r3, #4]
		break;
1a001b84:	4770      	bx	lr
		rate = Chip_Clock_GetMainPLLHz();
1a001b86:	f000 b8bd 	b.w	1a001d04 <Chip_Clock_GetMainPLLHz>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001b8a:	2000      	movs	r0, #0
1a001b8c:	f000 b8ea 	b.w	1a001d64 <Chip_Clock_GetDivRate.isra.0>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001b90:	2001      	movs	r0, #1
1a001b92:	f000 b8e7 	b.w	1a001d64 <Chip_Clock_GetDivRate.isra.0>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001b96:	2002      	movs	r0, #2
1a001b98:	f000 b8e4 	b.w	1a001d64 <Chip_Clock_GetDivRate.isra.0>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001b9c:	2003      	movs	r0, #3
1a001b9e:	f000 b8e1 	b.w	1a001d64 <Chip_Clock_GetDivRate.isra.0>
		rate = CRYSTAL_32K_FREQ_IN;
1a001ba2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a001ba6:	4770      	bx	lr
	uint32_t rate = 0;
1a001ba8:	2000      	movs	r0, #0
	default:
		break;
	}

	return rate;
}
1a001baa:	4770      	bx	lr
1a001bac:	00b71b00 	.word	0x00b71b00
1a001bb0:	40043000 	.word	0x40043000
1a001bb4:	017d7840 	.word	0x017d7840
1a001bb8:	02faf080 	.word	0x02faf080
1a001bbc:	1a007d6c 	.word	0x1a007d6c
1a001bc0:	1a007d98 	.word	0x1a007d98
1a001bc4:	10002b34 	.word	0x10002b34

1a001bc8 <Chip_Clock_CalcMainPLLValue>:
{
1a001bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001bcc:	4605      	mov	r5, r0
1a001bce:	b098      	sub	sp, #96	; 0x60
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001bd0:	7908      	ldrb	r0, [r1, #4]
{
1a001bd2:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001bd4:	f7ff ffa4 	bl	1a001b20 <Chip_Clock_GetClockInputHz>
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001bd8:	4b46      	ldr	r3, [pc, #280]	; (1a001cf4 <Chip_Clock_CalcMainPLLValue+0x12c>)
1a001bda:	4a47      	ldr	r2, [pc, #284]	; (1a001cf8 <Chip_Clock_CalcMainPLLValue+0x130>)
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001bdc:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001bde:	442b      	add	r3, r5
1a001be0:	4293      	cmp	r3, r2
1a001be2:	f200 8083 	bhi.w	1a001cec <Chip_Clock_CalcMainPLLValue+0x124>
1a001be6:	4606      	mov	r6, r0
1a001be8:	2800      	cmp	r0, #0
1a001bea:	d07f      	beq.n	1a001cec <Chip_Clock_CalcMainPLLValue+0x124>
	ppll->msel = freq / ppll->fin;
1a001bec:	fbb5 f3f0 	udiv	r3, r5, r0
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001bf0:	4942      	ldr	r1, [pc, #264]	; (1a001cfc <Chip_Clock_CalcMainPLLValue+0x134>)
	ppll->msel = freq / ppll->fin;
1a001bf2:	6123      	str	r3, [r4, #16]
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001bf4:	2280      	movs	r2, #128	; 0x80
1a001bf6:	6022      	str	r2, [r4, #0]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001bf8:	428d      	cmp	r5, r1
	ppll->nsel = 0;
1a001bfa:	f04f 0200 	mov.w	r2, #0
	ppll->psel = 0;
1a001bfe:	e9c4 2202 	strd	r2, r2, [r4, #8]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001c02:	d903      	bls.n	1a001c0c <Chip_Clock_CalcMainPLLValue+0x44>
1a001c04:	fb03 f200 	mul.w	r2, r3, r0
1a001c08:	42aa      	cmp	r2, r5
1a001c0a:	d04a      	beq.n	1a001ca2 <Chip_Clock_CalcMainPLLValue+0xda>
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001c0c:	225c      	movs	r2, #92	; 0x5c
1a001c0e:	2100      	movs	r1, #0
1a001c10:	a801      	add	r0, sp, #4
1a001c12:	f001 ff45 	bl	1a003aa0 <memset>
	pll[0].srcin = ppll->srcin;
1a001c16:	7923      	ldrb	r3, [r4, #4]
1a001c18:	f88d 3004 	strb.w	r3, [sp, #4]
	pll[0].ctrl |= (1 << 7);
1a001c1c:	2280      	movs	r2, #128	; 0x80
	pll_calc_divs(freq, &pll[0]);
1a001c1e:	4669      	mov	r1, sp
1a001c20:	4628      	mov	r0, r5
	pll[0].fin = ppll->fin;
1a001c22:	9605      	str	r6, [sp, #20]
	pll[0].ctrl |= (1 << 7);
1a001c24:	9200      	str	r2, [sp, #0]
	pll_calc_divs(freq, &pll[0]);
1a001c26:	f7ff ff01 	bl	1a001a2c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001c2a:	9b06      	ldr	r3, [sp, #24]
1a001c2c:	429d      	cmp	r5, r3
1a001c2e:	d040      	beq.n	1a001cb2 <Chip_Clock_CalcMainPLLValue+0xea>
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001c30:	9a10      	ldr	r2, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001c32:	6961      	ldr	r1, [r4, #20]
1a001c34:	9115      	str	r1, [sp, #84]	; 0x54
	diff[0] = ABS(freq - pll[0].fout);
1a001c36:	1aeb      	subs	r3, r5, r3
1a001c38:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
	pll[2].srcin = ppll->srcin;
1a001c40:	7927      	ldrb	r7, [r4, #4]
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001c42:	9210      	str	r2, [sp, #64]	; 0x40
	pll_calc_divs(freq, &pll[2]);
1a001c44:	a910      	add	r1, sp, #64	; 0x40
1a001c46:	4628      	mov	r0, r5
1a001c48:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
	pll[2].srcin = ppll->srcin;
1a001c4c:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001c50:	f7ff feec 	bl	1a001a2c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001c54:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001c56:	429d      	cmp	r5, r3
1a001c58:	d010      	beq.n	1a001c7c <Chip_Clock_CalcMainPLLValue+0xb4>
	if (freq <= 110000000) {
1a001c5a:	4a29      	ldr	r2, [pc, #164]	; (1a001d00 <Chip_Clock_CalcMainPLLValue+0x138>)
	diff[2] = ABS(freq - pll[2].fout);
1a001c5c:	1aeb      	subs	r3, r5, r3
1a001c5e:	ea83 77e3 	eor.w	r7, r3, r3, asr #31
	if (freq <= 110000000) {
1a001c62:	4295      	cmp	r5, r2
1a001c64:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
1a001c68:	d932      	bls.n	1a001cd0 <Chip_Clock_CalcMainPLLValue+0x108>
1a001c6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	diff[1] = ABS(freq - pll[1].fout);
1a001c6c:	1aed      	subs	r5, r5, r3
1a001c6e:	2d00      	cmp	r5, #0
1a001c70:	bfb8      	it	lt
1a001c72:	426d      	neglt	r5, r5
	if (diff[0] <= diff[1]) {
1a001c74:	42ae      	cmp	r6, r5
1a001c76:	dc1e      	bgt.n	1a001cb6 <Chip_Clock_CalcMainPLLValue+0xee>
		if (diff[0] <= diff[2]) {
1a001c78:	42be      	cmp	r6, r7
1a001c7a:	dd1a      	ble.n	1a001cb2 <Chip_Clock_CalcMainPLLValue+0xea>
		*ppll = pll[2];
1a001c7c:	ae10      	add	r6, sp, #64	; 0x40
1a001c7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
1a001c80:	4625      	mov	r5, r4
1a001c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a001c84:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
1a001c88:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		if (!ppll->nsel) {
1a001c8c:	68a2      	ldr	r2, [r4, #8]
1a001c8e:	b36a      	cbz	r2, 1a001cec <Chip_Clock_CalcMainPLLValue+0x124>
	if (ppll->msel == 0) {
1a001c90:	6923      	ldr	r3, [r4, #16]
		ppll->nsel --;
1a001c92:	3a01      	subs	r2, #1
1a001c94:	60a2      	str	r2, [r4, #8]
	if (ppll->msel == 0) {
1a001c96:	b34b      	cbz	r3, 1a001cec <Chip_Clock_CalcMainPLLValue+0x124>
	if (ppll->psel) {
1a001c98:	68e2      	ldr	r2, [r4, #12]
1a001c9a:	b122      	cbz	r2, 1a001ca6 <Chip_Clock_CalcMainPLLValue+0xde>
		ppll->psel --;
1a001c9c:	3a01      	subs	r2, #1
1a001c9e:	60e2      	str	r2, [r4, #12]
1a001ca0:	e001      	b.n	1a001ca6 <Chip_Clock_CalcMainPLLValue+0xde>
	if (ppll->msel == 0) {
1a001ca2:	4290      	cmp	r0, r2
1a001ca4:	d822      	bhi.n	1a001cec <Chip_Clock_CalcMainPLLValue+0x124>
	ppll->msel --;
1a001ca6:	3b01      	subs	r3, #1
1a001ca8:	6123      	str	r3, [r4, #16]
	return 0;
1a001caa:	2000      	movs	r0, #0
}
1a001cac:	b018      	add	sp, #96	; 0x60
1a001cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*ppll = pll[0];
1a001cb2:	466e      	mov	r6, sp
1a001cb4:	e7e3      	b.n	1a001c7e <Chip_Clock_CalcMainPLLValue+0xb6>
		if (diff[1] <= diff[2]) {
1a001cb6:	42af      	cmp	r7, r5
1a001cb8:	dbe0      	blt.n	1a001c7c <Chip_Clock_CalcMainPLLValue+0xb4>
1a001cba:	f10d 0820 	add.w	r8, sp, #32
			*ppll = pll[1];
1a001cbe:	4645      	mov	r5, r8
1a001cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001cc2:	4626      	mov	r6, r4
1a001cc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
1a001cc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001cca:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			return ;
1a001cce:	e7dd      	b.n	1a001c8c <Chip_Clock_CalcMainPLLValue+0xc4>
		pll_calc_divs(freq, &pll[1]);
1a001cd0:	f10d 0820 	add.w	r8, sp, #32
		pll[1].fin = ppll->fin;
1a001cd4:	6963      	ldr	r3, [r4, #20]
1a001cd6:	930d      	str	r3, [sp, #52]	; 0x34
		pll[1].ctrl = (1 << 6);
1a001cd8:	2240      	movs	r2, #64	; 0x40
		pll_calc_divs(freq, &pll[1]);
1a001cda:	4641      	mov	r1, r8
1a001cdc:	4628      	mov	r0, r5
		pll[1].ctrl = (1 << 6);
1a001cde:	9208      	str	r2, [sp, #32]
		pll_calc_divs(freq, &pll[1]);
1a001ce0:	f7ff fea4 	bl	1a001a2c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001ce6:	429d      	cmp	r5, r3
1a001ce8:	d1c0      	bne.n	1a001c6c <Chip_Clock_CalcMainPLLValue+0xa4>
1a001cea:	e7e8      	b.n	1a001cbe <Chip_Clock_CalcMainPLLValue+0xf6>
		return -1;
1a001cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001cf0:	e7dc      	b.n	1a001cac <Chip_Clock_CalcMainPLLValue+0xe4>
1a001cf2:	bf00      	nop
1a001cf4:	ff6b3a10 	.word	0xff6b3a10
1a001cf8:	0b940510 	.word	0x0b940510
1a001cfc:	094c5eff 	.word	0x094c5eff
1a001d00:	068e7780 	.word	0x068e7780

1a001d04 <Chip_Clock_GetMainPLLHz>:
{
1a001d04:	b530      	push	{r4, r5, lr}
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001d06:	4d15      	ldr	r5, [pc, #84]	; (1a001d5c <Chip_Clock_GetMainPLLHz+0x58>)
1a001d08:	6c6c      	ldr	r4, [r5, #68]	; 0x44
{
1a001d0a:	b083      	sub	sp, #12
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001d0c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001d10:	f7ff ff06 	bl	1a001b20 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001d14:	4b12      	ldr	r3, [pc, #72]	; (1a001d60 <Chip_Clock_GetMainPLLHz+0x5c>)
1a001d16:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001d18:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001d1a:	f013 0301 	ands.w	r3, r3, #1
1a001d1e:	d019      	beq.n	1a001d54 <Chip_Clock_GetMainPLLHz+0x50>
	p = ptab[psel];
1a001d20:	ab02      	add	r3, sp, #8
	psel = (PLLReg >> 8) & 0x3;
1a001d22:	f3c4 2101 	ubfx	r1, r4, #8, #2
	p = ptab[psel];
1a001d26:	4419      	add	r1, r3
	fbsel = (PLLReg >> 6) & 0x1;
1a001d28:	09a2      	lsrs	r2, r4, #6
	if (direct || fbsel) {
1a001d2a:	ea42 12d4 	orr.w	r2, r2, r4, lsr #7
	p = ptab[psel];
1a001d2e:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	nsel = (PLLReg >> 12) & 0x3;
1a001d32:	f3c4 3301 	ubfx	r3, r4, #12, #2
	msel = (PLLReg >> 16) & 0xFF;
1a001d36:	f3c4 4407 	ubfx	r4, r4, #16, #8
	n = nsel + 1;
1a001d3a:	3301      	adds	r3, #1
	m = msel + 1;
1a001d3c:	3401      	adds	r4, #1
	if (direct || fbsel) {
1a001d3e:	fbb0 f0f3 	udiv	r0, r0, r3
1a001d42:	07d3      	lsls	r3, r2, #31
	return (m / (2 * p)) * (freq / n);
1a001d44:	bf5c      	itt	pl
1a001d46:	0049      	lslpl	r1, r1, #1
1a001d48:	fbb4 f4f1 	udivpl	r4, r4, r1
1a001d4c:	fb00 f004 	mul.w	r0, r0, r4
}
1a001d50:	b003      	add	sp, #12
1a001d52:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001d54:	4618      	mov	r0, r3
}
1a001d56:	b003      	add	sp, #12
1a001d58:	bd30      	pop	{r4, r5, pc}
1a001d5a:	bf00      	nop
1a001d5c:	40050000 	.word	0x40050000
1a001d60:	08040201 	.word	0x08040201

1a001d64 <Chip_Clock_GetDivRate.isra.0>:
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
1a001d64:	b538      	push	{r3, r4, r5, lr}
1a001d66:	0083      	lsls	r3, r0, #2
1a001d68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a001d6c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a001d70:	4604      	mov	r4, r0
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001d72:	6c98      	ldr	r0, [r3, #72]	; 0x48
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001d74:	6c9d      	ldr	r5, [r3, #72]	; 0x48
	if (reg & 1) {	/* divider is powered down */
1a001d76:	07c2      	lsls	r2, r0, #31
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001d78:	bf54      	ite	pl
1a001d7a:	f3c0 6004 	ubfxpl	r0, r0, #24, #5
		return CLKINPUT_PD;
1a001d7e:	2011      	movmi	r0, #17
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001d80:	f7ff fece 	bl	1a001b20 <Chip_Clock_GetClockInputHz>
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001d84:	4b03      	ldr	r3, [pc, #12]	; (1a001d94 <Chip_Clock_GetDivRate.isra.0+0x30>)
1a001d86:	5d1b      	ldrb	r3, [r3, r4]
1a001d88:	ea03 0395 	and.w	r3, r3, r5, lsr #2
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001d8c:	3301      	adds	r3, #1
}
1a001d8e:	fbb0 f0f3 	udiv	r0, r0, r3
1a001d92:	bd38      	pop	{r3, r4, r5, pc}
1a001d94:	1a007e10 	.word	0x1a007e10

1a001d98 <Chip_Clock_GetBaseClocktHz>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001d98:	281b      	cmp	r0, #27
1a001d9a:	d809      	bhi.n	1a001db0 <Chip_Clock_GetBaseClocktHz+0x18>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001d9c:	4b06      	ldr	r3, [pc, #24]	; (1a001db8 <Chip_Clock_GetBaseClocktHz+0x20>)
1a001d9e:	0080      	lsls	r0, r0, #2
1a001da0:	4403      	add	r3, r0
1a001da2:	6858      	ldr	r0, [r3, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001da4:	07c3      	lsls	r3, r0, #31
1a001da6:	d403      	bmi.n	1a001db0 <Chip_Clock_GetBaseClocktHz+0x18>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001da8:	f3c0 6004 	ubfx	r0, r0, #24, #5
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001dac:	f7ff beb8 	b.w	1a001b20 <Chip_Clock_GetClockInputHz>
		return CLKINPUT_PD;
1a001db0:	2011      	movs	r0, #17
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001db2:	f7ff beb5 	b.w	1a001b20 <Chip_Clock_GetClockInputHz>
1a001db6:	bf00      	nop
1a001db8:	40050058 	.word	0x40050058

1a001dbc <Chip_Clock_SetBaseClock>:
{
1a001dbc:	b430      	push	{r4, r5}
1a001dbe:	0084      	lsls	r4, r0, #2
1a001dc0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001dc4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
	if (BaseClock < CLK_BASE_NONE) {
1a001dc8:	281b      	cmp	r0, #27
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001dca:	6de5      	ldr	r5, [r4, #92]	; 0x5c
	if (BaseClock < CLK_BASE_NONE) {
1a001dcc:	d80e      	bhi.n	1a001dec <Chip_Clock_SetBaseClock+0x30>
		if (Input != CLKINPUT_PD) {
1a001dce:	2911      	cmp	r1, #17
1a001dd0:	d00a      	beq.n	1a001de8 <Chip_Clock_SetBaseClock+0x2c>
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001dd2:	4809      	ldr	r0, [pc, #36]	; (1a001df8 <Chip_Clock_SetBaseClock+0x3c>)
1a001dd4:	4028      	ands	r0, r5
			if (autoblocken) {
1a001dd6:	b10a      	cbz	r2, 1a001ddc <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 11);
1a001dd8:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
			if (powerdn) {
1a001ddc:	b10b      	cbz	r3, 1a001de2 <Chip_Clock_SetBaseClock+0x26>
				reg |= (1 << 0);
1a001dde:	f040 0001 	orr.w	r0, r0, #1
			reg |= (Input << 24);
1a001de2:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001de6:	65e0      	str	r0, [r4, #92]	; 0x5c
}
1a001de8:	bc30      	pop	{r4, r5}
1a001dea:	4770      	bx	lr
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001dec:	f045 0501 	orr.w	r5, r5, #1
1a001df0:	65e5      	str	r5, [r4, #92]	; 0x5c
}
1a001df2:	bc30      	pop	{r4, r5}
1a001df4:	4770      	bx	lr
1a001df6:	bf00      	nop
1a001df8:	e0fff7fe 	.word	0xe0fff7fe

1a001dfc <Chip_Clock_EnableOpts>:
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
		reg |= (1 << 1);
1a001dfc:	2900      	cmp	r1, #0
1a001dfe:	bf0c      	ite	eq
1a001e00:	2101      	moveq	r1, #1
1a001e02:	2103      	movne	r1, #3
	}
	if (wakeupen) {
1a001e04:	b10a      	cbz	r2, 1a001e0a <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a001e06:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001e0a:	2b02      	cmp	r3, #2
		reg |= (1 << 5);
1a001e0c:	bf08      	it	eq
1a001e0e:	f041 0120 	orreq.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001e12:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001e16:	bf27      	ittee	cs
1a001e18:	f5a0 7091 	subcs.w	r0, r0, #290	; 0x122
1a001e1c:	4b02      	ldrcs	r3, [pc, #8]	; (1a001e28 <Chip_Clock_EnableOpts+0x2c>)
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001e1e:	4b03      	ldrcc	r3, [pc, #12]	; (1a001e2c <Chip_Clock_EnableOpts+0x30>)
1a001e20:	3020      	addcc	r0, #32
1a001e22:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001e26:	4770      	bx	lr
1a001e28:	40052000 	.word	0x40052000
1a001e2c:	40051000 	.word	0x40051000

1a001e30 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001e30:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001e34:	d307      	bcc.n	1a001e46 <Chip_Clock_Enable+0x16>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001e36:	4b0a      	ldr	r3, [pc, #40]	; (1a001e60 <Chip_Clock_Enable+0x30>)
1a001e38:	00c0      	lsls	r0, r0, #3
1a001e3a:	4403      	add	r3, r0
1a001e3c:	681a      	ldr	r2, [r3, #0]
1a001e3e:	f042 0201 	orr.w	r2, r2, #1
1a001e42:	601a      	str	r2, [r3, #0]
1a001e44:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001e46:	00c0      	lsls	r0, r0, #3
1a001e48:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001e4c:	f500 20a2 	add.w	r0, r0, #331776	; 0x51000
1a001e50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
1a001e54:	f043 0301 	orr.w	r3, r3, #1
1a001e58:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
	}
}
1a001e5c:	4770      	bx	lr
1a001e5e:	bf00      	nop
1a001e60:	400516f0 	.word	0x400516f0

1a001e64 <Chip_Clock_GetRate>:
{
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001e64:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001e68:	bf2b      	itete	cs
1a001e6a:	4b11      	ldrcs	r3, [pc, #68]	; (1a001eb0 <Chip_Clock_GetRate+0x4c>)
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001e6c:	4b11      	ldrcc	r3, [pc, #68]	; (1a001eb4 <Chip_Clock_GetRate+0x50>)
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001e6e:	f5a0 7291 	subcs.w	r2, r0, #290	; 0x122
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001e72:	f100 0220 	addcc.w	r2, r0, #32
{
1a001e76:	b510      	push	{r4, lr}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001e78:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001e7c:	f014 0301 	ands.w	r3, r4, #1
1a001e80:	d101      	bne.n	1a001e86 <Chip_Clock_GetRate+0x22>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001e82:	4618      	mov	r0, r3
	}

	return rate;
}
1a001e84:	bd10      	pop	{r4, pc}
1a001e86:	4b0c      	ldr	r3, [pc, #48]	; (1a001eb8 <Chip_Clock_GetRate+0x54>)
	if (reg & 1) {
1a001e88:	210a      	movs	r1, #10
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001e8a:	881a      	ldrh	r2, [r3, #0]
1a001e8c:	4282      	cmp	r2, r0
1a001e8e:	d80a      	bhi.n	1a001ea6 <Chip_Clock_GetRate+0x42>
1a001e90:	885a      	ldrh	r2, [r3, #2]
1a001e92:	4282      	cmp	r2, r0
1a001e94:	d307      	bcc.n	1a001ea6 <Chip_Clock_GetRate+0x42>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001e96:	4608      	mov	r0, r1
1a001e98:	f7ff ff7e 	bl	1a001d98 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001e9c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001ea0:	d0f0      	beq.n	1a001e84 <Chip_Clock_GetRate+0x20>
			div = 2;/* No other dividers supported */
1a001ea2:	0840      	lsrs	r0, r0, #1
}
1a001ea4:	bd10      	pop	{r4, pc}
1a001ea6:	3306      	adds	r3, #6
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001ea8:	7919      	ldrb	r1, [r3, #4]
1a001eaa:	291c      	cmp	r1, #28
1a001eac:	d1ed      	bne.n	1a001e8a <Chip_Clock_GetRate+0x26>
1a001eae:	e7f2      	b.n	1a001e96 <Chip_Clock_GetRate+0x32>
1a001eb0:	40052000 	.word	0x40052000
1a001eb4:	40051000 	.word	0x40051000
1a001eb8:	1a007e18 	.word	0x1a007e18

1a001ebc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001ebc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001ebe:	2069      	movs	r0, #105	; 0x69
1a001ec0:	f7ff ffd0 	bl	1a001e64 <Chip_Clock_GetRate>
1a001ec4:	4b01      	ldr	r3, [pc, #4]	; (1a001ecc <SystemCoreClockUpdate+0x10>)
1a001ec6:	6018      	str	r0, [r3, #0]
}
1a001ec8:	bd08      	pop	{r3, pc}
1a001eca:	bf00      	nop
1a001ecc:	10002b88 	.word	0x10002b88

1a001ed0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001ed2:	b08b      	sub	sp, #44	; 0x2c
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001ed4:	f24c 3350 	movw	r3, #50000	; 0xc350
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001ed8:	2806      	cmp	r0, #6
{
1a001eda:	4604      	mov	r4, r0
1a001edc:	460d      	mov	r5, r1
1a001ede:	4616      	mov	r6, r2
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001ee0:	9301      	str	r3, [sp, #4]
	if (clkin == CLKIN_CRYSTAL) {
1a001ee2:	f000 8090 	beq.w	1a002006 <Chip_SetupCoreClock+0x136>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001ee6:	2300      	movs	r3, #0
1a001ee8:	2201      	movs	r2, #1
1a001eea:	4621      	mov	r1, r4
1a001eec:	2004      	movs	r0, #4
1a001eee:	f7ff ff65 	bl	1a001dbc <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001ef2:	4a48      	ldr	r2, [pc, #288]	; (1a002014 <Chip_SetupCoreClock+0x144>)
1a001ef4:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001ef6:	f043 0301 	orr.w	r3, r3, #1
1a001efa:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001efc:	a902      	add	r1, sp, #8
1a001efe:	4628      	mov	r0, r5
	ppll.srcin = clkin;
1a001f00:	f88d 400c 	strb.w	r4, [sp, #12]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001f04:	f7ff fe60 	bl	1a001bc8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001f08:	4b43      	ldr	r3, [pc, #268]	; (1a002018 <Chip_SetupCoreClock+0x148>)
1a001f0a:	429d      	cmp	r5, r3
1a001f0c:	d84e      	bhi.n	1a001fac <Chip_SetupCoreClock+0xdc>
	uint32_t direct = 0, pdivide = 0;
1a001f0e:	2400      	movs	r4, #0
1a001f10:	9902      	ldr	r1, [sp, #8]
1a001f12:	9805      	ldr	r0, [sp, #20]
1a001f14:	4625      	mov	r5, r4
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001f16:	9b06      	ldr	r3, [sp, #24]
1a001f18:	f89d 700c 	ldrb.w	r7, [sp, #12]
1a001f1c:	9a04      	ldr	r2, [sp, #16]
1a001f1e:	041b      	lsls	r3, r3, #16
1a001f20:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
1a001f24:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
1a001f28:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001f2c:	430b      	orrs	r3, r1
1a001f2e:	4a39      	ldr	r2, [pc, #228]	; (1a002014 <Chip_SetupCoreClock+0x144>)
1a001f30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001f34:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001f36:	4613      	mov	r3, r2
1a001f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001f3a:	07d2      	lsls	r2, r2, #31
1a001f3c:	d5fc      	bpl.n	1a001f38 <Chip_SetupCoreClock+0x68>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001f3e:	2300      	movs	r3, #0
1a001f40:	2201      	movs	r2, #1
1a001f42:	2109      	movs	r1, #9
1a001f44:	2004      	movs	r0, #4
1a001f46:	f7ff ff39 	bl	1a001dbc <Chip_Clock_SetBaseClock>

	if (direct) {
1a001f4a:	2d00      	cmp	r5, #0
1a001f4c:	d033      	beq.n	1a001fb6 <Chip_SetupCoreClock+0xe6>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001f4e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001f52:	9301      	str	r3, [sp, #4]
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001f54:	9b01      	ldr	r3, [sp, #4]
1a001f56:	1e5a      	subs	r2, r3, #1
1a001f58:	9201      	str	r2, [sp, #4]
1a001f5a:	2b00      	cmp	r3, #0
1a001f5c:	d1fa      	bne.n	1a001f54 <Chip_SetupCoreClock+0x84>
		ppll.ctrl |= 1 << 7;
1a001f5e:	9a02      	ldr	r2, [sp, #8]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001f60:	9b05      	ldr	r3, [sp, #20]
1a001f62:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001f66:	9806      	ldr	r0, [sp, #24]
1a001f68:	9904      	ldr	r1, [sp, #16]
1a001f6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001f6e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
1a001f72:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
1a001f76:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a001f7a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001f7e:	4925      	ldr	r1, [pc, #148]	; (1a002014 <Chip_SetupCoreClock+0x144>)
1a001f80:	9202      	str	r2, [sp, #8]
1a001f82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001f86:	644b      	str	r3, [r1, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001f88:	b176      	cbz	r6, 1a001fa8 <Chip_SetupCoreClock+0xd8>
1a001f8a:	4c24      	ldr	r4, [pc, #144]	; (1a00201c <Chip_SetupCoreClock+0x14c>)
1a001f8c:	2101      	movs	r1, #1
1a001f8e:	f104 0544 	add.w	r5, r4, #68	; 0x44
1a001f92:	2000      	movs	r0, #0
1a001f94:	e002      	b.n	1a001f9c <Chip_SetupCoreClock+0xcc>
1a001f96:	7920      	ldrb	r0, [r4, #4]
1a001f98:	7961      	ldrb	r1, [r4, #5]
1a001f9a:	3404      	adds	r4, #4
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001f9c:	78e3      	ldrb	r3, [r4, #3]
1a001f9e:	78a2      	ldrb	r2, [r4, #2]
1a001fa0:	f7ff ff0c 	bl	1a001dbc <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001fa4:	42a5      	cmp	r5, r4
1a001fa6:	d1f6      	bne.n	1a001f96 <Chip_SetupCoreClock+0xc6>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001fa8:	b00b      	add	sp, #44	; 0x2c
1a001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ppll.ctrl & (1 << 6)) {
1a001fac:	9902      	ldr	r1, [sp, #8]
1a001fae:	f011 0440 	ands.w	r4, r1, #64	; 0x40
1a001fb2:	d01f      	beq.n	1a001ff4 <Chip_SetupCoreClock+0x124>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001fb4:	e7fe      	b.n	1a001fb4 <Chip_SetupCoreClock+0xe4>
	} else if (pdivide) {
1a001fb6:	2c00      	cmp	r4, #0
1a001fb8:	d0e6      	beq.n	1a001f88 <Chip_SetupCoreClock+0xb8>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001fba:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001fbe:	9301      	str	r3, [sp, #4]
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001fc0:	9b01      	ldr	r3, [sp, #4]
1a001fc2:	1e5a      	subs	r2, r3, #1
1a001fc4:	9201      	str	r2, [sp, #4]
1a001fc6:	2b00      	cmp	r3, #0
1a001fc8:	d1fa      	bne.n	1a001fc0 <Chip_SetupCoreClock+0xf0>
		ppll.psel--;
1a001fca:	9a05      	ldr	r2, [sp, #20]
1a001fcc:	9b02      	ldr	r3, [sp, #8]
1a001fce:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001fd2:	9806      	ldr	r0, [sp, #24]
1a001fd4:	9904      	ldr	r1, [sp, #16]
1a001fd6:	3a01      	subs	r2, #1
1a001fd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001fdc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
1a001fe0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a001fe4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001fe8:	490a      	ldr	r1, [pc, #40]	; (1a002014 <Chip_SetupCoreClock+0x144>)
1a001fea:	9205      	str	r2, [sp, #20]
1a001fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001ff0:	644b      	str	r3, [r1, #68]	; 0x44
1a001ff2:	e7c9      	b.n	1a001f88 <Chip_SetupCoreClock+0xb8>
		} else if (ppll.ctrl & (1 << 7)){
1a001ff4:	f011 0580 	ands.w	r5, r1, #128	; 0x80
1a001ff8:	9805      	ldr	r0, [sp, #20]
1a001ffa:	d007      	beq.n	1a00200c <Chip_SetupCoreClock+0x13c>
			ppll.ctrl &= ~(1 << 7);
1a001ffc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
1a002000:	9102      	str	r1, [sp, #8]
			direct = 1;
1a002002:	2501      	movs	r5, #1
1a002004:	e787      	b.n	1a001f16 <Chip_SetupCoreClock+0x46>
		Chip_Clock_EnableCrystal();
1a002006:	f7ff fd67 	bl	1a001ad8 <Chip_Clock_EnableCrystal>
1a00200a:	e76c      	b.n	1a001ee6 <Chip_SetupCoreClock+0x16>
			ppll.psel++;
1a00200c:	3001      	adds	r0, #1
1a00200e:	9005      	str	r0, [sp, #20]
			pdivide = 1;
1a002010:	2401      	movs	r4, #1
1a002012:	e780      	b.n	1a001f16 <Chip_SetupCoreClock+0x46>
1a002014:	40050000 	.word	0x40050000
1a002018:	068e7780 	.word	0x068e7780
1a00201c:	1a007e84 	.word	0x1a007e84

1a002020 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002020:	4770      	bx	lr
1a002022:	bf00      	nop

1a002024 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (pSSP == LPC_SSP1) {
1a002026:	4b14      	ldr	r3, [pc, #80]	; (1a002078 <Chip_SSP_SetBitRate+0x54>)
{
1a002028:	4607      	mov	r7, r0
		clkSSP = CLK_APB0_SSP0;
1a00202a:	f240 2002 	movw	r0, #514	; 0x202
{
1a00202e:	460e      	mov	r6, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002030:	429f      	cmp	r7, r3
1a002032:	bf08      	it	eq
1a002034:	f44f 70f1 	moveq.w	r0, #482	; 0x1e2
1a002038:	f7ff ff14 	bl	1a001e64 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00203c:	1c73      	adds	r3, r6, #1
1a00203e:	d018      	beq.n	1a002072 <Chip_SSP_SetBitRate+0x4e>
	prescale = 2;
1a002040:	2502      	movs	r5, #2
	cr0_div = 0;
1a002042:	2200      	movs	r2, #0
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002044:	1c54      	adds	r4, r2, #1
1a002046:	fb05 f304 	mul.w	r3, r5, r4
1a00204a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00204e:	429e      	cmp	r6, r3
1a002050:	d308      	bcc.n	1a002064 <Chip_SSP_SetBitRate+0x40>
1a002052:	0212      	lsls	r2, r2, #8
1a002054:	b292      	uxth	r2, r2
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002056:	683b      	ldr	r3, [r7, #0]
1a002058:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00205c:	431a      	orrs	r2, r3
1a00205e:	603a      	str	r2, [r7, #0]
	pSSP->CPSR = prescale;
1a002060:	613d      	str	r5, [r7, #16]
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
}
1a002062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (cr0_div > 0xFF) {
1a002064:	2cff      	cmp	r4, #255	; 0xff
1a002066:	d902      	bls.n	1a00206e <Chip_SSP_SetBitRate+0x4a>
				prescale += 2;
1a002068:	3502      	adds	r5, #2
				cr0_div = 0;
1a00206a:	2200      	movs	r2, #0
1a00206c:	e7ea      	b.n	1a002044 <Chip_SSP_SetBitRate+0x20>
1a00206e:	4622      	mov	r2, r4
1a002070:	e7e8      	b.n	1a002044 <Chip_SSP_SetBitRate+0x20>
	while (cmp_clk > bitRate) {
1a002072:	2200      	movs	r2, #0
	prescale = 2;
1a002074:	2502      	movs	r5, #2
1a002076:	e7ee      	b.n	1a002056 <Chip_SSP_SetBitRate+0x32>
1a002078:	400c5000 	.word	0x400c5000

1a00207c <Chip_SSP_Init>:
	if (pSSP == LPC_SSP1) {
1a00207c:	4b10      	ldr	r3, [pc, #64]	; (1a0020c0 <Chip_SSP_Init+0x44>)
1a00207e:	4298      	cmp	r0, r3

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002080:	b510      	push	{r4, lr}
1a002082:	4604      	mov	r4, r0
	if (pSSP == LPC_SSP1) {
1a002084:	d016      	beq.n	1a0020b4 <Chip_SSP_Init+0x38>
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002086:	2083      	movs	r0, #131	; 0x83
1a002088:	f7ff fed2 	bl	1a001e30 <Chip_Clock_Enable>
		clkSSP = CLK_APB0_SSP0;
1a00208c:	f240 2002 	movw	r0, #514	; 0x202
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002090:	f7ff fece 	bl	1a001e30 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002094:	6863      	ldr	r3, [r4, #4]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002096:	490b      	ldr	r1, [pc, #44]	; (1a0020c4 <Chip_SSP_Init+0x48>)
1a002098:	f023 0304 	bic.w	r3, r3, #4
1a00209c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00209e:	6823      	ldr	r3, [r4, #0]
1a0020a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0020a4:	f043 0307 	orr.w	r3, r3, #7
1a0020a8:	6023      	str	r3, [r4, #0]
1a0020aa:	4620      	mov	r0, r4
}
1a0020ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0020b0:	f7ff bfb8 	b.w	1a002024 <Chip_SSP_SetBitRate>
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0020b4:	20a5      	movs	r0, #165	; 0xa5
1a0020b6:	f7ff febb 	bl	1a001e30 <Chip_Clock_Enable>
		clkSSP = CLK_APB2_SSP1;
1a0020ba:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0020be:	e7e7      	b.n	1a002090 <Chip_SSP_Init+0x14>
1a0020c0:	400c5000 	.word	0x400c5000
1a0020c4:	000186a0 	.word	0x000186a0

1a0020c8 <SystemInit>:
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0020c8:	4a0a      	ldr	r2, [pc, #40]	; (1a0020f4 <SystemInit+0x2c>)
1a0020ca:	490b      	ldr	r1, [pc, #44]	; (1a0020f8 <SystemInit+0x30>)
{
1a0020cc:	b508      	push	{r3, lr}
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0020ce:	4b0b      	ldr	r3, [pc, #44]	; (1a0020fc <SystemInit+0x34>)
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0020d0:	6091      	str	r1, [r2, #8]
1a0020d2:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0020d4:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0020d8:	2b20      	cmp	r3, #32
1a0020da:	d105      	bne.n	1a0020e8 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0020dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0020e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0020e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a0020e8:	f7ff fb26 	bl	1a001738 <Board_SystemInit>
   Board_Init();
#endif
}
1a0020ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Board_Init();
1a0020f0:	f7ff ba46 	b.w	1a001580 <Board_Init>
1a0020f4:	e000ed00 	.word	0xe000ed00
1a0020f8:	1a000000 	.word	0x1a000000
1a0020fc:	e000ef30 	.word	0xe000ef30

1a002100 <gpioToggle>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a002100:	1c83      	adds	r3, r0, #2
1a002102:	b2db      	uxtb	r3, r3
1a002104:	2b01      	cmp	r3, #1
1a002106:	d915      	bls.n	1a002134 <gpioToggle+0x34>
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002108:	490b      	ldr	r1, [pc, #44]	; (1a002138 <gpioToggle+0x38>)
	return (bool) pGPIO->B[port][pin];
1a00210a:	4a0c      	ldr	r2, [pc, #48]	; (1a00213c <gpioToggle+0x3c>)
1a00210c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002110:	4401      	add	r1, r0
{
1a002112:	b430      	push	{r4, r5}
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002114:	f991 3003 	ldrsb.w	r3, [r1, #3]
1a002118:	790c      	ldrb	r4, [r1, #4]
1a00211a:	eb02 1543 	add.w	r5, r2, r3, lsl #5
	pGPIO->B[port][pin] = setting;
1a00211e:	b2d9      	uxtb	r1, r3
	return (bool) pGPIO->B[port][pin];
1a002120:	5d2b      	ldrb	r3, [r5, r4]
	pGPIO->B[port][pin] = setting;
1a002122:	eb02 1241 	add.w	r2, r2, r1, lsl #5
1a002126:	fab3 f383 	clz	r3, r3
1a00212a:	095b      	lsrs	r3, r3, #5
1a00212c:	5513      	strb	r3, [r2, r4]
   return ret_val;
1a00212e:	2001      	movs	r0, #1
}
1a002130:	bc30      	pop	{r4, r5}
1a002132:	4770      	bx	lr
	  return FALSE;
1a002134:	2000      	movs	r0, #0
}
1a002136:	4770      	bx	lr
1a002138:	1a007ecc 	.word	0x1a007ecc
1a00213c:	400f4000 	.word	0x400f4000

1a002140 <USB0_IRQHandler>:
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
   USBD_API->hw->ISR(g_hUsb);
1a002140:	4b03      	ldr	r3, [pc, #12]	; (1a002150 <USB0_IRQHandler+0x10>)
1a002142:	4a04      	ldr	r2, [pc, #16]	; (1a002154 <USB0_IRQHandler+0x14>)
1a002144:	681b      	ldr	r3, [r3, #0]
1a002146:	6810      	ldr	r0, [r2, #0]
1a002148:	681b      	ldr	r3, [r3, #0]
1a00214a:	68db      	ldr	r3, [r3, #12]
1a00214c:	4718      	bx	r3
1a00214e:	bf00      	nop
1a002150:	10002b8c 	.word	0x10002b8c
1a002154:	10002b3c 	.word	0x10002b3c

1a002158 <__aeabi_drsub>:
1a002158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a00215c:	e002      	b.n	1a002164 <__adddf3>
1a00215e:	bf00      	nop

1a002160 <__aeabi_dsub>:
1a002160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002164 <__adddf3>:
1a002164:	b530      	push	{r4, r5, lr}
1a002166:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00216a:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00216e:	ea94 0f05 	teq	r4, r5
1a002172:	bf08      	it	eq
1a002174:	ea90 0f02 	teqeq	r0, r2
1a002178:	bf1f      	itttt	ne
1a00217a:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00217e:	ea55 0c02 	orrsne.w	ip, r5, r2
1a002182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a002186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00218a:	f000 80e2 	beq.w	1a002352 <__adddf3+0x1ee>
1a00218e:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a002192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a002196:	bfb8      	it	lt
1a002198:	426d      	neglt	r5, r5
1a00219a:	dd0c      	ble.n	1a0021b6 <__adddf3+0x52>
1a00219c:	442c      	add	r4, r5
1a00219e:	ea80 0202 	eor.w	r2, r0, r2
1a0021a2:	ea81 0303 	eor.w	r3, r1, r3
1a0021a6:	ea82 0000 	eor.w	r0, r2, r0
1a0021aa:	ea83 0101 	eor.w	r1, r3, r1
1a0021ae:	ea80 0202 	eor.w	r2, r0, r2
1a0021b2:	ea81 0303 	eor.w	r3, r1, r3
1a0021b6:	2d36      	cmp	r5, #54	; 0x36
1a0021b8:	bf88      	it	hi
1a0021ba:	bd30      	pophi	{r4, r5, pc}
1a0021bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0021c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0021c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0021c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0021cc:	d002      	beq.n	1a0021d4 <__adddf3+0x70>
1a0021ce:	4240      	negs	r0, r0
1a0021d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0021d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a0021d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0021dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0021e0:	d002      	beq.n	1a0021e8 <__adddf3+0x84>
1a0021e2:	4252      	negs	r2, r2
1a0021e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0021e8:	ea94 0f05 	teq	r4, r5
1a0021ec:	f000 80a7 	beq.w	1a00233e <__adddf3+0x1da>
1a0021f0:	f1a4 0401 	sub.w	r4, r4, #1
1a0021f4:	f1d5 0e20 	rsbs	lr, r5, #32
1a0021f8:	db0d      	blt.n	1a002216 <__adddf3+0xb2>
1a0021fa:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0021fe:	fa22 f205 	lsr.w	r2, r2, r5
1a002202:	1880      	adds	r0, r0, r2
1a002204:	f141 0100 	adc.w	r1, r1, #0
1a002208:	fa03 f20e 	lsl.w	r2, r3, lr
1a00220c:	1880      	adds	r0, r0, r2
1a00220e:	fa43 f305 	asr.w	r3, r3, r5
1a002212:	4159      	adcs	r1, r3
1a002214:	e00e      	b.n	1a002234 <__adddf3+0xd0>
1a002216:	f1a5 0520 	sub.w	r5, r5, #32
1a00221a:	f10e 0e20 	add.w	lr, lr, #32
1a00221e:	2a01      	cmp	r2, #1
1a002220:	fa03 fc0e 	lsl.w	ip, r3, lr
1a002224:	bf28      	it	cs
1a002226:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00222a:	fa43 f305 	asr.w	r3, r3, r5
1a00222e:	18c0      	adds	r0, r0, r3
1a002230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a002234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002238:	d507      	bpl.n	1a00224a <__adddf3+0xe6>
1a00223a:	f04f 0e00 	mov.w	lr, #0
1a00223e:	f1dc 0c00 	rsbs	ip, ip, #0
1a002242:	eb7e 0000 	sbcs.w	r0, lr, r0
1a002246:	eb6e 0101 	sbc.w	r1, lr, r1
1a00224a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00224e:	d31b      	bcc.n	1a002288 <__adddf3+0x124>
1a002250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002254:	d30c      	bcc.n	1a002270 <__adddf3+0x10c>
1a002256:	0849      	lsrs	r1, r1, #1
1a002258:	ea5f 0030 	movs.w	r0, r0, rrx
1a00225c:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a002260:	f104 0401 	add.w	r4, r4, #1
1a002264:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a002268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a00226c:	f080 809a 	bcs.w	1a0023a4 <__adddf3+0x240>
1a002270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002274:	bf08      	it	eq
1a002276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00227a:	f150 0000 	adcs.w	r0, r0, #0
1a00227e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002282:	ea41 0105 	orr.w	r1, r1, r5
1a002286:	bd30      	pop	{r4, r5, pc}
1a002288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a00228c:	4140      	adcs	r0, r0
1a00228e:	eb41 0101 	adc.w	r1, r1, r1
1a002292:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002296:	f1a4 0401 	sub.w	r4, r4, #1
1a00229a:	d1e9      	bne.n	1a002270 <__adddf3+0x10c>
1a00229c:	f091 0f00 	teq	r1, #0
1a0022a0:	bf04      	itt	eq
1a0022a2:	4601      	moveq	r1, r0
1a0022a4:	2000      	moveq	r0, #0
1a0022a6:	fab1 f381 	clz	r3, r1
1a0022aa:	bf08      	it	eq
1a0022ac:	3320      	addeq	r3, #32
1a0022ae:	f1a3 030b 	sub.w	r3, r3, #11
1a0022b2:	f1b3 0220 	subs.w	r2, r3, #32
1a0022b6:	da0c      	bge.n	1a0022d2 <__adddf3+0x16e>
1a0022b8:	320c      	adds	r2, #12
1a0022ba:	dd08      	ble.n	1a0022ce <__adddf3+0x16a>
1a0022bc:	f102 0c14 	add.w	ip, r2, #20
1a0022c0:	f1c2 020c 	rsb	r2, r2, #12
1a0022c4:	fa01 f00c 	lsl.w	r0, r1, ip
1a0022c8:	fa21 f102 	lsr.w	r1, r1, r2
1a0022cc:	e00c      	b.n	1a0022e8 <__adddf3+0x184>
1a0022ce:	f102 0214 	add.w	r2, r2, #20
1a0022d2:	bfd8      	it	le
1a0022d4:	f1c2 0c20 	rsble	ip, r2, #32
1a0022d8:	fa01 f102 	lsl.w	r1, r1, r2
1a0022dc:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0022e0:	bfdc      	itt	le
1a0022e2:	ea41 010c 	orrle.w	r1, r1, ip
1a0022e6:	4090      	lslle	r0, r2
1a0022e8:	1ae4      	subs	r4, r4, r3
1a0022ea:	bfa2      	ittt	ge
1a0022ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0022f0:	4329      	orrge	r1, r5
1a0022f2:	bd30      	popge	{r4, r5, pc}
1a0022f4:	ea6f 0404 	mvn.w	r4, r4
1a0022f8:	3c1f      	subs	r4, #31
1a0022fa:	da1c      	bge.n	1a002336 <__adddf3+0x1d2>
1a0022fc:	340c      	adds	r4, #12
1a0022fe:	dc0e      	bgt.n	1a00231e <__adddf3+0x1ba>
1a002300:	f104 0414 	add.w	r4, r4, #20
1a002304:	f1c4 0220 	rsb	r2, r4, #32
1a002308:	fa20 f004 	lsr.w	r0, r0, r4
1a00230c:	fa01 f302 	lsl.w	r3, r1, r2
1a002310:	ea40 0003 	orr.w	r0, r0, r3
1a002314:	fa21 f304 	lsr.w	r3, r1, r4
1a002318:	ea45 0103 	orr.w	r1, r5, r3
1a00231c:	bd30      	pop	{r4, r5, pc}
1a00231e:	f1c4 040c 	rsb	r4, r4, #12
1a002322:	f1c4 0220 	rsb	r2, r4, #32
1a002326:	fa20 f002 	lsr.w	r0, r0, r2
1a00232a:	fa01 f304 	lsl.w	r3, r1, r4
1a00232e:	ea40 0003 	orr.w	r0, r0, r3
1a002332:	4629      	mov	r1, r5
1a002334:	bd30      	pop	{r4, r5, pc}
1a002336:	fa21 f004 	lsr.w	r0, r1, r4
1a00233a:	4629      	mov	r1, r5
1a00233c:	bd30      	pop	{r4, r5, pc}
1a00233e:	f094 0f00 	teq	r4, #0
1a002342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a002346:	bf06      	itte	eq
1a002348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a00234c:	3401      	addeq	r4, #1
1a00234e:	3d01      	subne	r5, #1
1a002350:	e74e      	b.n	1a0021f0 <__adddf3+0x8c>
1a002352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002356:	bf18      	it	ne
1a002358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00235c:	d029      	beq.n	1a0023b2 <__adddf3+0x24e>
1a00235e:	ea94 0f05 	teq	r4, r5
1a002362:	bf08      	it	eq
1a002364:	ea90 0f02 	teqeq	r0, r2
1a002368:	d005      	beq.n	1a002376 <__adddf3+0x212>
1a00236a:	ea54 0c00 	orrs.w	ip, r4, r0
1a00236e:	bf04      	itt	eq
1a002370:	4619      	moveq	r1, r3
1a002372:	4610      	moveq	r0, r2
1a002374:	bd30      	pop	{r4, r5, pc}
1a002376:	ea91 0f03 	teq	r1, r3
1a00237a:	bf1e      	ittt	ne
1a00237c:	2100      	movne	r1, #0
1a00237e:	2000      	movne	r0, #0
1a002380:	bd30      	popne	{r4, r5, pc}
1a002382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a002386:	d105      	bne.n	1a002394 <__adddf3+0x230>
1a002388:	0040      	lsls	r0, r0, #1
1a00238a:	4149      	adcs	r1, r1
1a00238c:	bf28      	it	cs
1a00238e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a002392:	bd30      	pop	{r4, r5, pc}
1a002394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a002398:	bf3c      	itt	cc
1a00239a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a00239e:	bd30      	popcc	{r4, r5, pc}
1a0023a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0023a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0023a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0023ac:	f04f 0000 	mov.w	r0, #0
1a0023b0:	bd30      	pop	{r4, r5, pc}
1a0023b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0023b6:	bf1a      	itte	ne
1a0023b8:	4619      	movne	r1, r3
1a0023ba:	4610      	movne	r0, r2
1a0023bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0023c0:	bf1c      	itt	ne
1a0023c2:	460b      	movne	r3, r1
1a0023c4:	4602      	movne	r2, r0
1a0023c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0023ca:	bf06      	itte	eq
1a0023cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a0023d0:	ea91 0f03 	teqeq	r1, r3
1a0023d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a0023d8:	bd30      	pop	{r4, r5, pc}
1a0023da:	bf00      	nop

1a0023dc <__aeabi_ui2d>:
1a0023dc:	f090 0f00 	teq	r0, #0
1a0023e0:	bf04      	itt	eq
1a0023e2:	2100      	moveq	r1, #0
1a0023e4:	4770      	bxeq	lr
1a0023e6:	b530      	push	{r4, r5, lr}
1a0023e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0023ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0023f0:	f04f 0500 	mov.w	r5, #0
1a0023f4:	f04f 0100 	mov.w	r1, #0
1a0023f8:	e750      	b.n	1a00229c <__adddf3+0x138>
1a0023fa:	bf00      	nop

1a0023fc <__aeabi_i2d>:
1a0023fc:	f090 0f00 	teq	r0, #0
1a002400:	bf04      	itt	eq
1a002402:	2100      	moveq	r1, #0
1a002404:	4770      	bxeq	lr
1a002406:	b530      	push	{r4, r5, lr}
1a002408:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00240c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002414:	bf48      	it	mi
1a002416:	4240      	negmi	r0, r0
1a002418:	f04f 0100 	mov.w	r1, #0
1a00241c:	e73e      	b.n	1a00229c <__adddf3+0x138>
1a00241e:	bf00      	nop

1a002420 <__aeabi_f2d>:
1a002420:	0042      	lsls	r2, r0, #1
1a002422:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002426:	ea4f 0131 	mov.w	r1, r1, rrx
1a00242a:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a00242e:	bf1f      	itttt	ne
1a002430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a00243c:	4770      	bxne	lr
1a00243e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a002442:	bf08      	it	eq
1a002444:	4770      	bxeq	lr
1a002446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00244a:	bf04      	itt	eq
1a00244c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a002450:	4770      	bxeq	lr
1a002452:	b530      	push	{r4, r5, lr}
1a002454:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00245c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002460:	e71c      	b.n	1a00229c <__adddf3+0x138>
1a002462:	bf00      	nop

1a002464 <__aeabi_ul2d>:
1a002464:	ea50 0201 	orrs.w	r2, r0, r1
1a002468:	bf08      	it	eq
1a00246a:	4770      	bxeq	lr
1a00246c:	b530      	push	{r4, r5, lr}
1a00246e:	f04f 0500 	mov.w	r5, #0
1a002472:	e00a      	b.n	1a00248a <__aeabi_l2d+0x16>

1a002474 <__aeabi_l2d>:
1a002474:	ea50 0201 	orrs.w	r2, r0, r1
1a002478:	bf08      	it	eq
1a00247a:	4770      	bxeq	lr
1a00247c:	b530      	push	{r4, r5, lr}
1a00247e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002482:	d502      	bpl.n	1a00248a <__aeabi_l2d+0x16>
1a002484:	4240      	negs	r0, r0
1a002486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00248a:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00248e:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a002496:	f43f aed8 	beq.w	1a00224a <__adddf3+0xe6>
1a00249a:	f04f 0203 	mov.w	r2, #3
1a00249e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0024a2:	bf18      	it	ne
1a0024a4:	3203      	addne	r2, #3
1a0024a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0024aa:	bf18      	it	ne
1a0024ac:	3203      	addne	r2, #3
1a0024ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0024b2:	f1c2 0320 	rsb	r3, r2, #32
1a0024b6:	fa00 fc03 	lsl.w	ip, r0, r3
1a0024ba:	fa20 f002 	lsr.w	r0, r0, r2
1a0024be:	fa01 fe03 	lsl.w	lr, r1, r3
1a0024c2:	ea40 000e 	orr.w	r0, r0, lr
1a0024c6:	fa21 f102 	lsr.w	r1, r1, r2
1a0024ca:	4414      	add	r4, r2
1a0024cc:	e6bd      	b.n	1a00224a <__adddf3+0xe6>
1a0024ce:	bf00      	nop

1a0024d0 <__aeabi_dmul>:
1a0024d0:	b570      	push	{r4, r5, r6, lr}
1a0024d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0024d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0024da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0024de:	bf1d      	ittte	ne
1a0024e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0024e4:	ea94 0f0c 	teqne	r4, ip
1a0024e8:	ea95 0f0c 	teqne	r5, ip
1a0024ec:	f000 f8de 	bleq	1a0026ac <__aeabi_dmul+0x1dc>
1a0024f0:	442c      	add	r4, r5
1a0024f2:	ea81 0603 	eor.w	r6, r1, r3
1a0024f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a0024fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a0024fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002502:	bf18      	it	ne
1a002504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00250c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002510:	d038      	beq.n	1a002584 <__aeabi_dmul+0xb4>
1a002512:	fba0 ce02 	umull	ip, lr, r0, r2
1a002516:	f04f 0500 	mov.w	r5, #0
1a00251a:	fbe1 e502 	umlal	lr, r5, r1, r2
1a00251e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002522:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002526:	f04f 0600 	mov.w	r6, #0
1a00252a:	fbe1 5603 	umlal	r5, r6, r1, r3
1a00252e:	f09c 0f00 	teq	ip, #0
1a002532:	bf18      	it	ne
1a002534:	f04e 0e01 	orrne.w	lr, lr, #1
1a002538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a00253c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002544:	d204      	bcs.n	1a002550 <__aeabi_dmul+0x80>
1a002546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00254a:	416d      	adcs	r5, r5
1a00254c:	eb46 0606 	adc.w	r6, r6, r6
1a002550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a00255c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002568:	bf88      	it	hi
1a00256a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a00256e:	d81e      	bhi.n	1a0025ae <__aeabi_dmul+0xde>
1a002570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002574:	bf08      	it	eq
1a002576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a00257a:	f150 0000 	adcs.w	r0, r0, #0
1a00257e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002582:	bd70      	pop	{r4, r5, r6, pc}
1a002584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002588:	ea46 0101 	orr.w	r1, r6, r1
1a00258c:	ea40 0002 	orr.w	r0, r0, r2
1a002590:	ea81 0103 	eor.w	r1, r1, r3
1a002594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002598:	bfc2      	ittt	gt
1a00259a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00259e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0025a2:	bd70      	popgt	{r4, r5, r6, pc}
1a0025a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0025a8:	f04f 0e00 	mov.w	lr, #0
1a0025ac:	3c01      	subs	r4, #1
1a0025ae:	f300 80ab 	bgt.w	1a002708 <__aeabi_dmul+0x238>
1a0025b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a0025b6:	bfde      	ittt	le
1a0025b8:	2000      	movle	r0, #0
1a0025ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a0025be:	bd70      	pople	{r4, r5, r6, pc}
1a0025c0:	f1c4 0400 	rsb	r4, r4, #0
1a0025c4:	3c20      	subs	r4, #32
1a0025c6:	da35      	bge.n	1a002634 <__aeabi_dmul+0x164>
1a0025c8:	340c      	adds	r4, #12
1a0025ca:	dc1b      	bgt.n	1a002604 <__aeabi_dmul+0x134>
1a0025cc:	f104 0414 	add.w	r4, r4, #20
1a0025d0:	f1c4 0520 	rsb	r5, r4, #32
1a0025d4:	fa00 f305 	lsl.w	r3, r0, r5
1a0025d8:	fa20 f004 	lsr.w	r0, r0, r4
1a0025dc:	fa01 f205 	lsl.w	r2, r1, r5
1a0025e0:	ea40 0002 	orr.w	r0, r0, r2
1a0025e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a0025e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0025ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0025f0:	fa21 f604 	lsr.w	r6, r1, r4
1a0025f4:	eb42 0106 	adc.w	r1, r2, r6
1a0025f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0025fc:	bf08      	it	eq
1a0025fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002602:	bd70      	pop	{r4, r5, r6, pc}
1a002604:	f1c4 040c 	rsb	r4, r4, #12
1a002608:	f1c4 0520 	rsb	r5, r4, #32
1a00260c:	fa00 f304 	lsl.w	r3, r0, r4
1a002610:	fa20 f005 	lsr.w	r0, r0, r5
1a002614:	fa01 f204 	lsl.w	r2, r1, r4
1a002618:	ea40 0002 	orr.w	r0, r0, r2
1a00261c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002624:	f141 0100 	adc.w	r1, r1, #0
1a002628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00262c:	bf08      	it	eq
1a00262e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002632:	bd70      	pop	{r4, r5, r6, pc}
1a002634:	f1c4 0520 	rsb	r5, r4, #32
1a002638:	fa00 f205 	lsl.w	r2, r0, r5
1a00263c:	ea4e 0e02 	orr.w	lr, lr, r2
1a002640:	fa20 f304 	lsr.w	r3, r0, r4
1a002644:	fa01 f205 	lsl.w	r2, r1, r5
1a002648:	ea43 0302 	orr.w	r3, r3, r2
1a00264c:	fa21 f004 	lsr.w	r0, r1, r4
1a002650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002654:	fa21 f204 	lsr.w	r2, r1, r4
1a002658:	ea20 0002 	bic.w	r0, r0, r2
1a00265c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002664:	bf08      	it	eq
1a002666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00266a:	bd70      	pop	{r4, r5, r6, pc}
1a00266c:	f094 0f00 	teq	r4, #0
1a002670:	d10f      	bne.n	1a002692 <__aeabi_dmul+0x1c2>
1a002672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a002676:	0040      	lsls	r0, r0, #1
1a002678:	eb41 0101 	adc.w	r1, r1, r1
1a00267c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002680:	bf08      	it	eq
1a002682:	3c01      	subeq	r4, #1
1a002684:	d0f7      	beq.n	1a002676 <__aeabi_dmul+0x1a6>
1a002686:	ea41 0106 	orr.w	r1, r1, r6
1a00268a:	f095 0f00 	teq	r5, #0
1a00268e:	bf18      	it	ne
1a002690:	4770      	bxne	lr
1a002692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a002696:	0052      	lsls	r2, r2, #1
1a002698:	eb43 0303 	adc.w	r3, r3, r3
1a00269c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a0026a0:	bf08      	it	eq
1a0026a2:	3d01      	subeq	r5, #1
1a0026a4:	d0f7      	beq.n	1a002696 <__aeabi_dmul+0x1c6>
1a0026a6:	ea43 0306 	orr.w	r3, r3, r6
1a0026aa:	4770      	bx	lr
1a0026ac:	ea94 0f0c 	teq	r4, ip
1a0026b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0026b4:	bf18      	it	ne
1a0026b6:	ea95 0f0c 	teqne	r5, ip
1a0026ba:	d00c      	beq.n	1a0026d6 <__aeabi_dmul+0x206>
1a0026bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0026c0:	bf18      	it	ne
1a0026c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0026c6:	d1d1      	bne.n	1a00266c <__aeabi_dmul+0x19c>
1a0026c8:	ea81 0103 	eor.w	r1, r1, r3
1a0026cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0026d0:	f04f 0000 	mov.w	r0, #0
1a0026d4:	bd70      	pop	{r4, r5, r6, pc}
1a0026d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0026da:	bf06      	itte	eq
1a0026dc:	4610      	moveq	r0, r2
1a0026de:	4619      	moveq	r1, r3
1a0026e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0026e4:	d019      	beq.n	1a00271a <__aeabi_dmul+0x24a>
1a0026e6:	ea94 0f0c 	teq	r4, ip
1a0026ea:	d102      	bne.n	1a0026f2 <__aeabi_dmul+0x222>
1a0026ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a0026f0:	d113      	bne.n	1a00271a <__aeabi_dmul+0x24a>
1a0026f2:	ea95 0f0c 	teq	r5, ip
1a0026f6:	d105      	bne.n	1a002704 <__aeabi_dmul+0x234>
1a0026f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a0026fc:	bf1c      	itt	ne
1a0026fe:	4610      	movne	r0, r2
1a002700:	4619      	movne	r1, r3
1a002702:	d10a      	bne.n	1a00271a <__aeabi_dmul+0x24a>
1a002704:	ea81 0103 	eor.w	r1, r1, r3
1a002708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a00270c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002714:	f04f 0000 	mov.w	r0, #0
1a002718:	bd70      	pop	{r4, r5, r6, pc}
1a00271a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a00271e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002722:	bd70      	pop	{r4, r5, r6, pc}

1a002724 <__aeabi_ddiv>:
1a002724:	b570      	push	{r4, r5, r6, lr}
1a002726:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00272a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00272e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002732:	bf1d      	ittte	ne
1a002734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002738:	ea94 0f0c 	teqne	r4, ip
1a00273c:	ea95 0f0c 	teqne	r5, ip
1a002740:	f000 f8a7 	bleq	1a002892 <__aeabi_ddiv+0x16e>
1a002744:	eba4 0405 	sub.w	r4, r4, r5
1a002748:	ea81 0e03 	eor.w	lr, r1, r3
1a00274c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002750:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002754:	f000 8088 	beq.w	1a002868 <__aeabi_ddiv+0x144>
1a002758:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00275c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002768:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a00276c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002774:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a00277c:	429d      	cmp	r5, r3
1a00277e:	bf08      	it	eq
1a002780:	4296      	cmpeq	r6, r2
1a002782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002786:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a00278a:	d202      	bcs.n	1a002792 <__aeabi_ddiv+0x6e>
1a00278c:	085b      	lsrs	r3, r3, #1
1a00278e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002792:	1ab6      	subs	r6, r6, r2
1a002794:	eb65 0503 	sbc.w	r5, r5, r3
1a002798:	085b      	lsrs	r3, r3, #1
1a00279a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00279e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a0027a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a0027a6:	ebb6 0e02 	subs.w	lr, r6, r2
1a0027aa:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0027ae:	bf22      	ittt	cs
1a0027b0:	1ab6      	subcs	r6, r6, r2
1a0027b2:	4675      	movcs	r5, lr
1a0027b4:	ea40 000c 	orrcs.w	r0, r0, ip
1a0027b8:	085b      	lsrs	r3, r3, #1
1a0027ba:	ea4f 0232 	mov.w	r2, r2, rrx
1a0027be:	ebb6 0e02 	subs.w	lr, r6, r2
1a0027c2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0027c6:	bf22      	ittt	cs
1a0027c8:	1ab6      	subcs	r6, r6, r2
1a0027ca:	4675      	movcs	r5, lr
1a0027cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a0027d0:	085b      	lsrs	r3, r3, #1
1a0027d2:	ea4f 0232 	mov.w	r2, r2, rrx
1a0027d6:	ebb6 0e02 	subs.w	lr, r6, r2
1a0027da:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0027de:	bf22      	ittt	cs
1a0027e0:	1ab6      	subcs	r6, r6, r2
1a0027e2:	4675      	movcs	r5, lr
1a0027e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a0027e8:	085b      	lsrs	r3, r3, #1
1a0027ea:	ea4f 0232 	mov.w	r2, r2, rrx
1a0027ee:	ebb6 0e02 	subs.w	lr, r6, r2
1a0027f2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0027f6:	bf22      	ittt	cs
1a0027f8:	1ab6      	subcs	r6, r6, r2
1a0027fa:	4675      	movcs	r5, lr
1a0027fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002800:	ea55 0e06 	orrs.w	lr, r5, r6
1a002804:	d018      	beq.n	1a002838 <__aeabi_ddiv+0x114>
1a002806:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a00280a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a00280e:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a00281a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a00281e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002822:	d1c0      	bne.n	1a0027a6 <__aeabi_ddiv+0x82>
1a002824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002828:	d10b      	bne.n	1a002842 <__aeabi_ddiv+0x11e>
1a00282a:	ea41 0100 	orr.w	r1, r1, r0
1a00282e:	f04f 0000 	mov.w	r0, #0
1a002832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002836:	e7b6      	b.n	1a0027a6 <__aeabi_ddiv+0x82>
1a002838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00283c:	bf04      	itt	eq
1a00283e:	4301      	orreq	r1, r0
1a002840:	2000      	moveq	r0, #0
1a002842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002846:	bf88      	it	hi
1a002848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a00284c:	f63f aeaf 	bhi.w	1a0025ae <__aeabi_dmul+0xde>
1a002850:	ebb5 0c03 	subs.w	ip, r5, r3
1a002854:	bf04      	itt	eq
1a002856:	ebb6 0c02 	subseq.w	ip, r6, r2
1a00285a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00285e:	f150 0000 	adcs.w	r0, r0, #0
1a002862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002866:	bd70      	pop	{r4, r5, r6, pc}
1a002868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a00286c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002874:	bfc2      	ittt	gt
1a002876:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00287a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00287e:	bd70      	popgt	{r4, r5, r6, pc}
1a002880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002884:	f04f 0e00 	mov.w	lr, #0
1a002888:	3c01      	subs	r4, #1
1a00288a:	e690      	b.n	1a0025ae <__aeabi_dmul+0xde>
1a00288c:	ea45 0e06 	orr.w	lr, r5, r6
1a002890:	e68d      	b.n	1a0025ae <__aeabi_dmul+0xde>
1a002892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002896:	ea94 0f0c 	teq	r4, ip
1a00289a:	bf08      	it	eq
1a00289c:	ea95 0f0c 	teqeq	r5, ip
1a0028a0:	f43f af3b 	beq.w	1a00271a <__aeabi_dmul+0x24a>
1a0028a4:	ea94 0f0c 	teq	r4, ip
1a0028a8:	d10a      	bne.n	1a0028c0 <__aeabi_ddiv+0x19c>
1a0028aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0028ae:	f47f af34 	bne.w	1a00271a <__aeabi_dmul+0x24a>
1a0028b2:	ea95 0f0c 	teq	r5, ip
1a0028b6:	f47f af25 	bne.w	1a002704 <__aeabi_dmul+0x234>
1a0028ba:	4610      	mov	r0, r2
1a0028bc:	4619      	mov	r1, r3
1a0028be:	e72c      	b.n	1a00271a <__aeabi_dmul+0x24a>
1a0028c0:	ea95 0f0c 	teq	r5, ip
1a0028c4:	d106      	bne.n	1a0028d4 <__aeabi_ddiv+0x1b0>
1a0028c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0028ca:	f43f aefd 	beq.w	1a0026c8 <__aeabi_dmul+0x1f8>
1a0028ce:	4610      	mov	r0, r2
1a0028d0:	4619      	mov	r1, r3
1a0028d2:	e722      	b.n	1a00271a <__aeabi_dmul+0x24a>
1a0028d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0028d8:	bf18      	it	ne
1a0028da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0028de:	f47f aec5 	bne.w	1a00266c <__aeabi_dmul+0x19c>
1a0028e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a0028e6:	f47f af0d 	bne.w	1a002704 <__aeabi_dmul+0x234>
1a0028ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0028ee:	f47f aeeb 	bne.w	1a0026c8 <__aeabi_dmul+0x1f8>
1a0028f2:	e712      	b.n	1a00271a <__aeabi_dmul+0x24a>

1a0028f4 <__gedf2>:
1a0028f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a0028f8:	e006      	b.n	1a002908 <__cmpdf2+0x4>
1a0028fa:	bf00      	nop

1a0028fc <__ledf2>:
1a0028fc:	f04f 0c01 	mov.w	ip, #1
1a002900:	e002      	b.n	1a002908 <__cmpdf2+0x4>
1a002902:	bf00      	nop

1a002904 <__cmpdf2>:
1a002904:	f04f 0c01 	mov.w	ip, #1
1a002908:	f84d cd04 	str.w	ip, [sp, #-4]!
1a00290c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002918:	bf18      	it	ne
1a00291a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a00291e:	d01b      	beq.n	1a002958 <__cmpdf2+0x54>
1a002920:	b001      	add	sp, #4
1a002922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a002926:	bf0c      	ite	eq
1a002928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a00292c:	ea91 0f03 	teqne	r1, r3
1a002930:	bf02      	ittt	eq
1a002932:	ea90 0f02 	teqeq	r0, r2
1a002936:	2000      	moveq	r0, #0
1a002938:	4770      	bxeq	lr
1a00293a:	f110 0f00 	cmn.w	r0, #0
1a00293e:	ea91 0f03 	teq	r1, r3
1a002942:	bf58      	it	pl
1a002944:	4299      	cmppl	r1, r3
1a002946:	bf08      	it	eq
1a002948:	4290      	cmpeq	r0, r2
1a00294a:	bf2c      	ite	cs
1a00294c:	17d8      	asrcs	r0, r3, #31
1a00294e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a002952:	f040 0001 	orr.w	r0, r0, #1
1a002956:	4770      	bx	lr
1a002958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00295c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002960:	d102      	bne.n	1a002968 <__cmpdf2+0x64>
1a002962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a002966:	d107      	bne.n	1a002978 <__cmpdf2+0x74>
1a002968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00296c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002970:	d1d6      	bne.n	1a002920 <__cmpdf2+0x1c>
1a002972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a002976:	d0d3      	beq.n	1a002920 <__cmpdf2+0x1c>
1a002978:	f85d 0b04 	ldr.w	r0, [sp], #4
1a00297c:	4770      	bx	lr
1a00297e:	bf00      	nop

1a002980 <__aeabi_cdrcmple>:
1a002980:	4684      	mov	ip, r0
1a002982:	4610      	mov	r0, r2
1a002984:	4662      	mov	r2, ip
1a002986:	468c      	mov	ip, r1
1a002988:	4619      	mov	r1, r3
1a00298a:	4663      	mov	r3, ip
1a00298c:	e000      	b.n	1a002990 <__aeabi_cdcmpeq>
1a00298e:	bf00      	nop

1a002990 <__aeabi_cdcmpeq>:
1a002990:	b501      	push	{r0, lr}
1a002992:	f7ff ffb7 	bl	1a002904 <__cmpdf2>
1a002996:	2800      	cmp	r0, #0
1a002998:	bf48      	it	mi
1a00299a:	f110 0f00 	cmnmi.w	r0, #0
1a00299e:	bd01      	pop	{r0, pc}

1a0029a0 <__aeabi_dcmpeq>:
1a0029a0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0029a4:	f7ff fff4 	bl	1a002990 <__aeabi_cdcmpeq>
1a0029a8:	bf0c      	ite	eq
1a0029aa:	2001      	moveq	r0, #1
1a0029ac:	2000      	movne	r0, #0
1a0029ae:	f85d fb08 	ldr.w	pc, [sp], #8
1a0029b2:	bf00      	nop

1a0029b4 <__aeabi_dcmplt>:
1a0029b4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0029b8:	f7ff ffea 	bl	1a002990 <__aeabi_cdcmpeq>
1a0029bc:	bf34      	ite	cc
1a0029be:	2001      	movcc	r0, #1
1a0029c0:	2000      	movcs	r0, #0
1a0029c2:	f85d fb08 	ldr.w	pc, [sp], #8
1a0029c6:	bf00      	nop

1a0029c8 <__aeabi_dcmple>:
1a0029c8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0029cc:	f7ff ffe0 	bl	1a002990 <__aeabi_cdcmpeq>
1a0029d0:	bf94      	ite	ls
1a0029d2:	2001      	movls	r0, #1
1a0029d4:	2000      	movhi	r0, #0
1a0029d6:	f85d fb08 	ldr.w	pc, [sp], #8
1a0029da:	bf00      	nop

1a0029dc <__aeabi_dcmpge>:
1a0029dc:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0029e0:	f7ff ffce 	bl	1a002980 <__aeabi_cdrcmple>
1a0029e4:	bf94      	ite	ls
1a0029e6:	2001      	movls	r0, #1
1a0029e8:	2000      	movhi	r0, #0
1a0029ea:	f85d fb08 	ldr.w	pc, [sp], #8
1a0029ee:	bf00      	nop

1a0029f0 <__aeabi_dcmpgt>:
1a0029f0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0029f4:	f7ff ffc4 	bl	1a002980 <__aeabi_cdrcmple>
1a0029f8:	bf34      	ite	cc
1a0029fa:	2001      	movcc	r0, #1
1a0029fc:	2000      	movcs	r0, #0
1a0029fe:	f85d fb08 	ldr.w	pc, [sp], #8
1a002a02:	bf00      	nop

1a002a04 <__aeabi_dcmpun>:
1a002a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002a0c:	d102      	bne.n	1a002a14 <__aeabi_dcmpun+0x10>
1a002a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a002a12:	d10a      	bne.n	1a002a2a <__aeabi_dcmpun+0x26>
1a002a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002a1c:	d102      	bne.n	1a002a24 <__aeabi_dcmpun+0x20>
1a002a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a002a22:	d102      	bne.n	1a002a2a <__aeabi_dcmpun+0x26>
1a002a24:	f04f 0000 	mov.w	r0, #0
1a002a28:	4770      	bx	lr
1a002a2a:	f04f 0001 	mov.w	r0, #1
1a002a2e:	4770      	bx	lr

1a002a30 <__aeabi_d2iz>:
1a002a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a002a38:	d215      	bcs.n	1a002a66 <__aeabi_d2iz+0x36>
1a002a3a:	d511      	bpl.n	1a002a60 <__aeabi_d2iz+0x30>
1a002a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a002a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a002a44:	d912      	bls.n	1a002a6c <__aeabi_d2iz+0x3c>
1a002a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a002a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a002a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a002a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002a56:	fa23 f002 	lsr.w	r0, r3, r2
1a002a5a:	bf18      	it	ne
1a002a5c:	4240      	negne	r0, r0
1a002a5e:	4770      	bx	lr
1a002a60:	f04f 0000 	mov.w	r0, #0
1a002a64:	4770      	bx	lr
1a002a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a002a6a:	d105      	bne.n	1a002a78 <__aeabi_d2iz+0x48>
1a002a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a002a70:	bf08      	it	eq
1a002a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a002a76:	4770      	bx	lr
1a002a78:	f04f 0000 	mov.w	r0, #0
1a002a7c:	4770      	bx	lr
1a002a7e:	bf00      	nop

1a002a80 <__aeabi_uldivmod>:
1a002a80:	b953      	cbnz	r3, 1a002a98 <__aeabi_uldivmod+0x18>
1a002a82:	b94a      	cbnz	r2, 1a002a98 <__aeabi_uldivmod+0x18>
1a002a84:	2900      	cmp	r1, #0
1a002a86:	bf08      	it	eq
1a002a88:	2800      	cmpeq	r0, #0
1a002a8a:	bf1c      	itt	ne
1a002a8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002a90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002a94:	f000 b974 	b.w	1a002d80 <__aeabi_idiv0>
1a002a98:	f1ad 0c08 	sub.w	ip, sp, #8
1a002a9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002aa0:	f000 f806 	bl	1a002ab0 <__udivmoddi4>
1a002aa4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002aac:	b004      	add	sp, #16
1a002aae:	4770      	bx	lr

1a002ab0 <__udivmoddi4>:
1a002ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002ab4:	9e08      	ldr	r6, [sp, #32]
1a002ab6:	4604      	mov	r4, r0
1a002ab8:	4688      	mov	r8, r1
1a002aba:	2b00      	cmp	r3, #0
1a002abc:	f040 8085 	bne.w	1a002bca <__udivmoddi4+0x11a>
1a002ac0:	428a      	cmp	r2, r1
1a002ac2:	4615      	mov	r5, r2
1a002ac4:	d948      	bls.n	1a002b58 <__udivmoddi4+0xa8>
1a002ac6:	fab2 f282 	clz	r2, r2
1a002aca:	b14a      	cbz	r2, 1a002ae0 <__udivmoddi4+0x30>
1a002acc:	f1c2 0720 	rsb	r7, r2, #32
1a002ad0:	fa01 f302 	lsl.w	r3, r1, r2
1a002ad4:	fa20 f707 	lsr.w	r7, r0, r7
1a002ad8:	4095      	lsls	r5, r2
1a002ada:	ea47 0803 	orr.w	r8, r7, r3
1a002ade:	4094      	lsls	r4, r2
1a002ae0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002ae4:	0c23      	lsrs	r3, r4, #16
1a002ae6:	fbb8 f7fe 	udiv	r7, r8, lr
1a002aea:	fa1f fc85 	uxth.w	ip, r5
1a002aee:	fb0e 8817 	mls	r8, lr, r7, r8
1a002af2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002af6:	fb07 f10c 	mul.w	r1, r7, ip
1a002afa:	4299      	cmp	r1, r3
1a002afc:	d909      	bls.n	1a002b12 <__udivmoddi4+0x62>
1a002afe:	18eb      	adds	r3, r5, r3
1a002b00:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a002b04:	f080 80e3 	bcs.w	1a002cce <__udivmoddi4+0x21e>
1a002b08:	4299      	cmp	r1, r3
1a002b0a:	f240 80e0 	bls.w	1a002cce <__udivmoddi4+0x21e>
1a002b0e:	3f02      	subs	r7, #2
1a002b10:	442b      	add	r3, r5
1a002b12:	1a5b      	subs	r3, r3, r1
1a002b14:	b2a4      	uxth	r4, r4
1a002b16:	fbb3 f0fe 	udiv	r0, r3, lr
1a002b1a:	fb0e 3310 	mls	r3, lr, r0, r3
1a002b1e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002b22:	fb00 fc0c 	mul.w	ip, r0, ip
1a002b26:	45a4      	cmp	ip, r4
1a002b28:	d909      	bls.n	1a002b3e <__udivmoddi4+0x8e>
1a002b2a:	192c      	adds	r4, r5, r4
1a002b2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002b30:	f080 80cb 	bcs.w	1a002cca <__udivmoddi4+0x21a>
1a002b34:	45a4      	cmp	ip, r4
1a002b36:	f240 80c8 	bls.w	1a002cca <__udivmoddi4+0x21a>
1a002b3a:	3802      	subs	r0, #2
1a002b3c:	442c      	add	r4, r5
1a002b3e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002b42:	eba4 040c 	sub.w	r4, r4, ip
1a002b46:	2700      	movs	r7, #0
1a002b48:	b11e      	cbz	r6, 1a002b52 <__udivmoddi4+0xa2>
1a002b4a:	40d4      	lsrs	r4, r2
1a002b4c:	2300      	movs	r3, #0
1a002b4e:	e9c6 4300 	strd	r4, r3, [r6]
1a002b52:	4639      	mov	r1, r7
1a002b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002b58:	2a00      	cmp	r2, #0
1a002b5a:	d053      	beq.n	1a002c04 <__udivmoddi4+0x154>
1a002b5c:	fab2 f282 	clz	r2, r2
1a002b60:	2a00      	cmp	r2, #0
1a002b62:	f040 80b6 	bne.w	1a002cd2 <__udivmoddi4+0x222>
1a002b66:	1b49      	subs	r1, r1, r5
1a002b68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002b6c:	fa1f f885 	uxth.w	r8, r5
1a002b70:	2701      	movs	r7, #1
1a002b72:	fbb1 fcfe 	udiv	ip, r1, lr
1a002b76:	0c23      	lsrs	r3, r4, #16
1a002b78:	fb0e 111c 	mls	r1, lr, ip, r1
1a002b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002b80:	fb08 f10c 	mul.w	r1, r8, ip
1a002b84:	4299      	cmp	r1, r3
1a002b86:	d907      	bls.n	1a002b98 <__udivmoddi4+0xe8>
1a002b88:	18eb      	adds	r3, r5, r3
1a002b8a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002b8e:	d202      	bcs.n	1a002b96 <__udivmoddi4+0xe6>
1a002b90:	4299      	cmp	r1, r3
1a002b92:	f200 80ec 	bhi.w	1a002d6e <__udivmoddi4+0x2be>
1a002b96:	4684      	mov	ip, r0
1a002b98:	1a59      	subs	r1, r3, r1
1a002b9a:	b2a3      	uxth	r3, r4
1a002b9c:	fbb1 f0fe 	udiv	r0, r1, lr
1a002ba0:	fb0e 1410 	mls	r4, lr, r0, r1
1a002ba4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002ba8:	fb08 f800 	mul.w	r8, r8, r0
1a002bac:	45a0      	cmp	r8, r4
1a002bae:	d907      	bls.n	1a002bc0 <__udivmoddi4+0x110>
1a002bb0:	192c      	adds	r4, r5, r4
1a002bb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002bb6:	d202      	bcs.n	1a002bbe <__udivmoddi4+0x10e>
1a002bb8:	45a0      	cmp	r8, r4
1a002bba:	f200 80dc 	bhi.w	1a002d76 <__udivmoddi4+0x2c6>
1a002bbe:	4618      	mov	r0, r3
1a002bc0:	eba4 0408 	sub.w	r4, r4, r8
1a002bc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002bc8:	e7be      	b.n	1a002b48 <__udivmoddi4+0x98>
1a002bca:	428b      	cmp	r3, r1
1a002bcc:	d908      	bls.n	1a002be0 <__udivmoddi4+0x130>
1a002bce:	2e00      	cmp	r6, #0
1a002bd0:	d078      	beq.n	1a002cc4 <__udivmoddi4+0x214>
1a002bd2:	2700      	movs	r7, #0
1a002bd4:	e9c6 0100 	strd	r0, r1, [r6]
1a002bd8:	4638      	mov	r0, r7
1a002bda:	4639      	mov	r1, r7
1a002bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002be0:	fab3 f783 	clz	r7, r3
1a002be4:	b97f      	cbnz	r7, 1a002c06 <__udivmoddi4+0x156>
1a002be6:	428b      	cmp	r3, r1
1a002be8:	d302      	bcc.n	1a002bf0 <__udivmoddi4+0x140>
1a002bea:	4282      	cmp	r2, r0
1a002bec:	f200 80bd 	bhi.w	1a002d6a <__udivmoddi4+0x2ba>
1a002bf0:	1a84      	subs	r4, r0, r2
1a002bf2:	eb61 0303 	sbc.w	r3, r1, r3
1a002bf6:	2001      	movs	r0, #1
1a002bf8:	4698      	mov	r8, r3
1a002bfa:	2e00      	cmp	r6, #0
1a002bfc:	d0a9      	beq.n	1a002b52 <__udivmoddi4+0xa2>
1a002bfe:	e9c6 4800 	strd	r4, r8, [r6]
1a002c02:	e7a6      	b.n	1a002b52 <__udivmoddi4+0xa2>
1a002c04:	deff      	udf	#255	; 0xff
1a002c06:	f1c7 0520 	rsb	r5, r7, #32
1a002c0a:	40bb      	lsls	r3, r7
1a002c0c:	fa22 fc05 	lsr.w	ip, r2, r5
1a002c10:	ea4c 0c03 	orr.w	ip, ip, r3
1a002c14:	fa01 f407 	lsl.w	r4, r1, r7
1a002c18:	fa20 f805 	lsr.w	r8, r0, r5
1a002c1c:	fa21 f305 	lsr.w	r3, r1, r5
1a002c20:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002c24:	ea48 0404 	orr.w	r4, r8, r4
1a002c28:	fbb3 f9fe 	udiv	r9, r3, lr
1a002c2c:	0c21      	lsrs	r1, r4, #16
1a002c2e:	fb0e 3319 	mls	r3, lr, r9, r3
1a002c32:	fa1f f88c 	uxth.w	r8, ip
1a002c36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002c3a:	fb09 fa08 	mul.w	sl, r9, r8
1a002c3e:	459a      	cmp	sl, r3
1a002c40:	fa02 f207 	lsl.w	r2, r2, r7
1a002c44:	fa00 f107 	lsl.w	r1, r0, r7
1a002c48:	d90b      	bls.n	1a002c62 <__udivmoddi4+0x1b2>
1a002c4a:	eb1c 0303 	adds.w	r3, ip, r3
1a002c4e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002c52:	f080 8088 	bcs.w	1a002d66 <__udivmoddi4+0x2b6>
1a002c56:	459a      	cmp	sl, r3
1a002c58:	f240 8085 	bls.w	1a002d66 <__udivmoddi4+0x2b6>
1a002c5c:	f1a9 0902 	sub.w	r9, r9, #2
1a002c60:	4463      	add	r3, ip
1a002c62:	eba3 030a 	sub.w	r3, r3, sl
1a002c66:	b2a4      	uxth	r4, r4
1a002c68:	fbb3 f0fe 	udiv	r0, r3, lr
1a002c6c:	fb0e 3310 	mls	r3, lr, r0, r3
1a002c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002c74:	fb00 f808 	mul.w	r8, r0, r8
1a002c78:	45a0      	cmp	r8, r4
1a002c7a:	d908      	bls.n	1a002c8e <__udivmoddi4+0x1de>
1a002c7c:	eb1c 0404 	adds.w	r4, ip, r4
1a002c80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002c84:	d26b      	bcs.n	1a002d5e <__udivmoddi4+0x2ae>
1a002c86:	45a0      	cmp	r8, r4
1a002c88:	d969      	bls.n	1a002d5e <__udivmoddi4+0x2ae>
1a002c8a:	3802      	subs	r0, #2
1a002c8c:	4464      	add	r4, ip
1a002c8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002c92:	eba4 0408 	sub.w	r4, r4, r8
1a002c96:	fba0 8902 	umull	r8, r9, r0, r2
1a002c9a:	454c      	cmp	r4, r9
1a002c9c:	46c6      	mov	lr, r8
1a002c9e:	464b      	mov	r3, r9
1a002ca0:	d354      	bcc.n	1a002d4c <__udivmoddi4+0x29c>
1a002ca2:	d051      	beq.n	1a002d48 <__udivmoddi4+0x298>
1a002ca4:	2e00      	cmp	r6, #0
1a002ca6:	d069      	beq.n	1a002d7c <__udivmoddi4+0x2cc>
1a002ca8:	ebb1 020e 	subs.w	r2, r1, lr
1a002cac:	eb64 0403 	sbc.w	r4, r4, r3
1a002cb0:	fa04 f505 	lsl.w	r5, r4, r5
1a002cb4:	fa22 f307 	lsr.w	r3, r2, r7
1a002cb8:	40fc      	lsrs	r4, r7
1a002cba:	431d      	orrs	r5, r3
1a002cbc:	e9c6 5400 	strd	r5, r4, [r6]
1a002cc0:	2700      	movs	r7, #0
1a002cc2:	e746      	b.n	1a002b52 <__udivmoddi4+0xa2>
1a002cc4:	4637      	mov	r7, r6
1a002cc6:	4630      	mov	r0, r6
1a002cc8:	e743      	b.n	1a002b52 <__udivmoddi4+0xa2>
1a002cca:	4618      	mov	r0, r3
1a002ccc:	e737      	b.n	1a002b3e <__udivmoddi4+0x8e>
1a002cce:	4607      	mov	r7, r0
1a002cd0:	e71f      	b.n	1a002b12 <__udivmoddi4+0x62>
1a002cd2:	f1c2 0320 	rsb	r3, r2, #32
1a002cd6:	fa20 f703 	lsr.w	r7, r0, r3
1a002cda:	4095      	lsls	r5, r2
1a002cdc:	fa01 f002 	lsl.w	r0, r1, r2
1a002ce0:	fa21 f303 	lsr.w	r3, r1, r3
1a002ce4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002ce8:	4338      	orrs	r0, r7
1a002cea:	0c01      	lsrs	r1, r0, #16
1a002cec:	fbb3 f7fe 	udiv	r7, r3, lr
1a002cf0:	fa1f f885 	uxth.w	r8, r5
1a002cf4:	fb0e 3317 	mls	r3, lr, r7, r3
1a002cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002cfc:	fb07 f308 	mul.w	r3, r7, r8
1a002d00:	428b      	cmp	r3, r1
1a002d02:	fa04 f402 	lsl.w	r4, r4, r2
1a002d06:	d907      	bls.n	1a002d18 <__udivmoddi4+0x268>
1a002d08:	1869      	adds	r1, r5, r1
1a002d0a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a002d0e:	d228      	bcs.n	1a002d62 <__udivmoddi4+0x2b2>
1a002d10:	428b      	cmp	r3, r1
1a002d12:	d926      	bls.n	1a002d62 <__udivmoddi4+0x2b2>
1a002d14:	3f02      	subs	r7, #2
1a002d16:	4429      	add	r1, r5
1a002d18:	1acb      	subs	r3, r1, r3
1a002d1a:	b281      	uxth	r1, r0
1a002d1c:	fbb3 f0fe 	udiv	r0, r3, lr
1a002d20:	fb0e 3310 	mls	r3, lr, r0, r3
1a002d24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002d28:	fb00 f308 	mul.w	r3, r0, r8
1a002d2c:	428b      	cmp	r3, r1
1a002d2e:	d907      	bls.n	1a002d40 <__udivmoddi4+0x290>
1a002d30:	1869      	adds	r1, r5, r1
1a002d32:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002d36:	d210      	bcs.n	1a002d5a <__udivmoddi4+0x2aa>
1a002d38:	428b      	cmp	r3, r1
1a002d3a:	d90e      	bls.n	1a002d5a <__udivmoddi4+0x2aa>
1a002d3c:	3802      	subs	r0, #2
1a002d3e:	4429      	add	r1, r5
1a002d40:	1ac9      	subs	r1, r1, r3
1a002d42:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002d46:	e714      	b.n	1a002b72 <__udivmoddi4+0xc2>
1a002d48:	4541      	cmp	r1, r8
1a002d4a:	d2ab      	bcs.n	1a002ca4 <__udivmoddi4+0x1f4>
1a002d4c:	ebb8 0e02 	subs.w	lr, r8, r2
1a002d50:	eb69 020c 	sbc.w	r2, r9, ip
1a002d54:	3801      	subs	r0, #1
1a002d56:	4613      	mov	r3, r2
1a002d58:	e7a4      	b.n	1a002ca4 <__udivmoddi4+0x1f4>
1a002d5a:	4660      	mov	r0, ip
1a002d5c:	e7f0      	b.n	1a002d40 <__udivmoddi4+0x290>
1a002d5e:	4618      	mov	r0, r3
1a002d60:	e795      	b.n	1a002c8e <__udivmoddi4+0x1de>
1a002d62:	4667      	mov	r7, ip
1a002d64:	e7d8      	b.n	1a002d18 <__udivmoddi4+0x268>
1a002d66:	4681      	mov	r9, r0
1a002d68:	e77b      	b.n	1a002c62 <__udivmoddi4+0x1b2>
1a002d6a:	4638      	mov	r0, r7
1a002d6c:	e745      	b.n	1a002bfa <__udivmoddi4+0x14a>
1a002d6e:	f1ac 0c02 	sub.w	ip, ip, #2
1a002d72:	442b      	add	r3, r5
1a002d74:	e710      	b.n	1a002b98 <__udivmoddi4+0xe8>
1a002d76:	3802      	subs	r0, #2
1a002d78:	442c      	add	r4, r5
1a002d7a:	e721      	b.n	1a002bc0 <__udivmoddi4+0x110>
1a002d7c:	4637      	mov	r7, r6
1a002d7e:	e6e8      	b.n	1a002b52 <__udivmoddi4+0xa2>

1a002d80 <__aeabi_idiv0>:
1a002d80:	4770      	bx	lr
1a002d82:	bf00      	nop

1a002d84 <_fclose_r>:
1a002d84:	b570      	push	{r4, r5, r6, lr}
1a002d86:	2900      	cmp	r1, #0
1a002d88:	d04a      	beq.n	1a002e20 <_fclose_r+0x9c>
1a002d8a:	4605      	mov	r5, r0
1a002d8c:	460c      	mov	r4, r1
1a002d8e:	b110      	cbz	r0, 1a002d96 <_fclose_r+0x12>
1a002d90:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a002d92:	2b00      	cmp	r3, #0
1a002d94:	d047      	beq.n	1a002e26 <_fclose_r+0xa2>
1a002d96:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002d9c:	07d8      	lsls	r0, r3, #31
1a002d9e:	d532      	bpl.n	1a002e06 <_fclose_r+0x82>
1a002da0:	2a00      	cmp	r2, #0
1a002da2:	d03d      	beq.n	1a002e20 <_fclose_r+0x9c>
1a002da4:	4621      	mov	r1, r4
1a002da6:	4628      	mov	r0, r5
1a002da8:	f000 f854 	bl	1a002e54 <__sflush_r>
1a002dac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002dae:	4606      	mov	r6, r0
1a002db0:	b133      	cbz	r3, 1a002dc0 <_fclose_r+0x3c>
1a002db2:	69e1      	ldr	r1, [r4, #28]
1a002db4:	4628      	mov	r0, r5
1a002db6:	4798      	blx	r3
1a002db8:	2800      	cmp	r0, #0
1a002dba:	bfb8      	it	lt
1a002dbc:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a002dc0:	89a3      	ldrh	r3, [r4, #12]
1a002dc2:	061a      	lsls	r2, r3, #24
1a002dc4:	d43c      	bmi.n	1a002e40 <_fclose_r+0xbc>
1a002dc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a002dc8:	b141      	cbz	r1, 1a002ddc <_fclose_r+0x58>
1a002dca:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a002dce:	4299      	cmp	r1, r3
1a002dd0:	d002      	beq.n	1a002dd8 <_fclose_r+0x54>
1a002dd2:	4628      	mov	r0, r5
1a002dd4:	f000 f9c6 	bl	1a003164 <_free_r>
1a002dd8:	2300      	movs	r3, #0
1a002dda:	6323      	str	r3, [r4, #48]	; 0x30
1a002ddc:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a002dde:	b121      	cbz	r1, 1a002dea <_fclose_r+0x66>
1a002de0:	4628      	mov	r0, r5
1a002de2:	f000 f9bf 	bl	1a003164 <_free_r>
1a002de6:	2300      	movs	r3, #0
1a002de8:	6463      	str	r3, [r4, #68]	; 0x44
1a002dea:	f000 f95f 	bl	1a0030ac <__sfp_lock_acquire>
1a002dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002df0:	2200      	movs	r2, #0
1a002df2:	07db      	lsls	r3, r3, #31
1a002df4:	81a2      	strh	r2, [r4, #12]
1a002df6:	d528      	bpl.n	1a002e4a <_fclose_r+0xc6>
1a002df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002dfa:	f000 faf9 	bl	1a0033f0 <__retarget_lock_close_recursive>
1a002dfe:	f000 f95b 	bl	1a0030b8 <__sfp_lock_release>
1a002e02:	4630      	mov	r0, r6
1a002e04:	bd70      	pop	{r4, r5, r6, pc}
1a002e06:	0591      	lsls	r1, r2, #22
1a002e08:	d4cc      	bmi.n	1a002da4 <_fclose_r+0x20>
1a002e0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002e0c:	f000 faf2 	bl	1a0033f4 <__retarget_lock_acquire_recursive>
1a002e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002e14:	2b00      	cmp	r3, #0
1a002e16:	d1c5      	bne.n	1a002da4 <_fclose_r+0x20>
1a002e18:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a002e1a:	f016 0601 	ands.w	r6, r6, #1
1a002e1e:	d00a      	beq.n	1a002e36 <_fclose_r+0xb2>
1a002e20:	2600      	movs	r6, #0
1a002e22:	4630      	mov	r0, r6
1a002e24:	bd70      	pop	{r4, r5, r6, pc}
1a002e26:	f000 f917 	bl	1a003058 <__sinit>
1a002e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002e30:	07d8      	lsls	r0, r3, #31
1a002e32:	d4b5      	bmi.n	1a002da0 <_fclose_r+0x1c>
1a002e34:	e7e7      	b.n	1a002e06 <_fclose_r+0x82>
1a002e36:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002e38:	f000 fade 	bl	1a0033f8 <__retarget_lock_release_recursive>
1a002e3c:	4630      	mov	r0, r6
1a002e3e:	bd70      	pop	{r4, r5, r6, pc}
1a002e40:	6921      	ldr	r1, [r4, #16]
1a002e42:	4628      	mov	r0, r5
1a002e44:	f000 f98e 	bl	1a003164 <_free_r>
1a002e48:	e7bd      	b.n	1a002dc6 <_fclose_r+0x42>
1a002e4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002e4c:	f000 fad4 	bl	1a0033f8 <__retarget_lock_release_recursive>
1a002e50:	e7d2      	b.n	1a002df8 <_fclose_r+0x74>
1a002e52:	bf00      	nop

1a002e54 <__sflush_r>:
1a002e54:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a002e58:	b29a      	uxth	r2, r3
1a002e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002e5e:	460c      	mov	r4, r1
1a002e60:	0711      	lsls	r1, r2, #28
1a002e62:	4680      	mov	r8, r0
1a002e64:	d448      	bmi.n	1a002ef8 <__sflush_r+0xa4>
1a002e66:	6862      	ldr	r2, [r4, #4]
1a002e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002e6c:	2a00      	cmp	r2, #0
1a002e6e:	81a3      	strh	r3, [r4, #12]
1a002e70:	dd5d      	ble.n	1a002f2e <__sflush_r+0xda>
1a002e72:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a002e74:	2d00      	cmp	r5, #0
1a002e76:	d057      	beq.n	1a002f28 <__sflush_r+0xd4>
1a002e78:	2200      	movs	r2, #0
1a002e7a:	b29b      	uxth	r3, r3
1a002e7c:	f8d8 6000 	ldr.w	r6, [r8]
1a002e80:	69e1      	ldr	r1, [r4, #28]
1a002e82:	f8c8 2000 	str.w	r2, [r8]
1a002e86:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a002e8a:	d154      	bne.n	1a002f36 <__sflush_r+0xe2>
1a002e8c:	2301      	movs	r3, #1
1a002e8e:	4640      	mov	r0, r8
1a002e90:	47a8      	blx	r5
1a002e92:	1c43      	adds	r3, r0, #1
1a002e94:	4602      	mov	r2, r0
1a002e96:	d065      	beq.n	1a002f64 <__sflush_r+0x110>
1a002e98:	89a3      	ldrh	r3, [r4, #12]
1a002e9a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a002e9c:	69e1      	ldr	r1, [r4, #28]
1a002e9e:	075f      	lsls	r7, r3, #29
1a002ea0:	d505      	bpl.n	1a002eae <__sflush_r+0x5a>
1a002ea2:	6860      	ldr	r0, [r4, #4]
1a002ea4:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a002ea6:	1a12      	subs	r2, r2, r0
1a002ea8:	b10b      	cbz	r3, 1a002eae <__sflush_r+0x5a>
1a002eaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a002eac:	1ad2      	subs	r2, r2, r3
1a002eae:	2300      	movs	r3, #0
1a002eb0:	4640      	mov	r0, r8
1a002eb2:	47a8      	blx	r5
1a002eb4:	1c45      	adds	r5, r0, #1
1a002eb6:	d148      	bne.n	1a002f4a <__sflush_r+0xf6>
1a002eb8:	f8d8 2000 	ldr.w	r2, [r8]
1a002ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002ec0:	2a00      	cmp	r2, #0
1a002ec2:	d05c      	beq.n	1a002f7e <__sflush_r+0x12a>
1a002ec4:	2a1d      	cmp	r2, #29
1a002ec6:	d001      	beq.n	1a002ecc <__sflush_r+0x78>
1a002ec8:	2a16      	cmp	r2, #22
1a002eca:	d164      	bne.n	1a002f96 <__sflush_r+0x142>
1a002ecc:	6922      	ldr	r2, [r4, #16]
1a002ece:	2100      	movs	r1, #0
1a002ed0:	e9c4 2100 	strd	r2, r1, [r4]
1a002ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a002ed8:	81a3      	strh	r3, [r4, #12]
1a002eda:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a002edc:	f8c8 6000 	str.w	r6, [r8]
1a002ee0:	b311      	cbz	r1, 1a002f28 <__sflush_r+0xd4>
1a002ee2:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a002ee6:	4299      	cmp	r1, r3
1a002ee8:	d002      	beq.n	1a002ef0 <__sflush_r+0x9c>
1a002eea:	4640      	mov	r0, r8
1a002eec:	f000 f93a 	bl	1a003164 <_free_r>
1a002ef0:	2000      	movs	r0, #0
1a002ef2:	6320      	str	r0, [r4, #48]	; 0x30
1a002ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002ef8:	6926      	ldr	r6, [r4, #16]
1a002efa:	b1ae      	cbz	r6, 1a002f28 <__sflush_r+0xd4>
1a002efc:	6825      	ldr	r5, [r4, #0]
1a002efe:	6026      	str	r6, [r4, #0]
1a002f00:	0791      	lsls	r1, r2, #30
1a002f02:	bf0c      	ite	eq
1a002f04:	6963      	ldreq	r3, [r4, #20]
1a002f06:	2300      	movne	r3, #0
1a002f08:	1bad      	subs	r5, r5, r6
1a002f0a:	60a3      	str	r3, [r4, #8]
1a002f0c:	e00a      	b.n	1a002f24 <__sflush_r+0xd0>
1a002f0e:	462b      	mov	r3, r5
1a002f10:	4632      	mov	r2, r6
1a002f12:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a002f14:	69e1      	ldr	r1, [r4, #28]
1a002f16:	4640      	mov	r0, r8
1a002f18:	47b8      	blx	r7
1a002f1a:	2800      	cmp	r0, #0
1a002f1c:	eba5 0500 	sub.w	r5, r5, r0
1a002f20:	4406      	add	r6, r0
1a002f22:	dd0a      	ble.n	1a002f3a <__sflush_r+0xe6>
1a002f24:	2d00      	cmp	r5, #0
1a002f26:	dcf2      	bgt.n	1a002f0e <__sflush_r+0xba>
1a002f28:	2000      	movs	r0, #0
1a002f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002f2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a002f30:	2a00      	cmp	r2, #0
1a002f32:	dc9e      	bgt.n	1a002e72 <__sflush_r+0x1e>
1a002f34:	e7f8      	b.n	1a002f28 <__sflush_r+0xd4>
1a002f36:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a002f38:	e7b1      	b.n	1a002e9e <__sflush_r+0x4a>
1a002f3a:	89a3      	ldrh	r3, [r4, #12]
1a002f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002f40:	81a3      	strh	r3, [r4, #12]
1a002f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002f4e:	6922      	ldr	r2, [r4, #16]
1a002f50:	6022      	str	r2, [r4, #0]
1a002f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a002f56:	2200      	movs	r2, #0
1a002f58:	6062      	str	r2, [r4, #4]
1a002f5a:	04da      	lsls	r2, r3, #19
1a002f5c:	81a3      	strh	r3, [r4, #12]
1a002f5e:	d5bc      	bpl.n	1a002eda <__sflush_r+0x86>
1a002f60:	6520      	str	r0, [r4, #80]	; 0x50
1a002f62:	e7ba      	b.n	1a002eda <__sflush_r+0x86>
1a002f64:	f8d8 3000 	ldr.w	r3, [r8]
1a002f68:	2b00      	cmp	r3, #0
1a002f6a:	d095      	beq.n	1a002e98 <__sflush_r+0x44>
1a002f6c:	2b1d      	cmp	r3, #29
1a002f6e:	d00f      	beq.n	1a002f90 <__sflush_r+0x13c>
1a002f70:	2b16      	cmp	r3, #22
1a002f72:	d00d      	beq.n	1a002f90 <__sflush_r+0x13c>
1a002f74:	89a3      	ldrh	r3, [r4, #12]
1a002f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002f7a:	81a3      	strh	r3, [r4, #12]
1a002f7c:	e7d5      	b.n	1a002f2a <__sflush_r+0xd6>
1a002f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a002f82:	6921      	ldr	r1, [r4, #16]
1a002f84:	81a3      	strh	r3, [r4, #12]
1a002f86:	04db      	lsls	r3, r3, #19
1a002f88:	e9c4 1200 	strd	r1, r2, [r4]
1a002f8c:	d5a5      	bpl.n	1a002eda <__sflush_r+0x86>
1a002f8e:	e7e7      	b.n	1a002f60 <__sflush_r+0x10c>
1a002f90:	f8c8 6000 	str.w	r6, [r8]
1a002f94:	e7c8      	b.n	1a002f28 <__sflush_r+0xd4>
1a002f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002f9a:	81a3      	strh	r3, [r4, #12]
1a002f9c:	e7c5      	b.n	1a002f2a <__sflush_r+0xd6>
1a002f9e:	bf00      	nop

1a002fa0 <_fflush_r>:
1a002fa0:	b538      	push	{r3, r4, r5, lr}
1a002fa2:	460d      	mov	r5, r1
1a002fa4:	4604      	mov	r4, r0
1a002fa6:	b108      	cbz	r0, 1a002fac <_fflush_r+0xc>
1a002fa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a002faa:	b1a3      	cbz	r3, 1a002fd6 <_fflush_r+0x36>
1a002fac:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a002fb0:	b1b8      	cbz	r0, 1a002fe2 <_fflush_r+0x42>
1a002fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a002fb4:	07db      	lsls	r3, r3, #31
1a002fb6:	d401      	bmi.n	1a002fbc <_fflush_r+0x1c>
1a002fb8:	0581      	lsls	r1, r0, #22
1a002fba:	d515      	bpl.n	1a002fe8 <_fflush_r+0x48>
1a002fbc:	4620      	mov	r0, r4
1a002fbe:	4629      	mov	r1, r5
1a002fc0:	f7ff ff48 	bl	1a002e54 <__sflush_r>
1a002fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a002fc6:	07da      	lsls	r2, r3, #31
1a002fc8:	4604      	mov	r4, r0
1a002fca:	d402      	bmi.n	1a002fd2 <_fflush_r+0x32>
1a002fcc:	89ab      	ldrh	r3, [r5, #12]
1a002fce:	059b      	lsls	r3, r3, #22
1a002fd0:	d50e      	bpl.n	1a002ff0 <_fflush_r+0x50>
1a002fd2:	4620      	mov	r0, r4
1a002fd4:	bd38      	pop	{r3, r4, r5, pc}
1a002fd6:	f000 f83f 	bl	1a003058 <__sinit>
1a002fda:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a002fde:	2800      	cmp	r0, #0
1a002fe0:	d1e7      	bne.n	1a002fb2 <_fflush_r+0x12>
1a002fe2:	4604      	mov	r4, r0
1a002fe4:	4620      	mov	r0, r4
1a002fe6:	bd38      	pop	{r3, r4, r5, pc}
1a002fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a002fea:	f000 fa03 	bl	1a0033f4 <__retarget_lock_acquire_recursive>
1a002fee:	e7e5      	b.n	1a002fbc <_fflush_r+0x1c>
1a002ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a002ff2:	f000 fa01 	bl	1a0033f8 <__retarget_lock_release_recursive>
1a002ff6:	4620      	mov	r0, r4
1a002ff8:	bd38      	pop	{r3, r4, r5, pc}
1a002ffa:	bf00      	nop

1a002ffc <std>:
1a002ffc:	b510      	push	{r4, lr}
1a002ffe:	2300      	movs	r3, #0
1a003000:	4604      	mov	r4, r0
1a003002:	8181      	strh	r1, [r0, #12]
1a003004:	81c2      	strh	r2, [r0, #14]
1a003006:	e9c0 3300 	strd	r3, r3, [r0]
1a00300a:	6083      	str	r3, [r0, #8]
1a00300c:	6643      	str	r3, [r0, #100]	; 0x64
1a00300e:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003012:	6183      	str	r3, [r0, #24]
1a003014:	4619      	mov	r1, r3
1a003016:	2208      	movs	r2, #8
1a003018:	305c      	adds	r0, #92	; 0x5c
1a00301a:	f000 fd41 	bl	1a003aa0 <memset>
1a00301e:	4807      	ldr	r0, [pc, #28]	; (1a00303c <std+0x40>)
1a003020:	4907      	ldr	r1, [pc, #28]	; (1a003040 <std+0x44>)
1a003022:	4a08      	ldr	r2, [pc, #32]	; (1a003044 <std+0x48>)
1a003024:	4b08      	ldr	r3, [pc, #32]	; (1a003048 <std+0x4c>)
1a003026:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003028:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a00302c:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a003030:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a003034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003038:	f000 b9d8 	b.w	1a0033ec <__retarget_lock_init_recursive>
1a00303c:	1a003c2d 	.word	0x1a003c2d
1a003040:	1a003c51 	.word	0x1a003c51
1a003044:	1a003c91 	.word	0x1a003c91
1a003048:	1a003cb1 	.word	0x1a003cb1

1a00304c <_cleanup_r>:
1a00304c:	4901      	ldr	r1, [pc, #4]	; (1a003054 <_cleanup_r+0x8>)
1a00304e:	f000 b97f 	b.w	1a003350 <_fwalk_reent>
1a003052:	bf00      	nop
1a003054:	1a002d85 	.word	0x1a002d85

1a003058 <__sinit>:
1a003058:	b510      	push	{r4, lr}
1a00305a:	4604      	mov	r4, r0
1a00305c:	4811      	ldr	r0, [pc, #68]	; (1a0030a4 <__sinit+0x4c>)
1a00305e:	f000 f9c9 	bl	1a0033f4 <__retarget_lock_acquire_recursive>
1a003062:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003064:	b9c2      	cbnz	r2, 1a003098 <__sinit+0x40>
1a003066:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a00306a:	480f      	ldr	r0, [pc, #60]	; (1a0030a8 <__sinit+0x50>)
1a00306c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a003070:	2103      	movs	r1, #3
1a003072:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a003076:	63e0      	str	r0, [r4, #60]	; 0x3c
1a003078:	2104      	movs	r1, #4
1a00307a:	6860      	ldr	r0, [r4, #4]
1a00307c:	f7ff ffbe 	bl	1a002ffc <std>
1a003080:	2201      	movs	r2, #1
1a003082:	2109      	movs	r1, #9
1a003084:	68a0      	ldr	r0, [r4, #8]
1a003086:	f7ff ffb9 	bl	1a002ffc <std>
1a00308a:	2202      	movs	r2, #2
1a00308c:	2112      	movs	r1, #18
1a00308e:	68e0      	ldr	r0, [r4, #12]
1a003090:	f7ff ffb4 	bl	1a002ffc <std>
1a003094:	2301      	movs	r3, #1
1a003096:	63a3      	str	r3, [r4, #56]	; 0x38
1a003098:	4802      	ldr	r0, [pc, #8]	; (1a0030a4 <__sinit+0x4c>)
1a00309a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00309e:	f000 b9ab 	b.w	1a0033f8 <__retarget_lock_release_recursive>
1a0030a2:	bf00      	nop
1a0030a4:	10002b9c 	.word	0x10002b9c
1a0030a8:	1a00304d 	.word	0x1a00304d

1a0030ac <__sfp_lock_acquire>:
1a0030ac:	4801      	ldr	r0, [pc, #4]	; (1a0030b4 <__sfp_lock_acquire+0x8>)
1a0030ae:	f000 b9a1 	b.w	1a0033f4 <__retarget_lock_acquire_recursive>
1a0030b2:	bf00      	nop
1a0030b4:	10002bb0 	.word	0x10002bb0

1a0030b8 <__sfp_lock_release>:
1a0030b8:	4801      	ldr	r0, [pc, #4]	; (1a0030c0 <__sfp_lock_release+0x8>)
1a0030ba:	f000 b99d 	b.w	1a0033f8 <__retarget_lock_release_recursive>
1a0030be:	bf00      	nop
1a0030c0:	10002bb0 	.word	0x10002bb0

1a0030c4 <_malloc_trim_r>:
1a0030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0030c6:	4f24      	ldr	r7, [pc, #144]	; (1a003158 <_malloc_trim_r+0x94>)
1a0030c8:	460c      	mov	r4, r1
1a0030ca:	4606      	mov	r6, r0
1a0030cc:	f000 fd38 	bl	1a003b40 <__malloc_lock>
1a0030d0:	68bb      	ldr	r3, [r7, #8]
1a0030d2:	685d      	ldr	r5, [r3, #4]
1a0030d4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a0030d8:	310f      	adds	r1, #15
1a0030da:	f025 0503 	bic.w	r5, r5, #3
1a0030de:	4429      	add	r1, r5
1a0030e0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a0030e4:	f021 010f 	bic.w	r1, r1, #15
1a0030e8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0030ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0030f0:	db07      	blt.n	1a003102 <_malloc_trim_r+0x3e>
1a0030f2:	2100      	movs	r1, #0
1a0030f4:	4630      	mov	r0, r6
1a0030f6:	f7fd fadb 	bl	1a0006b0 <_sbrk_r>
1a0030fa:	68bb      	ldr	r3, [r7, #8]
1a0030fc:	442b      	add	r3, r5
1a0030fe:	4298      	cmp	r0, r3
1a003100:	d004      	beq.n	1a00310c <_malloc_trim_r+0x48>
1a003102:	4630      	mov	r0, r6
1a003104:	f000 fd22 	bl	1a003b4c <__malloc_unlock>
1a003108:	2000      	movs	r0, #0
1a00310a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00310c:	4261      	negs	r1, r4
1a00310e:	4630      	mov	r0, r6
1a003110:	f7fd face 	bl	1a0006b0 <_sbrk_r>
1a003114:	3001      	adds	r0, #1
1a003116:	d00d      	beq.n	1a003134 <_malloc_trim_r+0x70>
1a003118:	4b10      	ldr	r3, [pc, #64]	; (1a00315c <_malloc_trim_r+0x98>)
1a00311a:	68ba      	ldr	r2, [r7, #8]
1a00311c:	6819      	ldr	r1, [r3, #0]
1a00311e:	1b2d      	subs	r5, r5, r4
1a003120:	f045 0501 	orr.w	r5, r5, #1
1a003124:	4630      	mov	r0, r6
1a003126:	1b09      	subs	r1, r1, r4
1a003128:	6055      	str	r5, [r2, #4]
1a00312a:	6019      	str	r1, [r3, #0]
1a00312c:	f000 fd0e 	bl	1a003b4c <__malloc_unlock>
1a003130:	2001      	movs	r0, #1
1a003132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003134:	2100      	movs	r1, #0
1a003136:	4630      	mov	r0, r6
1a003138:	f7fd faba 	bl	1a0006b0 <_sbrk_r>
1a00313c:	68ba      	ldr	r2, [r7, #8]
1a00313e:	1a83      	subs	r3, r0, r2
1a003140:	2b0f      	cmp	r3, #15
1a003142:	ddde      	ble.n	1a003102 <_malloc_trim_r+0x3e>
1a003144:	4c06      	ldr	r4, [pc, #24]	; (1a003160 <_malloc_trim_r+0x9c>)
1a003146:	4905      	ldr	r1, [pc, #20]	; (1a00315c <_malloc_trim_r+0x98>)
1a003148:	6824      	ldr	r4, [r4, #0]
1a00314a:	f043 0301 	orr.w	r3, r3, #1
1a00314e:	1b00      	subs	r0, r0, r4
1a003150:	6053      	str	r3, [r2, #4]
1a003152:	6008      	str	r0, [r1, #0]
1a003154:	e7d5      	b.n	1a003102 <_malloc_trim_r+0x3e>
1a003156:	bf00      	nop
1a003158:	10000468 	.word	0x10000468
1a00315c:	10002b40 	.word	0x10002b40
1a003160:	10000870 	.word	0x10000870

1a003164 <_free_r>:
1a003164:	2900      	cmp	r1, #0
1a003166:	d05d      	beq.n	1a003224 <_free_r+0xc0>
1a003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00316a:	460f      	mov	r7, r1
1a00316c:	4606      	mov	r6, r0
1a00316e:	f000 fce7 	bl	1a003b40 <__malloc_lock>
1a003172:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a003176:	4c73      	ldr	r4, [pc, #460]	; (1a003344 <_free_r+0x1e0>)
1a003178:	f02c 0301 	bic.w	r3, ip, #1
1a00317c:	f1a7 0008 	sub.w	r0, r7, #8
1a003180:	18c2      	adds	r2, r0, r3
1a003182:	68a1      	ldr	r1, [r4, #8]
1a003184:	6855      	ldr	r5, [r2, #4]
1a003186:	4291      	cmp	r1, r2
1a003188:	f025 0503 	bic.w	r5, r5, #3
1a00318c:	d07f      	beq.n	1a00328e <_free_r+0x12a>
1a00318e:	f01c 0f01 	tst.w	ip, #1
1a003192:	6055      	str	r5, [r2, #4]
1a003194:	eb02 0105 	add.w	r1, r2, r5
1a003198:	d133      	bne.n	1a003202 <_free_r+0x9e>
1a00319a:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a00319e:	6849      	ldr	r1, [r1, #4]
1a0031a0:	eba0 000e 	sub.w	r0, r0, lr
1a0031a4:	f104 0c08 	add.w	ip, r4, #8
1a0031a8:	6887      	ldr	r7, [r0, #8]
1a0031aa:	4567      	cmp	r7, ip
1a0031ac:	4473      	add	r3, lr
1a0031ae:	f001 0101 	and.w	r1, r1, #1
1a0031b2:	d060      	beq.n	1a003276 <_free_r+0x112>
1a0031b4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a0031b8:	f8c7 e00c 	str.w	lr, [r7, #12]
1a0031bc:	f8ce 7008 	str.w	r7, [lr, #8]
1a0031c0:	2900      	cmp	r1, #0
1a0031c2:	f000 8089 	beq.w	1a0032d8 <_free_r+0x174>
1a0031c6:	f043 0101 	orr.w	r1, r3, #1
1a0031ca:	6041      	str	r1, [r0, #4]
1a0031cc:	6013      	str	r3, [r2, #0]
1a0031ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0031d2:	d230      	bcs.n	1a003236 <_free_r+0xd2>
1a0031d4:	08db      	lsrs	r3, r3, #3
1a0031d6:	1c59      	adds	r1, r3, #1
1a0031d8:	6865      	ldr	r5, [r4, #4]
1a0031da:	109a      	asrs	r2, r3, #2
1a0031dc:	2301      	movs	r3, #1
1a0031de:	4093      	lsls	r3, r2
1a0031e0:	432b      	orrs	r3, r5
1a0031e2:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a0031e6:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a0031ea:	6063      	str	r3, [r4, #4]
1a0031ec:	3a08      	subs	r2, #8
1a0031ee:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a0031f2:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a0031f6:	60e8      	str	r0, [r5, #12]
1a0031f8:	4630      	mov	r0, r6
1a0031fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0031fe:	f000 bca5 	b.w	1a003b4c <__malloc_unlock>
1a003202:	6849      	ldr	r1, [r1, #4]
1a003204:	07c9      	lsls	r1, r1, #31
1a003206:	d40e      	bmi.n	1a003226 <_free_r+0xc2>
1a003208:	442b      	add	r3, r5
1a00320a:	f104 0c08 	add.w	ip, r4, #8
1a00320e:	6891      	ldr	r1, [r2, #8]
1a003210:	4561      	cmp	r1, ip
1a003212:	f043 0501 	orr.w	r5, r3, #1
1a003216:	d067      	beq.n	1a0032e8 <_free_r+0x184>
1a003218:	68d2      	ldr	r2, [r2, #12]
1a00321a:	60ca      	str	r2, [r1, #12]
1a00321c:	6091      	str	r1, [r2, #8]
1a00321e:	6045      	str	r5, [r0, #4]
1a003220:	50c3      	str	r3, [r0, r3]
1a003222:	e7d4      	b.n	1a0031ce <_free_r+0x6a>
1a003224:	4770      	bx	lr
1a003226:	f043 0101 	orr.w	r1, r3, #1
1a00322a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00322e:	f847 1c04 	str.w	r1, [r7, #-4]
1a003232:	6013      	str	r3, [r2, #0]
1a003234:	d3ce      	bcc.n	1a0031d4 <_free_r+0x70>
1a003236:	0a5a      	lsrs	r2, r3, #9
1a003238:	2a04      	cmp	r2, #4
1a00323a:	d842      	bhi.n	1a0032c2 <_free_r+0x15e>
1a00323c:	099a      	lsrs	r2, r3, #6
1a00323e:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a003242:	00ff      	lsls	r7, r7, #3
1a003244:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a003248:	19e5      	adds	r5, r4, r7
1a00324a:	59e2      	ldr	r2, [r4, r7]
1a00324c:	3d08      	subs	r5, #8
1a00324e:	4295      	cmp	r5, r2
1a003250:	d051      	beq.n	1a0032f6 <_free_r+0x192>
1a003252:	6851      	ldr	r1, [r2, #4]
1a003254:	f021 0103 	bic.w	r1, r1, #3
1a003258:	4299      	cmp	r1, r3
1a00325a:	d902      	bls.n	1a003262 <_free_r+0xfe>
1a00325c:	6892      	ldr	r2, [r2, #8]
1a00325e:	4295      	cmp	r5, r2
1a003260:	d1f7      	bne.n	1a003252 <_free_r+0xee>
1a003262:	68d5      	ldr	r5, [r2, #12]
1a003264:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a003268:	60a8      	str	r0, [r5, #8]
1a00326a:	60d0      	str	r0, [r2, #12]
1a00326c:	4630      	mov	r0, r6
1a00326e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a003272:	f000 bc6b 	b.w	1a003b4c <__malloc_unlock>
1a003276:	2900      	cmp	r1, #0
1a003278:	d15e      	bne.n	1a003338 <_free_r+0x1d4>
1a00327a:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a00327e:	442b      	add	r3, r5
1a003280:	f043 0401 	orr.w	r4, r3, #1
1a003284:	60ca      	str	r2, [r1, #12]
1a003286:	6091      	str	r1, [r2, #8]
1a003288:	6044      	str	r4, [r0, #4]
1a00328a:	50c3      	str	r3, [r0, r3]
1a00328c:	e7b4      	b.n	1a0031f8 <_free_r+0x94>
1a00328e:	f01c 0f01 	tst.w	ip, #1
1a003292:	442b      	add	r3, r5
1a003294:	d107      	bne.n	1a0032a6 <_free_r+0x142>
1a003296:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a00329a:	1a80      	subs	r0, r0, r2
1a00329c:	4413      	add	r3, r2
1a00329e:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a0032a2:	60ca      	str	r2, [r1, #12]
1a0032a4:	6091      	str	r1, [r2, #8]
1a0032a6:	4a28      	ldr	r2, [pc, #160]	; (1a003348 <_free_r+0x1e4>)
1a0032a8:	6812      	ldr	r2, [r2, #0]
1a0032aa:	f043 0101 	orr.w	r1, r3, #1
1a0032ae:	429a      	cmp	r2, r3
1a0032b0:	6041      	str	r1, [r0, #4]
1a0032b2:	60a0      	str	r0, [r4, #8]
1a0032b4:	d8a0      	bhi.n	1a0031f8 <_free_r+0x94>
1a0032b6:	4b25      	ldr	r3, [pc, #148]	; (1a00334c <_free_r+0x1e8>)
1a0032b8:	4630      	mov	r0, r6
1a0032ba:	6819      	ldr	r1, [r3, #0]
1a0032bc:	f7ff ff02 	bl	1a0030c4 <_malloc_trim_r>
1a0032c0:	e79a      	b.n	1a0031f8 <_free_r+0x94>
1a0032c2:	2a14      	cmp	r2, #20
1a0032c4:	d90a      	bls.n	1a0032dc <_free_r+0x178>
1a0032c6:	2a54      	cmp	r2, #84	; 0x54
1a0032c8:	d81d      	bhi.n	1a003306 <_free_r+0x1a2>
1a0032ca:	0b1a      	lsrs	r2, r3, #12
1a0032cc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a0032d0:	00ff      	lsls	r7, r7, #3
1a0032d2:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a0032d6:	e7b7      	b.n	1a003248 <_free_r+0xe4>
1a0032d8:	442b      	add	r3, r5
1a0032da:	e798      	b.n	1a00320e <_free_r+0xaa>
1a0032dc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a0032e0:	00ff      	lsls	r7, r7, #3
1a0032e2:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a0032e6:	e7af      	b.n	1a003248 <_free_r+0xe4>
1a0032e8:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a0032ec:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a0032f0:	6045      	str	r5, [r0, #4]
1a0032f2:	50c3      	str	r3, [r0, r3]
1a0032f4:	e780      	b.n	1a0031f8 <_free_r+0x94>
1a0032f6:	6863      	ldr	r3, [r4, #4]
1a0032f8:	1089      	asrs	r1, r1, #2
1a0032fa:	2701      	movs	r7, #1
1a0032fc:	fa07 f101 	lsl.w	r1, r7, r1
1a003300:	4319      	orrs	r1, r3
1a003302:	6061      	str	r1, [r4, #4]
1a003304:	e7ae      	b.n	1a003264 <_free_r+0x100>
1a003306:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a00330a:	d806      	bhi.n	1a00331a <_free_r+0x1b6>
1a00330c:	0bda      	lsrs	r2, r3, #15
1a00330e:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a003312:	00ff      	lsls	r7, r7, #3
1a003314:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a003318:	e796      	b.n	1a003248 <_free_r+0xe4>
1a00331a:	f240 5154 	movw	r1, #1364	; 0x554
1a00331e:	428a      	cmp	r2, r1
1a003320:	d806      	bhi.n	1a003330 <_free_r+0x1cc>
1a003322:	0c9a      	lsrs	r2, r3, #18
1a003324:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a003328:	00ff      	lsls	r7, r7, #3
1a00332a:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a00332e:	e78b      	b.n	1a003248 <_free_r+0xe4>
1a003330:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a003334:	217e      	movs	r1, #126	; 0x7e
1a003336:	e787      	b.n	1a003248 <_free_r+0xe4>
1a003338:	f043 0101 	orr.w	r1, r3, #1
1a00333c:	6041      	str	r1, [r0, #4]
1a00333e:	6013      	str	r3, [r2, #0]
1a003340:	e75a      	b.n	1a0031f8 <_free_r+0x94>
1a003342:	bf00      	nop
1a003344:	10000468 	.word	0x10000468
1a003348:	10000874 	.word	0x10000874
1a00334c:	10002b70 	.word	0x10002b70

1a003350 <_fwalk_reent>:
1a003350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003354:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a003358:	d01f      	beq.n	1a00339a <_fwalk_reent+0x4a>
1a00335a:	4688      	mov	r8, r1
1a00335c:	4606      	mov	r6, r0
1a00335e:	f04f 0900 	mov.w	r9, #0
1a003362:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a003366:	3d01      	subs	r5, #1
1a003368:	d411      	bmi.n	1a00338e <_fwalk_reent+0x3e>
1a00336a:	89a3      	ldrh	r3, [r4, #12]
1a00336c:	2b01      	cmp	r3, #1
1a00336e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a003372:	d908      	bls.n	1a003386 <_fwalk_reent+0x36>
1a003374:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a003378:	3301      	adds	r3, #1
1a00337a:	4621      	mov	r1, r4
1a00337c:	4630      	mov	r0, r6
1a00337e:	d002      	beq.n	1a003386 <_fwalk_reent+0x36>
1a003380:	47c0      	blx	r8
1a003382:	ea49 0900 	orr.w	r9, r9, r0
1a003386:	1c6b      	adds	r3, r5, #1
1a003388:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a00338c:	d1ed      	bne.n	1a00336a <_fwalk_reent+0x1a>
1a00338e:	683f      	ldr	r7, [r7, #0]
1a003390:	2f00      	cmp	r7, #0
1a003392:	d1e6      	bne.n	1a003362 <_fwalk_reent+0x12>
1a003394:	4648      	mov	r0, r9
1a003396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00339a:	46b9      	mov	r9, r7
1a00339c:	4648      	mov	r0, r9
1a00339e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0033a2:	bf00      	nop

1a0033a4 <__libc_init_array>:
1a0033a4:	b570      	push	{r4, r5, r6, lr}
1a0033a6:	4e0d      	ldr	r6, [pc, #52]	; (1a0033dc <__libc_init_array+0x38>)
1a0033a8:	4d0d      	ldr	r5, [pc, #52]	; (1a0033e0 <__libc_init_array+0x3c>)
1a0033aa:	1b76      	subs	r6, r6, r5
1a0033ac:	10b6      	asrs	r6, r6, #2
1a0033ae:	d006      	beq.n	1a0033be <__libc_init_array+0x1a>
1a0033b0:	2400      	movs	r4, #0
1a0033b2:	3401      	adds	r4, #1
1a0033b4:	f855 3b04 	ldr.w	r3, [r5], #4
1a0033b8:	4798      	blx	r3
1a0033ba:	42a6      	cmp	r6, r4
1a0033bc:	d1f9      	bne.n	1a0033b2 <__libc_init_array+0xe>
1a0033be:	4e09      	ldr	r6, [pc, #36]	; (1a0033e4 <__libc_init_array+0x40>)
1a0033c0:	4d09      	ldr	r5, [pc, #36]	; (1a0033e8 <__libc_init_array+0x44>)
1a0033c2:	1b76      	subs	r6, r6, r5
1a0033c4:	f7fd f91a 	bl	1a0005fc <_init>
1a0033c8:	10b6      	asrs	r6, r6, #2
1a0033ca:	d006      	beq.n	1a0033da <__libc_init_array+0x36>
1a0033cc:	2400      	movs	r4, #0
1a0033ce:	3401      	adds	r4, #1
1a0033d0:	f855 3b04 	ldr.w	r3, [r5], #4
1a0033d4:	4798      	blx	r3
1a0033d6:	42a6      	cmp	r6, r4
1a0033d8:	d1f9      	bne.n	1a0033ce <__libc_init_array+0x2a>
1a0033da:	bd70      	pop	{r4, r5, r6, pc}
1a0033dc:	1a00823c 	.word	0x1a00823c
1a0033e0:	1a00823c 	.word	0x1a00823c
1a0033e4:	1a008240 	.word	0x1a008240
1a0033e8:	1a00823c 	.word	0x1a00823c

1a0033ec <__retarget_lock_init_recursive>:
1a0033ec:	4770      	bx	lr
1a0033ee:	bf00      	nop

1a0033f0 <__retarget_lock_close_recursive>:
1a0033f0:	4770      	bx	lr
1a0033f2:	bf00      	nop

1a0033f4 <__retarget_lock_acquire_recursive>:
1a0033f4:	4770      	bx	lr
1a0033f6:	bf00      	nop

1a0033f8 <__retarget_lock_release_recursive>:
1a0033f8:	4770      	bx	lr
1a0033fa:	bf00      	nop

1a0033fc <_malloc_r>:
1a0033fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003400:	f101 050b 	add.w	r5, r1, #11
1a003404:	2d16      	cmp	r5, #22
1a003406:	b083      	sub	sp, #12
1a003408:	4606      	mov	r6, r0
1a00340a:	d823      	bhi.n	1a003454 <_malloc_r+0x58>
1a00340c:	2910      	cmp	r1, #16
1a00340e:	f200 80b9 	bhi.w	1a003584 <_malloc_r+0x188>
1a003412:	f000 fb95 	bl	1a003b40 <__malloc_lock>
1a003416:	2510      	movs	r5, #16
1a003418:	2318      	movs	r3, #24
1a00341a:	2002      	movs	r0, #2
1a00341c:	4fba      	ldr	r7, [pc, #744]	; (1a003708 <_malloc_r+0x30c>)
1a00341e:	443b      	add	r3, r7
1a003420:	f1a3 0208 	sub.w	r2, r3, #8
1a003424:	685c      	ldr	r4, [r3, #4]
1a003426:	4294      	cmp	r4, r2
1a003428:	f000 80b9 	beq.w	1a00359e <_malloc_r+0x1a2>
1a00342c:	6863      	ldr	r3, [r4, #4]
1a00342e:	f023 0303 	bic.w	r3, r3, #3
1a003432:	4423      	add	r3, r4
1a003434:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a003438:	685a      	ldr	r2, [r3, #4]
1a00343a:	60e9      	str	r1, [r5, #12]
1a00343c:	f042 0201 	orr.w	r2, r2, #1
1a003440:	4630      	mov	r0, r6
1a003442:	608d      	str	r5, [r1, #8]
1a003444:	605a      	str	r2, [r3, #4]
1a003446:	f000 fb81 	bl	1a003b4c <__malloc_unlock>
1a00344a:	3408      	adds	r4, #8
1a00344c:	4620      	mov	r0, r4
1a00344e:	b003      	add	sp, #12
1a003450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003454:	f035 0507 	bics.w	r5, r5, #7
1a003458:	f100 8094 	bmi.w	1a003584 <_malloc_r+0x188>
1a00345c:	42a9      	cmp	r1, r5
1a00345e:	f200 8091 	bhi.w	1a003584 <_malloc_r+0x188>
1a003462:	f000 fb6d 	bl	1a003b40 <__malloc_lock>
1a003466:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a00346a:	f0c0 81a2 	bcc.w	1a0037b2 <_malloc_r+0x3b6>
1a00346e:	0a6b      	lsrs	r3, r5, #9
1a003470:	f000 808f 	beq.w	1a003592 <_malloc_r+0x196>
1a003474:	2b04      	cmp	r3, #4
1a003476:	f200 8178 	bhi.w	1a00376a <_malloc_r+0x36e>
1a00347a:	09ab      	lsrs	r3, r5, #6
1a00347c:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a003480:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a003484:	00c3      	lsls	r3, r0, #3
1a003486:	4fa0      	ldr	r7, [pc, #640]	; (1a003708 <_malloc_r+0x30c>)
1a003488:	443b      	add	r3, r7
1a00348a:	f1a3 0108 	sub.w	r1, r3, #8
1a00348e:	685c      	ldr	r4, [r3, #4]
1a003490:	42a1      	cmp	r1, r4
1a003492:	d106      	bne.n	1a0034a2 <_malloc_r+0xa6>
1a003494:	e00c      	b.n	1a0034b0 <_malloc_r+0xb4>
1a003496:	2a00      	cmp	r2, #0
1a003498:	f280 8127 	bge.w	1a0036ea <_malloc_r+0x2ee>
1a00349c:	68e4      	ldr	r4, [r4, #12]
1a00349e:	42a1      	cmp	r1, r4
1a0034a0:	d006      	beq.n	1a0034b0 <_malloc_r+0xb4>
1a0034a2:	6863      	ldr	r3, [r4, #4]
1a0034a4:	f023 0303 	bic.w	r3, r3, #3
1a0034a8:	1b5a      	subs	r2, r3, r5
1a0034aa:	2a0f      	cmp	r2, #15
1a0034ac:	ddf3      	ble.n	1a003496 <_malloc_r+0x9a>
1a0034ae:	4660      	mov	r0, ip
1a0034b0:	693c      	ldr	r4, [r7, #16]
1a0034b2:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a00371c <_malloc_r+0x320>
1a0034b6:	4564      	cmp	r4, ip
1a0034b8:	d07c      	beq.n	1a0035b4 <_malloc_r+0x1b8>
1a0034ba:	6863      	ldr	r3, [r4, #4]
1a0034bc:	f023 0303 	bic.w	r3, r3, #3
1a0034c0:	1b5a      	subs	r2, r3, r5
1a0034c2:	2a0f      	cmp	r2, #15
1a0034c4:	f300 8183 	bgt.w	1a0037ce <_malloc_r+0x3d2>
1a0034c8:	2a00      	cmp	r2, #0
1a0034ca:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a0034ce:	f280 8174 	bge.w	1a0037ba <_malloc_r+0x3be>
1a0034d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0034d6:	f080 8125 	bcs.w	1a003724 <_malloc_r+0x328>
1a0034da:	08db      	lsrs	r3, r3, #3
1a0034dc:	1c59      	adds	r1, r3, #1
1a0034de:	687a      	ldr	r2, [r7, #4]
1a0034e0:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a0034e4:	f8c4 8008 	str.w	r8, [r4, #8]
1a0034e8:	f04f 0e01 	mov.w	lr, #1
1a0034ec:	109b      	asrs	r3, r3, #2
1a0034ee:	fa0e f303 	lsl.w	r3, lr, r3
1a0034f2:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a0034f6:	4313      	orrs	r3, r2
1a0034f8:	f1ae 0208 	sub.w	r2, lr, #8
1a0034fc:	60e2      	str	r2, [r4, #12]
1a0034fe:	607b      	str	r3, [r7, #4]
1a003500:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a003504:	f8c8 400c 	str.w	r4, [r8, #12]
1a003508:	1082      	asrs	r2, r0, #2
1a00350a:	2401      	movs	r4, #1
1a00350c:	4094      	lsls	r4, r2
1a00350e:	429c      	cmp	r4, r3
1a003510:	d856      	bhi.n	1a0035c0 <_malloc_r+0x1c4>
1a003512:	421c      	tst	r4, r3
1a003514:	d106      	bne.n	1a003524 <_malloc_r+0x128>
1a003516:	f020 0003 	bic.w	r0, r0, #3
1a00351a:	0064      	lsls	r4, r4, #1
1a00351c:	421c      	tst	r4, r3
1a00351e:	f100 0004 	add.w	r0, r0, #4
1a003522:	d0fa      	beq.n	1a00351a <_malloc_r+0x11e>
1a003524:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a003528:	46ce      	mov	lr, r9
1a00352a:	4680      	mov	r8, r0
1a00352c:	f8de 300c 	ldr.w	r3, [lr, #12]
1a003530:	459e      	cmp	lr, r3
1a003532:	d107      	bne.n	1a003544 <_malloc_r+0x148>
1a003534:	e125      	b.n	1a003782 <_malloc_r+0x386>
1a003536:	2a00      	cmp	r2, #0
1a003538:	f280 812c 	bge.w	1a003794 <_malloc_r+0x398>
1a00353c:	68db      	ldr	r3, [r3, #12]
1a00353e:	459e      	cmp	lr, r3
1a003540:	f000 811f 	beq.w	1a003782 <_malloc_r+0x386>
1a003544:	6859      	ldr	r1, [r3, #4]
1a003546:	f021 0103 	bic.w	r1, r1, #3
1a00354a:	1b4a      	subs	r2, r1, r5
1a00354c:	2a0f      	cmp	r2, #15
1a00354e:	ddf2      	ble.n	1a003536 <_malloc_r+0x13a>
1a003550:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a003554:	195c      	adds	r4, r3, r5
1a003556:	f045 0501 	orr.w	r5, r5, #1
1a00355a:	605d      	str	r5, [r3, #4]
1a00355c:	f042 0501 	orr.w	r5, r2, #1
1a003560:	f8c8 e00c 	str.w	lr, [r8, #12]
1a003564:	4630      	mov	r0, r6
1a003566:	f8ce 8008 	str.w	r8, [lr, #8]
1a00356a:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a00356e:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a003572:	6065      	str	r5, [r4, #4]
1a003574:	505a      	str	r2, [r3, r1]
1a003576:	9300      	str	r3, [sp, #0]
1a003578:	f000 fae8 	bl	1a003b4c <__malloc_unlock>
1a00357c:	9b00      	ldr	r3, [sp, #0]
1a00357e:	f103 0408 	add.w	r4, r3, #8
1a003582:	e002      	b.n	1a00358a <_malloc_r+0x18e>
1a003584:	230c      	movs	r3, #12
1a003586:	6033      	str	r3, [r6, #0]
1a003588:	2400      	movs	r4, #0
1a00358a:	4620      	mov	r0, r4
1a00358c:	b003      	add	sp, #12
1a00358e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003592:	f44f 7300 	mov.w	r3, #512	; 0x200
1a003596:	2040      	movs	r0, #64	; 0x40
1a003598:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a00359c:	e773      	b.n	1a003486 <_malloc_r+0x8a>
1a00359e:	68dc      	ldr	r4, [r3, #12]
1a0035a0:	42a3      	cmp	r3, r4
1a0035a2:	bf08      	it	eq
1a0035a4:	3002      	addeq	r0, #2
1a0035a6:	f47f af41 	bne.w	1a00342c <_malloc_r+0x30>
1a0035aa:	693c      	ldr	r4, [r7, #16]
1a0035ac:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a00371c <_malloc_r+0x320>
1a0035b0:	4564      	cmp	r4, ip
1a0035b2:	d182      	bne.n	1a0034ba <_malloc_r+0xbe>
1a0035b4:	687b      	ldr	r3, [r7, #4]
1a0035b6:	1082      	asrs	r2, r0, #2
1a0035b8:	2401      	movs	r4, #1
1a0035ba:	4094      	lsls	r4, r2
1a0035bc:	429c      	cmp	r4, r3
1a0035be:	d9a8      	bls.n	1a003512 <_malloc_r+0x116>
1a0035c0:	68bc      	ldr	r4, [r7, #8]
1a0035c2:	6863      	ldr	r3, [r4, #4]
1a0035c4:	f023 0803 	bic.w	r8, r3, #3
1a0035c8:	45a8      	cmp	r8, r5
1a0035ca:	d303      	bcc.n	1a0035d4 <_malloc_r+0x1d8>
1a0035cc:	eba8 0305 	sub.w	r3, r8, r5
1a0035d0:	2b0f      	cmp	r3, #15
1a0035d2:	dc7a      	bgt.n	1a0036ca <_malloc_r+0x2ce>
1a0035d4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a003720 <_malloc_r+0x324>
1a0035d8:	4b4c      	ldr	r3, [pc, #304]	; (1a00370c <_malloc_r+0x310>)
1a0035da:	f8d9 2000 	ldr.w	r2, [r9]
1a0035de:	681b      	ldr	r3, [r3, #0]
1a0035e0:	3201      	adds	r2, #1
1a0035e2:	442b      	add	r3, r5
1a0035e4:	eb04 0a08 	add.w	sl, r4, r8
1a0035e8:	f000 813c 	beq.w	1a003864 <_malloc_r+0x468>
1a0035ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0035f0:	330f      	adds	r3, #15
1a0035f2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a0035f6:	f02b 0b0f 	bic.w	fp, fp, #15
1a0035fa:	4659      	mov	r1, fp
1a0035fc:	4630      	mov	r0, r6
1a0035fe:	f7fd f857 	bl	1a0006b0 <_sbrk_r>
1a003602:	1c41      	adds	r1, r0, #1
1a003604:	4602      	mov	r2, r0
1a003606:	f000 80fc 	beq.w	1a003802 <_malloc_r+0x406>
1a00360a:	4582      	cmp	sl, r0
1a00360c:	f200 80f7 	bhi.w	1a0037fe <_malloc_r+0x402>
1a003610:	4b3f      	ldr	r3, [pc, #252]	; (1a003710 <_malloc_r+0x314>)
1a003612:	6818      	ldr	r0, [r3, #0]
1a003614:	4458      	add	r0, fp
1a003616:	6018      	str	r0, [r3, #0]
1a003618:	4601      	mov	r1, r0
1a00361a:	f000 8157 	beq.w	1a0038cc <_malloc_r+0x4d0>
1a00361e:	f8d9 0000 	ldr.w	r0, [r9]
1a003622:	9301      	str	r3, [sp, #4]
1a003624:	3001      	adds	r0, #1
1a003626:	bf1b      	ittet	ne
1a003628:	eba2 0a0a 	subne.w	sl, r2, sl
1a00362c:	4451      	addne	r1, sl
1a00362e:	f8c9 2000 	streq.w	r2, [r9]
1a003632:	6019      	strne	r1, [r3, #0]
1a003634:	f012 0a07 	ands.w	sl, r2, #7
1a003638:	f000 8120 	beq.w	1a00387c <_malloc_r+0x480>
1a00363c:	f1ca 0108 	rsb	r1, sl, #8
1a003640:	440a      	add	r2, r1
1a003642:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a003646:	4493      	add	fp, r2
1a003648:	3108      	adds	r1, #8
1a00364a:	eba1 010b 	sub.w	r1, r1, fp
1a00364e:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a003652:	4649      	mov	r1, r9
1a003654:	4630      	mov	r0, r6
1a003656:	9200      	str	r2, [sp, #0]
1a003658:	f7fd f82a 	bl	1a0006b0 <_sbrk_r>
1a00365c:	1c42      	adds	r2, r0, #1
1a00365e:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003662:	f000 8158 	beq.w	1a003916 <_malloc_r+0x51a>
1a003666:	1a80      	subs	r0, r0, r2
1a003668:	eb00 0b09 	add.w	fp, r0, r9
1a00366c:	6818      	ldr	r0, [r3, #0]
1a00366e:	60ba      	str	r2, [r7, #8]
1a003670:	f04b 0101 	orr.w	r1, fp, #1
1a003674:	4448      	add	r0, r9
1a003676:	42bc      	cmp	r4, r7
1a003678:	6051      	str	r1, [r2, #4]
1a00367a:	6018      	str	r0, [r3, #0]
1a00367c:	f000 8132 	beq.w	1a0038e4 <_malloc_r+0x4e8>
1a003680:	f1b8 0f0f 	cmp.w	r8, #15
1a003684:	f240 8130 	bls.w	1a0038e8 <_malloc_r+0x4ec>
1a003688:	6861      	ldr	r1, [r4, #4]
1a00368a:	f1a8 0c0c 	sub.w	ip, r8, #12
1a00368e:	f02c 0c07 	bic.w	ip, ip, #7
1a003692:	f001 0101 	and.w	r1, r1, #1
1a003696:	eb04 0e0c 	add.w	lr, r4, ip
1a00369a:	ea41 010c 	orr.w	r1, r1, ip
1a00369e:	f04f 0805 	mov.w	r8, #5
1a0036a2:	f1bc 0f0f 	cmp.w	ip, #15
1a0036a6:	6061      	str	r1, [r4, #4]
1a0036a8:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a0036ac:	f200 813b 	bhi.w	1a003926 <_malloc_r+0x52a>
1a0036b0:	6851      	ldr	r1, [r2, #4]
1a0036b2:	4614      	mov	r4, r2
1a0036b4:	4b17      	ldr	r3, [pc, #92]	; (1a003714 <_malloc_r+0x318>)
1a0036b6:	681a      	ldr	r2, [r3, #0]
1a0036b8:	4282      	cmp	r2, r0
1a0036ba:	bf38      	it	cc
1a0036bc:	6018      	strcc	r0, [r3, #0]
1a0036be:	4b16      	ldr	r3, [pc, #88]	; (1a003718 <_malloc_r+0x31c>)
1a0036c0:	681a      	ldr	r2, [r3, #0]
1a0036c2:	4282      	cmp	r2, r0
1a0036c4:	bf38      	it	cc
1a0036c6:	6018      	strcc	r0, [r3, #0]
1a0036c8:	e09d      	b.n	1a003806 <_malloc_r+0x40a>
1a0036ca:	1962      	adds	r2, r4, r5
1a0036cc:	f043 0301 	orr.w	r3, r3, #1
1a0036d0:	f045 0501 	orr.w	r5, r5, #1
1a0036d4:	6065      	str	r5, [r4, #4]
1a0036d6:	4630      	mov	r0, r6
1a0036d8:	60ba      	str	r2, [r7, #8]
1a0036da:	6053      	str	r3, [r2, #4]
1a0036dc:	f000 fa36 	bl	1a003b4c <__malloc_unlock>
1a0036e0:	3408      	adds	r4, #8
1a0036e2:	4620      	mov	r0, r4
1a0036e4:	b003      	add	sp, #12
1a0036e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0036ea:	4423      	add	r3, r4
1a0036ec:	68e1      	ldr	r1, [r4, #12]
1a0036ee:	685a      	ldr	r2, [r3, #4]
1a0036f0:	68a5      	ldr	r5, [r4, #8]
1a0036f2:	f042 0201 	orr.w	r2, r2, #1
1a0036f6:	60e9      	str	r1, [r5, #12]
1a0036f8:	4630      	mov	r0, r6
1a0036fa:	608d      	str	r5, [r1, #8]
1a0036fc:	605a      	str	r2, [r3, #4]
1a0036fe:	f000 fa25 	bl	1a003b4c <__malloc_unlock>
1a003702:	3408      	adds	r4, #8
1a003704:	e741      	b.n	1a00358a <_malloc_r+0x18e>
1a003706:	bf00      	nop
1a003708:	10000468 	.word	0x10000468
1a00370c:	10002b70 	.word	0x10002b70
1a003710:	10002b40 	.word	0x10002b40
1a003714:	10002b68 	.word	0x10002b68
1a003718:	10002b6c 	.word	0x10002b6c
1a00371c:	10000470 	.word	0x10000470
1a003720:	10000870 	.word	0x10000870
1a003724:	0a5a      	lsrs	r2, r3, #9
1a003726:	2a04      	cmp	r2, #4
1a003728:	d963      	bls.n	1a0037f2 <_malloc_r+0x3f6>
1a00372a:	2a14      	cmp	r2, #20
1a00372c:	f200 80b7 	bhi.w	1a00389e <_malloc_r+0x4a2>
1a003730:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a003734:	00c9      	lsls	r1, r1, #3
1a003736:	325b      	adds	r2, #91	; 0x5b
1a003738:	eb07 0e01 	add.w	lr, r7, r1
1a00373c:	5879      	ldr	r1, [r7, r1]
1a00373e:	f1ae 0e08 	sub.w	lr, lr, #8
1a003742:	458e      	cmp	lr, r1
1a003744:	f000 8091 	beq.w	1a00386a <_malloc_r+0x46e>
1a003748:	684a      	ldr	r2, [r1, #4]
1a00374a:	f022 0203 	bic.w	r2, r2, #3
1a00374e:	429a      	cmp	r2, r3
1a003750:	d902      	bls.n	1a003758 <_malloc_r+0x35c>
1a003752:	6889      	ldr	r1, [r1, #8]
1a003754:	458e      	cmp	lr, r1
1a003756:	d1f7      	bne.n	1a003748 <_malloc_r+0x34c>
1a003758:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a00375c:	687b      	ldr	r3, [r7, #4]
1a00375e:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a003762:	f8ce 4008 	str.w	r4, [lr, #8]
1a003766:	60cc      	str	r4, [r1, #12]
1a003768:	e6ce      	b.n	1a003508 <_malloc_r+0x10c>
1a00376a:	2b14      	cmp	r3, #20
1a00376c:	d959      	bls.n	1a003822 <_malloc_r+0x426>
1a00376e:	2b54      	cmp	r3, #84	; 0x54
1a003770:	f200 809d 	bhi.w	1a0038ae <_malloc_r+0x4b2>
1a003774:	0b2b      	lsrs	r3, r5, #12
1a003776:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a00377a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a00377e:	00c3      	lsls	r3, r0, #3
1a003780:	e681      	b.n	1a003486 <_malloc_r+0x8a>
1a003782:	f108 0801 	add.w	r8, r8, #1
1a003786:	f018 0f03 	tst.w	r8, #3
1a00378a:	f10e 0e08 	add.w	lr, lr, #8
1a00378e:	f47f aecd 	bne.w	1a00352c <_malloc_r+0x130>
1a003792:	e051      	b.n	1a003838 <_malloc_r+0x43c>
1a003794:	4419      	add	r1, r3
1a003796:	461c      	mov	r4, r3
1a003798:	684a      	ldr	r2, [r1, #4]
1a00379a:	68db      	ldr	r3, [r3, #12]
1a00379c:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a0037a0:	f042 0201 	orr.w	r2, r2, #1
1a0037a4:	604a      	str	r2, [r1, #4]
1a0037a6:	4630      	mov	r0, r6
1a0037a8:	60eb      	str	r3, [r5, #12]
1a0037aa:	609d      	str	r5, [r3, #8]
1a0037ac:	f000 f9ce 	bl	1a003b4c <__malloc_unlock>
1a0037b0:	e6eb      	b.n	1a00358a <_malloc_r+0x18e>
1a0037b2:	08e8      	lsrs	r0, r5, #3
1a0037b4:	f105 0308 	add.w	r3, r5, #8
1a0037b8:	e630      	b.n	1a00341c <_malloc_r+0x20>
1a0037ba:	4423      	add	r3, r4
1a0037bc:	4630      	mov	r0, r6
1a0037be:	685a      	ldr	r2, [r3, #4]
1a0037c0:	f042 0201 	orr.w	r2, r2, #1
1a0037c4:	605a      	str	r2, [r3, #4]
1a0037c6:	3408      	adds	r4, #8
1a0037c8:	f000 f9c0 	bl	1a003b4c <__malloc_unlock>
1a0037cc:	e6dd      	b.n	1a00358a <_malloc_r+0x18e>
1a0037ce:	1961      	adds	r1, r4, r5
1a0037d0:	f045 0e01 	orr.w	lr, r5, #1
1a0037d4:	f042 0501 	orr.w	r5, r2, #1
1a0037d8:	f8c4 e004 	str.w	lr, [r4, #4]
1a0037dc:	4630      	mov	r0, r6
1a0037de:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a0037e2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a0037e6:	604d      	str	r5, [r1, #4]
1a0037e8:	50e2      	str	r2, [r4, r3]
1a0037ea:	f000 f9af 	bl	1a003b4c <__malloc_unlock>
1a0037ee:	3408      	adds	r4, #8
1a0037f0:	e6cb      	b.n	1a00358a <_malloc_r+0x18e>
1a0037f2:	099a      	lsrs	r2, r3, #6
1a0037f4:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a0037f8:	00c9      	lsls	r1, r1, #3
1a0037fa:	3238      	adds	r2, #56	; 0x38
1a0037fc:	e79c      	b.n	1a003738 <_malloc_r+0x33c>
1a0037fe:	42bc      	cmp	r4, r7
1a003800:	d05f      	beq.n	1a0038c2 <_malloc_r+0x4c6>
1a003802:	68bc      	ldr	r4, [r7, #8]
1a003804:	6861      	ldr	r1, [r4, #4]
1a003806:	f021 0b03 	bic.w	fp, r1, #3
1a00380a:	45ab      	cmp	fp, r5
1a00380c:	ebab 0305 	sub.w	r3, fp, r5
1a003810:	d302      	bcc.n	1a003818 <_malloc_r+0x41c>
1a003812:	2b0f      	cmp	r3, #15
1a003814:	f73f af59 	bgt.w	1a0036ca <_malloc_r+0x2ce>
1a003818:	4630      	mov	r0, r6
1a00381a:	f000 f997 	bl	1a003b4c <__malloc_unlock>
1a00381e:	2400      	movs	r4, #0
1a003820:	e6b3      	b.n	1a00358a <_malloc_r+0x18e>
1a003822:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a003826:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a00382a:	00c3      	lsls	r3, r0, #3
1a00382c:	e62b      	b.n	1a003486 <_malloc_r+0x8a>
1a00382e:	f859 3908 	ldr.w	r3, [r9], #-8
1a003832:	454b      	cmp	r3, r9
1a003834:	f040 8096 	bne.w	1a003964 <_malloc_r+0x568>
1a003838:	f010 0f03 	tst.w	r0, #3
1a00383c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a003840:	d1f5      	bne.n	1a00382e <_malloc_r+0x432>
1a003842:	687b      	ldr	r3, [r7, #4]
1a003844:	ea23 0304 	bic.w	r3, r3, r4
1a003848:	607b      	str	r3, [r7, #4]
1a00384a:	0064      	lsls	r4, r4, #1
1a00384c:	429c      	cmp	r4, r3
1a00384e:	f63f aeb7 	bhi.w	1a0035c0 <_malloc_r+0x1c4>
1a003852:	b91c      	cbnz	r4, 1a00385c <_malloc_r+0x460>
1a003854:	e6b4      	b.n	1a0035c0 <_malloc_r+0x1c4>
1a003856:	0064      	lsls	r4, r4, #1
1a003858:	f108 0804 	add.w	r8, r8, #4
1a00385c:	421c      	tst	r4, r3
1a00385e:	d0fa      	beq.n	1a003856 <_malloc_r+0x45a>
1a003860:	4640      	mov	r0, r8
1a003862:	e65f      	b.n	1a003524 <_malloc_r+0x128>
1a003864:	f103 0b10 	add.w	fp, r3, #16
1a003868:	e6c7      	b.n	1a0035fa <_malloc_r+0x1fe>
1a00386a:	687b      	ldr	r3, [r7, #4]
1a00386c:	1092      	asrs	r2, r2, #2
1a00386e:	f04f 0801 	mov.w	r8, #1
1a003872:	fa08 f202 	lsl.w	r2, r8, r2
1a003876:	4313      	orrs	r3, r2
1a003878:	607b      	str	r3, [r7, #4]
1a00387a:	e770      	b.n	1a00375e <_malloc_r+0x362>
1a00387c:	eb02 000b 	add.w	r0, r2, fp
1a003880:	4240      	negs	r0, r0
1a003882:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a003886:	4649      	mov	r1, r9
1a003888:	4630      	mov	r0, r6
1a00388a:	9200      	str	r2, [sp, #0]
1a00388c:	f7fc ff10 	bl	1a0006b0 <_sbrk_r>
1a003890:	1c43      	adds	r3, r0, #1
1a003892:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003896:	f47f aee6 	bne.w	1a003666 <_malloc_r+0x26a>
1a00389a:	46d1      	mov	r9, sl
1a00389c:	e6e6      	b.n	1a00366c <_malloc_r+0x270>
1a00389e:	2a54      	cmp	r2, #84	; 0x54
1a0038a0:	d825      	bhi.n	1a0038ee <_malloc_r+0x4f2>
1a0038a2:	0b1a      	lsrs	r2, r3, #12
1a0038a4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a0038a8:	00c9      	lsls	r1, r1, #3
1a0038aa:	326e      	adds	r2, #110	; 0x6e
1a0038ac:	e744      	b.n	1a003738 <_malloc_r+0x33c>
1a0038ae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a0038b2:	d825      	bhi.n	1a003900 <_malloc_r+0x504>
1a0038b4:	0beb      	lsrs	r3, r5, #15
1a0038b6:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a0038ba:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a0038be:	00c3      	lsls	r3, r0, #3
1a0038c0:	e5e1      	b.n	1a003486 <_malloc_r+0x8a>
1a0038c2:	4b29      	ldr	r3, [pc, #164]	; (1a003968 <_malloc_r+0x56c>)
1a0038c4:	6819      	ldr	r1, [r3, #0]
1a0038c6:	4459      	add	r1, fp
1a0038c8:	6019      	str	r1, [r3, #0]
1a0038ca:	e6a8      	b.n	1a00361e <_malloc_r+0x222>
1a0038cc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a0038d0:	f1bc 0f00 	cmp.w	ip, #0
1a0038d4:	f47f aea3 	bne.w	1a00361e <_malloc_r+0x222>
1a0038d8:	44c3      	add	fp, r8
1a0038da:	68bc      	ldr	r4, [r7, #8]
1a0038dc:	f04b 0101 	orr.w	r1, fp, #1
1a0038e0:	6061      	str	r1, [r4, #4]
1a0038e2:	e6e7      	b.n	1a0036b4 <_malloc_r+0x2b8>
1a0038e4:	4614      	mov	r4, r2
1a0038e6:	e6e5      	b.n	1a0036b4 <_malloc_r+0x2b8>
1a0038e8:	2301      	movs	r3, #1
1a0038ea:	6053      	str	r3, [r2, #4]
1a0038ec:	e794      	b.n	1a003818 <_malloc_r+0x41c>
1a0038ee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a0038f2:	d823      	bhi.n	1a00393c <_malloc_r+0x540>
1a0038f4:	0bda      	lsrs	r2, r3, #15
1a0038f6:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a0038fa:	00c9      	lsls	r1, r1, #3
1a0038fc:	3277      	adds	r2, #119	; 0x77
1a0038fe:	e71b      	b.n	1a003738 <_malloc_r+0x33c>
1a003900:	f240 5254 	movw	r2, #1364	; 0x554
1a003904:	4293      	cmp	r3, r2
1a003906:	d823      	bhi.n	1a003950 <_malloc_r+0x554>
1a003908:	0cab      	lsrs	r3, r5, #18
1a00390a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a00390e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a003912:	00c3      	lsls	r3, r0, #3
1a003914:	e5b7      	b.n	1a003486 <_malloc_r+0x8a>
1a003916:	f1aa 0a08 	sub.w	sl, sl, #8
1a00391a:	44d3      	add	fp, sl
1a00391c:	ebab 0b02 	sub.w	fp, fp, r2
1a003920:	f04f 0900 	mov.w	r9, #0
1a003924:	e6a2      	b.n	1a00366c <_malloc_r+0x270>
1a003926:	f104 0108 	add.w	r1, r4, #8
1a00392a:	4630      	mov	r0, r6
1a00392c:	9300      	str	r3, [sp, #0]
1a00392e:	f7ff fc19 	bl	1a003164 <_free_r>
1a003932:	68bc      	ldr	r4, [r7, #8]
1a003934:	9b00      	ldr	r3, [sp, #0]
1a003936:	6861      	ldr	r1, [r4, #4]
1a003938:	6818      	ldr	r0, [r3, #0]
1a00393a:	e6bb      	b.n	1a0036b4 <_malloc_r+0x2b8>
1a00393c:	f240 5154 	movw	r1, #1364	; 0x554
1a003940:	428a      	cmp	r2, r1
1a003942:	d80b      	bhi.n	1a00395c <_malloc_r+0x560>
1a003944:	0c9a      	lsrs	r2, r3, #18
1a003946:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a00394a:	00c9      	lsls	r1, r1, #3
1a00394c:	327c      	adds	r2, #124	; 0x7c
1a00394e:	e6f3      	b.n	1a003738 <_malloc_r+0x33c>
1a003950:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a003954:	207f      	movs	r0, #127	; 0x7f
1a003956:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a00395a:	e594      	b.n	1a003486 <_malloc_r+0x8a>
1a00395c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a003960:	227e      	movs	r2, #126	; 0x7e
1a003962:	e6e9      	b.n	1a003738 <_malloc_r+0x33c>
1a003964:	687b      	ldr	r3, [r7, #4]
1a003966:	e770      	b.n	1a00384a <_malloc_r+0x44e>
1a003968:	10002b40 	.word	0x10002b40

1a00396c <memcpy>:
1a00396c:	4684      	mov	ip, r0
1a00396e:	ea41 0300 	orr.w	r3, r1, r0
1a003972:	f013 0303 	ands.w	r3, r3, #3
1a003976:	d16d      	bne.n	1a003a54 <memcpy+0xe8>
1a003978:	3a40      	subs	r2, #64	; 0x40
1a00397a:	d341      	bcc.n	1a003a00 <memcpy+0x94>
1a00397c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003980:	f840 3b04 	str.w	r3, [r0], #4
1a003984:	f851 3b04 	ldr.w	r3, [r1], #4
1a003988:	f840 3b04 	str.w	r3, [r0], #4
1a00398c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003990:	f840 3b04 	str.w	r3, [r0], #4
1a003994:	f851 3b04 	ldr.w	r3, [r1], #4
1a003998:	f840 3b04 	str.w	r3, [r0], #4
1a00399c:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039a0:	f840 3b04 	str.w	r3, [r0], #4
1a0039a4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039a8:	f840 3b04 	str.w	r3, [r0], #4
1a0039ac:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039b0:	f840 3b04 	str.w	r3, [r0], #4
1a0039b4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039b8:	f840 3b04 	str.w	r3, [r0], #4
1a0039bc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039c0:	f840 3b04 	str.w	r3, [r0], #4
1a0039c4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039c8:	f840 3b04 	str.w	r3, [r0], #4
1a0039cc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039d0:	f840 3b04 	str.w	r3, [r0], #4
1a0039d4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039d8:	f840 3b04 	str.w	r3, [r0], #4
1a0039dc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039e0:	f840 3b04 	str.w	r3, [r0], #4
1a0039e4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039e8:	f840 3b04 	str.w	r3, [r0], #4
1a0039ec:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039f0:	f840 3b04 	str.w	r3, [r0], #4
1a0039f4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039f8:	f840 3b04 	str.w	r3, [r0], #4
1a0039fc:	3a40      	subs	r2, #64	; 0x40
1a0039fe:	d2bd      	bcs.n	1a00397c <memcpy+0x10>
1a003a00:	3230      	adds	r2, #48	; 0x30
1a003a02:	d311      	bcc.n	1a003a28 <memcpy+0xbc>
1a003a04:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a08:	f840 3b04 	str.w	r3, [r0], #4
1a003a0c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a10:	f840 3b04 	str.w	r3, [r0], #4
1a003a14:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a18:	f840 3b04 	str.w	r3, [r0], #4
1a003a1c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a20:	f840 3b04 	str.w	r3, [r0], #4
1a003a24:	3a10      	subs	r2, #16
1a003a26:	d2ed      	bcs.n	1a003a04 <memcpy+0x98>
1a003a28:	320c      	adds	r2, #12
1a003a2a:	d305      	bcc.n	1a003a38 <memcpy+0xcc>
1a003a2c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a30:	f840 3b04 	str.w	r3, [r0], #4
1a003a34:	3a04      	subs	r2, #4
1a003a36:	d2f9      	bcs.n	1a003a2c <memcpy+0xc0>
1a003a38:	3204      	adds	r2, #4
1a003a3a:	d008      	beq.n	1a003a4e <memcpy+0xe2>
1a003a3c:	07d2      	lsls	r2, r2, #31
1a003a3e:	bf1c      	itt	ne
1a003a40:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003a44:	f800 3b01 	strbne.w	r3, [r0], #1
1a003a48:	d301      	bcc.n	1a003a4e <memcpy+0xe2>
1a003a4a:	880b      	ldrh	r3, [r1, #0]
1a003a4c:	8003      	strh	r3, [r0, #0]
1a003a4e:	4660      	mov	r0, ip
1a003a50:	4770      	bx	lr
1a003a52:	bf00      	nop
1a003a54:	2a08      	cmp	r2, #8
1a003a56:	d313      	bcc.n	1a003a80 <memcpy+0x114>
1a003a58:	078b      	lsls	r3, r1, #30
1a003a5a:	d08d      	beq.n	1a003978 <memcpy+0xc>
1a003a5c:	f010 0303 	ands.w	r3, r0, #3
1a003a60:	d08a      	beq.n	1a003978 <memcpy+0xc>
1a003a62:	f1c3 0304 	rsb	r3, r3, #4
1a003a66:	1ad2      	subs	r2, r2, r3
1a003a68:	07db      	lsls	r3, r3, #31
1a003a6a:	bf1c      	itt	ne
1a003a6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003a70:	f800 3b01 	strbne.w	r3, [r0], #1
1a003a74:	d380      	bcc.n	1a003978 <memcpy+0xc>
1a003a76:	f831 3b02 	ldrh.w	r3, [r1], #2
1a003a7a:	f820 3b02 	strh.w	r3, [r0], #2
1a003a7e:	e77b      	b.n	1a003978 <memcpy+0xc>
1a003a80:	3a04      	subs	r2, #4
1a003a82:	d3d9      	bcc.n	1a003a38 <memcpy+0xcc>
1a003a84:	3a01      	subs	r2, #1
1a003a86:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003a8a:	f800 3b01 	strb.w	r3, [r0], #1
1a003a8e:	d2f9      	bcs.n	1a003a84 <memcpy+0x118>
1a003a90:	780b      	ldrb	r3, [r1, #0]
1a003a92:	7003      	strb	r3, [r0, #0]
1a003a94:	784b      	ldrb	r3, [r1, #1]
1a003a96:	7043      	strb	r3, [r0, #1]
1a003a98:	788b      	ldrb	r3, [r1, #2]
1a003a9a:	7083      	strb	r3, [r0, #2]
1a003a9c:	4660      	mov	r0, ip
1a003a9e:	4770      	bx	lr

1a003aa0 <memset>:
1a003aa0:	b4f0      	push	{r4, r5, r6, r7}
1a003aa2:	0786      	lsls	r6, r0, #30
1a003aa4:	d046      	beq.n	1a003b34 <memset+0x94>
1a003aa6:	1e54      	subs	r4, r2, #1
1a003aa8:	2a00      	cmp	r2, #0
1a003aaa:	d03c      	beq.n	1a003b26 <memset+0x86>
1a003aac:	b2ca      	uxtb	r2, r1
1a003aae:	4603      	mov	r3, r0
1a003ab0:	e002      	b.n	1a003ab8 <memset+0x18>
1a003ab2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a003ab6:	d336      	bcc.n	1a003b26 <memset+0x86>
1a003ab8:	f803 2b01 	strb.w	r2, [r3], #1
1a003abc:	079d      	lsls	r5, r3, #30
1a003abe:	d1f8      	bne.n	1a003ab2 <memset+0x12>
1a003ac0:	2c03      	cmp	r4, #3
1a003ac2:	d929      	bls.n	1a003b18 <memset+0x78>
1a003ac4:	b2cd      	uxtb	r5, r1
1a003ac6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003aca:	2c0f      	cmp	r4, #15
1a003acc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003ad0:	d933      	bls.n	1a003b3a <memset+0x9a>
1a003ad2:	f1a4 0610 	sub.w	r6, r4, #16
1a003ad6:	0936      	lsrs	r6, r6, #4
1a003ad8:	f103 0720 	add.w	r7, r3, #32
1a003adc:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a003ae0:	f103 0210 	add.w	r2, r3, #16
1a003ae4:	e942 5504 	strd	r5, r5, [r2, #-16]
1a003ae8:	e942 5502 	strd	r5, r5, [r2, #-8]
1a003aec:	3210      	adds	r2, #16
1a003aee:	42ba      	cmp	r2, r7
1a003af0:	d1f8      	bne.n	1a003ae4 <memset+0x44>
1a003af2:	1c72      	adds	r2, r6, #1
1a003af4:	f014 0f0c 	tst.w	r4, #12
1a003af8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a003afc:	f004 060f 	and.w	r6, r4, #15
1a003b00:	d013      	beq.n	1a003b2a <memset+0x8a>
1a003b02:	1f33      	subs	r3, r6, #4
1a003b04:	f023 0303 	bic.w	r3, r3, #3
1a003b08:	3304      	adds	r3, #4
1a003b0a:	4413      	add	r3, r2
1a003b0c:	f842 5b04 	str.w	r5, [r2], #4
1a003b10:	4293      	cmp	r3, r2
1a003b12:	d1fb      	bne.n	1a003b0c <memset+0x6c>
1a003b14:	f006 0403 	and.w	r4, r6, #3
1a003b18:	b12c      	cbz	r4, 1a003b26 <memset+0x86>
1a003b1a:	b2c9      	uxtb	r1, r1
1a003b1c:	441c      	add	r4, r3
1a003b1e:	f803 1b01 	strb.w	r1, [r3], #1
1a003b22:	429c      	cmp	r4, r3
1a003b24:	d1fb      	bne.n	1a003b1e <memset+0x7e>
1a003b26:	bcf0      	pop	{r4, r5, r6, r7}
1a003b28:	4770      	bx	lr
1a003b2a:	4634      	mov	r4, r6
1a003b2c:	4613      	mov	r3, r2
1a003b2e:	2c00      	cmp	r4, #0
1a003b30:	d1f3      	bne.n	1a003b1a <memset+0x7a>
1a003b32:	e7f8      	b.n	1a003b26 <memset+0x86>
1a003b34:	4614      	mov	r4, r2
1a003b36:	4603      	mov	r3, r0
1a003b38:	e7c2      	b.n	1a003ac0 <memset+0x20>
1a003b3a:	461a      	mov	r2, r3
1a003b3c:	4626      	mov	r6, r4
1a003b3e:	e7e0      	b.n	1a003b02 <memset+0x62>

1a003b40 <__malloc_lock>:
1a003b40:	4801      	ldr	r0, [pc, #4]	; (1a003b48 <__malloc_lock+0x8>)
1a003b42:	f7ff bc57 	b.w	1a0033f4 <__retarget_lock_acquire_recursive>
1a003b46:	bf00      	nop
1a003b48:	10002ba0 	.word	0x10002ba0

1a003b4c <__malloc_unlock>:
1a003b4c:	4801      	ldr	r0, [pc, #4]	; (1a003b54 <__malloc_unlock+0x8>)
1a003b4e:	f7ff bc53 	b.w	1a0033f8 <__retarget_lock_release_recursive>
1a003b52:	bf00      	nop
1a003b54:	10002ba0 	.word	0x10002ba0

1a003b58 <printf>:
1a003b58:	b40f      	push	{r0, r1, r2, r3}
1a003b5a:	b500      	push	{lr}
1a003b5c:	4907      	ldr	r1, [pc, #28]	; (1a003b7c <printf+0x24>)
1a003b5e:	b083      	sub	sp, #12
1a003b60:	ab04      	add	r3, sp, #16
1a003b62:	6808      	ldr	r0, [r1, #0]
1a003b64:	f853 2b04 	ldr.w	r2, [r3], #4
1a003b68:	6881      	ldr	r1, [r0, #8]
1a003b6a:	9301      	str	r3, [sp, #4]
1a003b6c:	f000 f918 	bl	1a003da0 <_vfprintf_r>
1a003b70:	b003      	add	sp, #12
1a003b72:	f85d eb04 	ldr.w	lr, [sp], #4
1a003b76:	b004      	add	sp, #16
1a003b78:	4770      	bx	lr
1a003b7a:	bf00      	nop
1a003b7c:	1000003c 	.word	0x1000003c

1a003b80 <_puts_r>:
1a003b80:	b570      	push	{r4, r5, r6, lr}
1a003b82:	4605      	mov	r5, r0
1a003b84:	b088      	sub	sp, #32
1a003b86:	4608      	mov	r0, r1
1a003b88:	460c      	mov	r4, r1
1a003b8a:	f000 f899 	bl	1a003cc0 <strlen>
1a003b8e:	4a22      	ldr	r2, [pc, #136]	; (1a003c18 <_puts_r+0x98>)
1a003b90:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a003b92:	9404      	str	r4, [sp, #16]
1a003b94:	2601      	movs	r6, #1
1a003b96:	1c44      	adds	r4, r0, #1
1a003b98:	a904      	add	r1, sp, #16
1a003b9a:	9206      	str	r2, [sp, #24]
1a003b9c:	2202      	movs	r2, #2
1a003b9e:	9403      	str	r4, [sp, #12]
1a003ba0:	9005      	str	r0, [sp, #20]
1a003ba2:	68ac      	ldr	r4, [r5, #8]
1a003ba4:	9607      	str	r6, [sp, #28]
1a003ba6:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a003baa:	b31b      	cbz	r3, 1a003bf4 <_puts_r+0x74>
1a003bac:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a003bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003bb2:	07ce      	lsls	r6, r1, #31
1a003bb4:	b29a      	uxth	r2, r3
1a003bb6:	d401      	bmi.n	1a003bbc <_puts_r+0x3c>
1a003bb8:	0590      	lsls	r0, r2, #22
1a003bba:	d525      	bpl.n	1a003c08 <_puts_r+0x88>
1a003bbc:	0491      	lsls	r1, r2, #18
1a003bbe:	d406      	bmi.n	1a003bce <_puts_r+0x4e>
1a003bc0:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a003bc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a003bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a003bca:	81a3      	strh	r3, [r4, #12]
1a003bcc:	6662      	str	r2, [r4, #100]	; 0x64
1a003bce:	4628      	mov	r0, r5
1a003bd0:	aa01      	add	r2, sp, #4
1a003bd2:	4621      	mov	r1, r4
1a003bd4:	f002 fef6 	bl	1a0069c4 <__sfvwrite_r>
1a003bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003bda:	2800      	cmp	r0, #0
1a003bdc:	bf14      	ite	ne
1a003bde:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a003be2:	250a      	moveq	r5, #10
1a003be4:	07da      	lsls	r2, r3, #31
1a003be6:	d402      	bmi.n	1a003bee <_puts_r+0x6e>
1a003be8:	89a3      	ldrh	r3, [r4, #12]
1a003bea:	059b      	lsls	r3, r3, #22
1a003bec:	d506      	bpl.n	1a003bfc <_puts_r+0x7c>
1a003bee:	4628      	mov	r0, r5
1a003bf0:	b008      	add	sp, #32
1a003bf2:	bd70      	pop	{r4, r5, r6, pc}
1a003bf4:	4628      	mov	r0, r5
1a003bf6:	f7ff fa2f 	bl	1a003058 <__sinit>
1a003bfa:	e7d7      	b.n	1a003bac <_puts_r+0x2c>
1a003bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003bfe:	f7ff fbfb 	bl	1a0033f8 <__retarget_lock_release_recursive>
1a003c02:	4628      	mov	r0, r5
1a003c04:	b008      	add	sp, #32
1a003c06:	bd70      	pop	{r4, r5, r6, pc}
1a003c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a003c0a:	f7ff fbf3 	bl	1a0033f4 <__retarget_lock_acquire_recursive>
1a003c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003c12:	b29a      	uxth	r2, r3
1a003c14:	e7d2      	b.n	1a003bbc <_puts_r+0x3c>
1a003c16:	bf00      	nop
1a003c18:	1a0080b8 	.word	0x1a0080b8

1a003c1c <puts>:
1a003c1c:	4b02      	ldr	r3, [pc, #8]	; (1a003c28 <puts+0xc>)
1a003c1e:	4601      	mov	r1, r0
1a003c20:	6818      	ldr	r0, [r3, #0]
1a003c22:	f7ff bfad 	b.w	1a003b80 <_puts_r>
1a003c26:	bf00      	nop
1a003c28:	1000003c 	.word	0x1000003c

1a003c2c <__sread>:
1a003c2c:	b510      	push	{r4, lr}
1a003c2e:	460c      	mov	r4, r1
1a003c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003c34:	f7fc fcfe 	bl	1a000634 <_read_r>
1a003c38:	2800      	cmp	r0, #0
1a003c3a:	db03      	blt.n	1a003c44 <__sread+0x18>
1a003c3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a003c3e:	4403      	add	r3, r0
1a003c40:	6523      	str	r3, [r4, #80]	; 0x50
1a003c42:	bd10      	pop	{r4, pc}
1a003c44:	89a3      	ldrh	r3, [r4, #12]
1a003c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a003c4a:	81a3      	strh	r3, [r4, #12]
1a003c4c:	bd10      	pop	{r4, pc}
1a003c4e:	bf00      	nop

1a003c50 <__swrite>:
1a003c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003c54:	4616      	mov	r6, r2
1a003c56:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a003c5a:	461f      	mov	r7, r3
1a003c5c:	05d3      	lsls	r3, r2, #23
1a003c5e:	460c      	mov	r4, r1
1a003c60:	4605      	mov	r5, r0
1a003c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003c66:	d409      	bmi.n	1a003c7c <__swrite+0x2c>
1a003c68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a003c6c:	81a2      	strh	r2, [r4, #12]
1a003c6e:	463b      	mov	r3, r7
1a003c70:	4632      	mov	r2, r6
1a003c72:	4628      	mov	r0, r5
1a003c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a003c78:	f7fc bd04 	b.w	1a000684 <_write_r>
1a003c7c:	2200      	movs	r2, #0
1a003c7e:	2302      	movs	r3, #2
1a003c80:	f7fc fcd2 	bl	1a000628 <_lseek_r>
1a003c84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a003c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003c8c:	e7ec      	b.n	1a003c68 <__swrite+0x18>
1a003c8e:	bf00      	nop

1a003c90 <__sseek>:
1a003c90:	b510      	push	{r4, lr}
1a003c92:	460c      	mov	r4, r1
1a003c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003c98:	f7fc fcc6 	bl	1a000628 <_lseek_r>
1a003c9c:	89a3      	ldrh	r3, [r4, #12]
1a003c9e:	1c42      	adds	r2, r0, #1
1a003ca0:	bf0e      	itee	eq
1a003ca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a003ca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a003caa:	6520      	strne	r0, [r4, #80]	; 0x50
1a003cac:	81a3      	strh	r3, [r4, #12]
1a003cae:	bd10      	pop	{r4, pc}

1a003cb0 <__sclose>:
1a003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003cb4:	f7fc bca4 	b.w	1a000600 <_close_r>
1a003cb8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a003cbc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a003cc0 <strlen>:
1a003cc0:	f890 f000 	pld	[r0]
1a003cc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a003cc8:	f020 0107 	bic.w	r1, r0, #7
1a003ccc:	f06f 0c00 	mvn.w	ip, #0
1a003cd0:	f010 0407 	ands.w	r4, r0, #7
1a003cd4:	f891 f020 	pld	[r1, #32]
1a003cd8:	f040 8049 	bne.w	1a003d6e <strlen+0xae>
1a003cdc:	f04f 0400 	mov.w	r4, #0
1a003ce0:	f06f 0007 	mvn.w	r0, #7
1a003ce4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003ce8:	f891 f040 	pld	[r1, #64]	; 0x40
1a003cec:	f100 0008 	add.w	r0, r0, #8
1a003cf0:	fa82 f24c 	uadd8	r2, r2, ip
1a003cf4:	faa4 f28c 	sel	r2, r4, ip
1a003cf8:	fa83 f34c 	uadd8	r3, r3, ip
1a003cfc:	faa2 f38c 	sel	r3, r2, ip
1a003d00:	bb4b      	cbnz	r3, 1a003d56 <strlen+0x96>
1a003d02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a003d06:	fa82 f24c 	uadd8	r2, r2, ip
1a003d0a:	f100 0008 	add.w	r0, r0, #8
1a003d0e:	faa4 f28c 	sel	r2, r4, ip
1a003d12:	fa83 f34c 	uadd8	r3, r3, ip
1a003d16:	faa2 f38c 	sel	r3, r2, ip
1a003d1a:	b9e3      	cbnz	r3, 1a003d56 <strlen+0x96>
1a003d1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a003d20:	fa82 f24c 	uadd8	r2, r2, ip
1a003d24:	f100 0008 	add.w	r0, r0, #8
1a003d28:	faa4 f28c 	sel	r2, r4, ip
1a003d2c:	fa83 f34c 	uadd8	r3, r3, ip
1a003d30:	faa2 f38c 	sel	r3, r2, ip
1a003d34:	b97b      	cbnz	r3, 1a003d56 <strlen+0x96>
1a003d36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a003d3a:	f101 0120 	add.w	r1, r1, #32
1a003d3e:	fa82 f24c 	uadd8	r2, r2, ip
1a003d42:	f100 0008 	add.w	r0, r0, #8
1a003d46:	faa4 f28c 	sel	r2, r4, ip
1a003d4a:	fa83 f34c 	uadd8	r3, r3, ip
1a003d4e:	faa2 f38c 	sel	r3, r2, ip
1a003d52:	2b00      	cmp	r3, #0
1a003d54:	d0c6      	beq.n	1a003ce4 <strlen+0x24>
1a003d56:	2a00      	cmp	r2, #0
1a003d58:	bf04      	itt	eq
1a003d5a:	3004      	addeq	r0, #4
1a003d5c:	461a      	moveq	r2, r3
1a003d5e:	ba12      	rev	r2, r2
1a003d60:	fab2 f282 	clz	r2, r2
1a003d64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a003d68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a003d6c:	4770      	bx	lr
1a003d6e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003d72:	f004 0503 	and.w	r5, r4, #3
1a003d76:	f1c4 0000 	rsb	r0, r4, #0
1a003d7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a003d7e:	f014 0f04 	tst.w	r4, #4
1a003d82:	f891 f040 	pld	[r1, #64]	; 0x40
1a003d86:	fa0c f505 	lsl.w	r5, ip, r5
1a003d8a:	ea62 0205 	orn	r2, r2, r5
1a003d8e:	bf1c      	itt	ne
1a003d90:	ea63 0305 	ornne	r3, r3, r5
1a003d94:	4662      	movne	r2, ip
1a003d96:	f04f 0400 	mov.w	r4, #0
1a003d9a:	e7a9      	b.n	1a003cf0 <strlen+0x30>
1a003d9c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a003da0 <_vfprintf_r>:
1a003da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003da4:	b0d5      	sub	sp, #340	; 0x154
1a003da6:	461c      	mov	r4, r3
1a003da8:	4689      	mov	r9, r1
1a003daa:	4617      	mov	r7, r2
1a003dac:	4605      	mov	r5, r0
1a003dae:	9005      	str	r0, [sp, #20]
1a003db0:	f002 ff8c 	bl	1a006ccc <_localeconv_r>
1a003db4:	6803      	ldr	r3, [r0, #0]
1a003db6:	9315      	str	r3, [sp, #84]	; 0x54
1a003db8:	4618      	mov	r0, r3
1a003dba:	f7ff ff81 	bl	1a003cc0 <strlen>
1a003dbe:	9408      	str	r4, [sp, #32]
1a003dc0:	9013      	str	r0, [sp, #76]	; 0x4c
1a003dc2:	b11d      	cbz	r5, 1a003dcc <_vfprintf_r+0x2c>
1a003dc4:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a003dc6:	2b00      	cmp	r3, #0
1a003dc8:	f000 8411 	beq.w	1a0045ee <_vfprintf_r+0x84e>
1a003dcc:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003dd0:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a003dd4:	07cd      	lsls	r5, r1, #31
1a003dd6:	b293      	uxth	r3, r2
1a003dd8:	d402      	bmi.n	1a003de0 <_vfprintf_r+0x40>
1a003dda:	0598      	lsls	r0, r3, #22
1a003ddc:	f140 8754 	bpl.w	1a004c88 <_vfprintf_r+0xee8>
1a003de0:	0499      	lsls	r1, r3, #18
1a003de2:	d40a      	bmi.n	1a003dfa <_vfprintf_r+0x5a>
1a003de4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003de8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a003dec:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a003df0:	f8a9 300c 	strh.w	r3, [r9, #12]
1a003df4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a003df8:	b29b      	uxth	r3, r3
1a003dfa:	071a      	lsls	r2, r3, #28
1a003dfc:	f140 80bf 	bpl.w	1a003f7e <_vfprintf_r+0x1de>
1a003e00:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a003e04:	2a00      	cmp	r2, #0
1a003e06:	f000 80ba 	beq.w	1a003f7e <_vfprintf_r+0x1de>
1a003e0a:	f003 021a 	and.w	r2, r3, #26
1a003e0e:	2a0a      	cmp	r2, #10
1a003e10:	f000 80c3 	beq.w	1a003f9a <_vfprintf_r+0x1fa>
1a003e14:	2300      	movs	r3, #0
1a003e16:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 1a004088 <_vfprintf_r+0x2e8>
1a003e1a:	9312      	str	r3, [sp, #72]	; 0x48
1a003e1c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a003e20:	9314      	str	r3, [sp, #80]	; 0x50
1a003e22:	9316      	str	r3, [sp, #88]	; 0x58
1a003e24:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a003e28:	9317      	str	r3, [sp, #92]	; 0x5c
1a003e2a:	9304      	str	r3, [sp, #16]
1a003e2c:	ab2b      	add	r3, sp, #172	; 0xac
1a003e2e:	9328      	str	r3, [sp, #160]	; 0xa0
1a003e30:	469b      	mov	fp, r3
1a003e32:	783b      	ldrb	r3, [r7, #0]
1a003e34:	f8cd 901c 	str.w	r9, [sp, #28]
1a003e38:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a003e3c:	2b00      	cmp	r3, #0
1a003e3e:	f000 8267 	beq.w	1a004310 <_vfprintf_r+0x570>
1a003e42:	2b25      	cmp	r3, #37	; 0x25
1a003e44:	f001 80ab 	beq.w	1a004f9e <_vfprintf_r+0x11fe>
1a003e48:	463d      	mov	r5, r7
1a003e4a:	e003      	b.n	1a003e54 <_vfprintf_r+0xb4>
1a003e4c:	2b25      	cmp	r3, #37	; 0x25
1a003e4e:	f000 80bb 	beq.w	1a003fc8 <_vfprintf_r+0x228>
1a003e52:	4625      	mov	r5, r4
1a003e54:	786b      	ldrb	r3, [r5, #1]
1a003e56:	1c6c      	adds	r4, r5, #1
1a003e58:	2b00      	cmp	r3, #0
1a003e5a:	d1f7      	bne.n	1a003e4c <_vfprintf_r+0xac>
1a003e5c:	1be6      	subs	r6, r4, r7
1a003e5e:	f000 8257 	beq.w	1a004310 <_vfprintf_r+0x570>
1a003e62:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a003e66:	3301      	adds	r3, #1
1a003e68:	4432      	add	r2, r6
1a003e6a:	2b07      	cmp	r3, #7
1a003e6c:	f8cb 7000 	str.w	r7, [fp]
1a003e70:	f8cb 6004 	str.w	r6, [fp, #4]
1a003e74:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a003e78:	f300 80aa 	bgt.w	1a003fd0 <_vfprintf_r+0x230>
1a003e7c:	f10b 0b08 	add.w	fp, fp, #8
1a003e80:	9a04      	ldr	r2, [sp, #16]
1a003e82:	786b      	ldrb	r3, [r5, #1]
1a003e84:	4432      	add	r2, r6
1a003e86:	9204      	str	r2, [sp, #16]
1a003e88:	2b00      	cmp	r3, #0
1a003e8a:	f000 8241 	beq.w	1a004310 <_vfprintf_r+0x570>
1a003e8e:	2300      	movs	r3, #0
1a003e90:	f894 8001 	ldrb.w	r8, [r4, #1]
1a003e94:	9306      	str	r3, [sp, #24]
1a003e96:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a003e9a:	9302      	str	r3, [sp, #8]
1a003e9c:	f104 0a01 	add.w	sl, r4, #1
1a003ea0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a003ea4:	262b      	movs	r6, #43	; 0x2b
1a003ea6:	2120      	movs	r1, #32
1a003ea8:	f10a 0a01 	add.w	sl, sl, #1
1a003eac:	f1a8 0320 	sub.w	r3, r8, #32
1a003eb0:	2b5a      	cmp	r3, #90	; 0x5a
1a003eb2:	f200 83a1 	bhi.w	1a0045f8 <_vfprintf_r+0x858>
1a003eb6:	e8df f013 	tbh	[pc, r3, lsl #1]
1a003eba:	0282      	.short	0x0282
1a003ebc:	039f039f 	.word	0x039f039f
1a003ec0:	039f027b 	.word	0x039f027b
1a003ec4:	039f039f 	.word	0x039f039f
1a003ec8:	039f0301 	.word	0x039f0301
1a003ecc:	02f6039f 	.word	0x02f6039f
1a003ed0:	039f00df 	.word	0x039f00df
1a003ed4:	032b00c4 	.word	0x032b00c4
1a003ed8:	0324039f 	.word	0x0324039f
1a003edc:	00960096 	.word	0x00960096
1a003ee0:	00960096 	.word	0x00960096
1a003ee4:	00960096 	.word	0x00960096
1a003ee8:	00960096 	.word	0x00960096
1a003eec:	039f0096 	.word	0x039f0096
1a003ef0:	039f039f 	.word	0x039f039f
1a003ef4:	039f039f 	.word	0x039f039f
1a003ef8:	039f039f 	.word	0x039f039f
1a003efc:	039f0345 	.word	0x039f0345
1a003f00:	016201a8 	.word	0x016201a8
1a003f04:	03450345 	.word	0x03450345
1a003f08:	039f0345 	.word	0x039f0345
1a003f0c:	039f039f 	.word	0x039f039f
1a003f10:	015b039f 	.word	0x015b039f
1a003f14:	039f039f 	.word	0x039f039f
1a003f18:	039f014e 	.word	0x039f014e
1a003f1c:	039f039f 	.word	0x039f039f
1a003f20:	039f0123 	.word	0x039f0123
1a003f24:	039f0115 	.word	0x039f0115
1a003f28:	00cb039f 	.word	0x00cb039f
1a003f2c:	039f039f 	.word	0x039f039f
1a003f30:	039f039f 	.word	0x039f039f
1a003f34:	039f039f 	.word	0x039f039f
1a003f38:	039f039f 	.word	0x039f039f
1a003f3c:	039f0345 	.word	0x039f0345
1a003f40:	00ef01a8 	.word	0x00ef01a8
1a003f44:	03450345 	.word	0x03450345
1a003f48:	02700345 	.word	0x02700345
1a003f4c:	005b00ef 	.word	0x005b00ef
1a003f50:	02eb039f 	.word	0x02eb039f
1a003f54:	02d1039f 	.word	0x02d1039f
1a003f58:	028c02bd 	.word	0x028c02bd
1a003f5c:	039f005b 	.word	0x039f005b
1a003f60:	005f0123 	.word	0x005f0123
1a003f64:	039f0387 	.word	0x039f0387
1a003f68:	00a5039f 	.word	0x00a5039f
1a003f6c:	005f039f 	.word	0x005f039f
1a003f70:	9b02      	ldr	r3, [sp, #8]
1a003f72:	f043 0320 	orr.w	r3, r3, #32
1a003f76:	9302      	str	r3, [sp, #8]
1a003f78:	f89a 8000 	ldrb.w	r8, [sl]
1a003f7c:	e794      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a003f7e:	4649      	mov	r1, r9
1a003f80:	9805      	ldr	r0, [sp, #20]
1a003f82:	f001 fcf9 	bl	1a005978 <__swsetup_r>
1a003f86:	2800      	cmp	r0, #0
1a003f88:	f041 8381 	bne.w	1a00568e <_vfprintf_r+0x18ee>
1a003f8c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003f90:	f003 021a 	and.w	r2, r3, #26
1a003f94:	2a0a      	cmp	r2, #10
1a003f96:	f47f af3d 	bne.w	1a003e14 <_vfprintf_r+0x74>
1a003f9a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a003f9e:	2a00      	cmp	r2, #0
1a003fa0:	f6ff af38 	blt.w	1a003e14 <_vfprintf_r+0x74>
1a003fa4:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a003fa8:	07d6      	lsls	r6, r2, #31
1a003faa:	d402      	bmi.n	1a003fb2 <_vfprintf_r+0x212>
1a003fac:	059d      	lsls	r5, r3, #22
1a003fae:	f141 8190 	bpl.w	1a0052d2 <_vfprintf_r+0x1532>
1a003fb2:	4623      	mov	r3, r4
1a003fb4:	463a      	mov	r2, r7
1a003fb6:	4649      	mov	r1, r9
1a003fb8:	9805      	ldr	r0, [sp, #20]
1a003fba:	f001 fc9b 	bl	1a0058f4 <__sbprintf>
1a003fbe:	9004      	str	r0, [sp, #16]
1a003fc0:	9804      	ldr	r0, [sp, #16]
1a003fc2:	b055      	add	sp, #340	; 0x154
1a003fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003fc8:	1be6      	subs	r6, r4, r7
1a003fca:	f43f af60 	beq.w	1a003e8e <_vfprintf_r+0xee>
1a003fce:	e748      	b.n	1a003e62 <_vfprintf_r+0xc2>
1a003fd0:	aa28      	add	r2, sp, #160	; 0xa0
1a003fd2:	9907      	ldr	r1, [sp, #28]
1a003fd4:	9805      	ldr	r0, [sp, #20]
1a003fd6:	f003 fd1f 	bl	1a007a18 <__sprint_r>
1a003fda:	2800      	cmp	r0, #0
1a003fdc:	f041 8427 	bne.w	1a00582e <_vfprintf_r+0x1a8e>
1a003fe0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a003fe4:	e74c      	b.n	1a003e80 <_vfprintf_r+0xe0>
1a003fe6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003fea:	2200      	movs	r2, #0
1a003fec:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a003ff0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a003ff4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a003ff8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003ffc:	2b09      	cmp	r3, #9
1a003ffe:	d9f5      	bls.n	1a003fec <_vfprintf_r+0x24c>
1a004000:	9206      	str	r2, [sp, #24]
1a004002:	e753      	b.n	1a003eac <_vfprintf_r+0x10c>
1a004004:	4b22      	ldr	r3, [pc, #136]	; (1a004090 <_vfprintf_r+0x2f0>)
1a004006:	9314      	str	r3, [sp, #80]	; 0x50
1a004008:	9b02      	ldr	r3, [sp, #8]
1a00400a:	069f      	lsls	r7, r3, #26
1a00400c:	d525      	bpl.n	1a00405a <_vfprintf_r+0x2ba>
1a00400e:	9c08      	ldr	r4, [sp, #32]
1a004010:	3407      	adds	r4, #7
1a004012:	f024 0307 	bic.w	r3, r4, #7
1a004016:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00401a:	9308      	str	r3, [sp, #32]
1a00401c:	9a02      	ldr	r2, [sp, #8]
1a00401e:	07d1      	lsls	r1, r2, #31
1a004020:	d50a      	bpl.n	1a004038 <_vfprintf_r+0x298>
1a004022:	ea54 0305 	orrs.w	r3, r4, r5
1a004026:	d007      	beq.n	1a004038 <_vfprintf_r+0x298>
1a004028:	2330      	movs	r3, #48	; 0x30
1a00402a:	f042 0202 	orr.w	r2, r2, #2
1a00402e:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a004032:	9202      	str	r2, [sp, #8]
1a004034:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a004038:	9b02      	ldr	r3, [sp, #8]
1a00403a:	f423 6680 	bic.w	r6, r3, #1024	; 0x400
1a00403e:	2302      	movs	r3, #2
1a004040:	e1d9      	b.n	1a0043f6 <_vfprintf_r+0x656>
1a004042:	f89a 8000 	ldrb.w	r8, [sl]
1a004046:	9b02      	ldr	r3, [sp, #8]
1a004048:	f043 0304 	orr.w	r3, r3, #4
1a00404c:	9302      	str	r3, [sp, #8]
1a00404e:	e72b      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a004050:	4b10      	ldr	r3, [pc, #64]	; (1a004094 <_vfprintf_r+0x2f4>)
1a004052:	9314      	str	r3, [sp, #80]	; 0x50
1a004054:	9b02      	ldr	r3, [sp, #8]
1a004056:	069f      	lsls	r7, r3, #26
1a004058:	d4d9      	bmi.n	1a00400e <_vfprintf_r+0x26e>
1a00405a:	9b08      	ldr	r3, [sp, #32]
1a00405c:	f853 4b04 	ldr.w	r4, [r3], #4
1a004060:	9308      	str	r3, [sp, #32]
1a004062:	9b02      	ldr	r3, [sp, #8]
1a004064:	06de      	lsls	r6, r3, #27
1a004066:	f100 864f 	bmi.w	1a004d08 <_vfprintf_r+0xf68>
1a00406a:	9b02      	ldr	r3, [sp, #8]
1a00406c:	065d      	lsls	r5, r3, #25
1a00406e:	f140 8647 	bpl.w	1a004d00 <_vfprintf_r+0xf60>
1a004072:	b2a4      	uxth	r4, r4
1a004074:	2500      	movs	r5, #0
1a004076:	e7d1      	b.n	1a00401c <_vfprintf_r+0x27c>
1a004078:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
1a00407c:	f89a 8000 	ldrb.w	r8, [sl]
1a004080:	e712      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a004082:	bf00      	nop
1a004084:	f3af 8000 	nop.w
	...
1a004090:	1a0080e0 	.word	0x1a0080e0
1a004094:	1a0080cc 	.word	0x1a0080cc
1a004098:	9e02      	ldr	r6, [sp, #8]
1a00409a:	06b0      	lsls	r0, r6, #26
1a00409c:	f140 870b 	bpl.w	1a004eb6 <_vfprintf_r+0x1116>
1a0040a0:	9c08      	ldr	r4, [sp, #32]
1a0040a2:	3407      	adds	r4, #7
1a0040a4:	f024 0307 	bic.w	r3, r4, #7
1a0040a8:	4619      	mov	r1, r3
1a0040aa:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a0040ae:	9108      	str	r1, [sp, #32]
1a0040b0:	4614      	mov	r4, r2
1a0040b2:	461d      	mov	r5, r3
1a0040b4:	2a00      	cmp	r2, #0
1a0040b6:	f173 0300 	sbcs.w	r3, r3, #0
1a0040ba:	db71      	blt.n	1a0041a0 <_vfprintf_r+0x400>
1a0040bc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0040c0:	f000 82c5 	beq.w	1a00464e <_vfprintf_r+0x8ae>
1a0040c4:	f026 0380 	bic.w	r3, r6, #128	; 0x80
1a0040c8:	9302      	str	r3, [sp, #8]
1a0040ca:	ea54 0305 	orrs.w	r3, r4, r5
1a0040ce:	f040 82bd 	bne.w	1a00464c <_vfprintf_r+0x8ac>
1a0040d2:	f1b9 0f00 	cmp.w	r9, #0
1a0040d6:	f041 810e 	bne.w	1a0052f6 <_vfprintf_r+0x1556>
1a0040da:	f04f 0900 	mov.w	r9, #0
1a0040de:	464e      	mov	r6, r9
1a0040e0:	af54      	add	r7, sp, #336	; 0x150
1a0040e2:	e2bf      	b.n	1a004664 <_vfprintf_r+0x8c4>
1a0040e4:	9b02      	ldr	r3, [sp, #8]
1a0040e6:	069d      	lsls	r5, r3, #26
1a0040e8:	f043 0610 	orr.w	r6, r3, #16
1a0040ec:	f100 828f 	bmi.w	1a00460e <_vfprintf_r+0x86e>
1a0040f0:	9b08      	ldr	r3, [sp, #32]
1a0040f2:	1d1a      	adds	r2, r3, #4
1a0040f4:	9b08      	ldr	r3, [sp, #32]
1a0040f6:	9208      	str	r2, [sp, #32]
1a0040f8:	681c      	ldr	r4, [r3, #0]
1a0040fa:	2500      	movs	r5, #0
1a0040fc:	2301      	movs	r3, #1
1a0040fe:	e17a      	b.n	1a0043f6 <_vfprintf_r+0x656>
1a004100:	9c08      	ldr	r4, [sp, #32]
1a004102:	f854 7b04 	ldr.w	r7, [r4], #4
1a004106:	2500      	movs	r5, #0
1a004108:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a00410c:	2f00      	cmp	r7, #0
1a00410e:	f000 8737 	beq.w	1a004f80 <_vfprintf_r+0x11e0>
1a004112:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004116:	f000 87bc 	beq.w	1a005092 <_vfprintf_r+0x12f2>
1a00411a:	464a      	mov	r2, r9
1a00411c:	4629      	mov	r1, r5
1a00411e:	4638      	mov	r0, r7
1a004120:	f002 fe56 	bl	1a006dd0 <memchr>
1a004124:	9009      	str	r0, [sp, #36]	; 0x24
1a004126:	2800      	cmp	r0, #0
1a004128:	f001 824a 	beq.w	1a0055c0 <_vfprintf_r+0x1820>
1a00412c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00412e:	46a9      	mov	r9, r5
1a004130:	1bde      	subs	r6, r3, r7
1a004132:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
1a004136:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00413a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00413e:	9408      	str	r4, [sp, #32]
1a004140:	9303      	str	r3, [sp, #12]
1a004142:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a004146:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
1a00414a:	2a00      	cmp	r2, #0
1a00414c:	d06f      	beq.n	1a00422e <_vfprintf_r+0x48e>
1a00414e:	9b03      	ldr	r3, [sp, #12]
1a004150:	3301      	adds	r3, #1
1a004152:	9303      	str	r3, [sp, #12]
1a004154:	e06b      	b.n	1a00422e <_vfprintf_r+0x48e>
1a004156:	9b02      	ldr	r3, [sp, #8]
1a004158:	069c      	lsls	r4, r3, #26
1a00415a:	f043 0610 	orr.w	r6, r3, #16
1a00415e:	f100 825f 	bmi.w	1a004620 <_vfprintf_r+0x880>
1a004162:	9b08      	ldr	r3, [sp, #32]
1a004164:	1d1a      	adds	r2, r3, #4
1a004166:	9b08      	ldr	r3, [sp, #32]
1a004168:	9208      	str	r2, [sp, #32]
1a00416a:	681c      	ldr	r4, [r3, #0]
1a00416c:	2500      	movs	r5, #0
1a00416e:	e25e      	b.n	1a00462e <_vfprintf_r+0x88e>
1a004170:	9b02      	ldr	r3, [sp, #8]
1a004172:	f89a 8000 	ldrb.w	r8, [sl]
1a004176:	f043 0308 	orr.w	r3, r3, #8
1a00417a:	9302      	str	r3, [sp, #8]
1a00417c:	e694      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a00417e:	9b02      	ldr	r3, [sp, #8]
1a004180:	069c      	lsls	r4, r3, #26
1a004182:	f043 0610 	orr.w	r6, r3, #16
1a004186:	d48b      	bmi.n	1a0040a0 <_vfprintf_r+0x300>
1a004188:	9b08      	ldr	r3, [sp, #32]
1a00418a:	1d1a      	adds	r2, r3, #4
1a00418c:	9b08      	ldr	r3, [sp, #32]
1a00418e:	9208      	str	r2, [sp, #32]
1a004190:	681c      	ldr	r4, [r3, #0]
1a004192:	17e5      	asrs	r5, r4, #31
1a004194:	4622      	mov	r2, r4
1a004196:	462b      	mov	r3, r5
1a004198:	2a00      	cmp	r2, #0
1a00419a:	f173 0300 	sbcs.w	r3, r3, #0
1a00419e:	da8d      	bge.n	1a0040bc <_vfprintf_r+0x31c>
1a0041a0:	4264      	negs	r4, r4
1a0041a2:	f04f 032d 	mov.w	r3, #45	; 0x2d
1a0041a6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a0041aa:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0041ae:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a0041b2:	f04f 0301 	mov.w	r3, #1
1a0041b6:	f040 8125 	bne.w	1a004404 <_vfprintf_r+0x664>
1a0041ba:	2b01      	cmp	r3, #1
1a0041bc:	f000 8247 	beq.w	1a00464e <_vfprintf_r+0x8ae>
1a0041c0:	2b02      	cmp	r3, #2
1a0041c2:	f000 8479 	beq.w	1a004ab8 <_vfprintf_r+0xd18>
1a0041c6:	a954      	add	r1, sp, #336	; 0x150
1a0041c8:	e000      	b.n	1a0041cc <_vfprintf_r+0x42c>
1a0041ca:	4639      	mov	r1, r7
1a0041cc:	08e2      	lsrs	r2, r4, #3
1a0041ce:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a0041d2:	08e8      	lsrs	r0, r5, #3
1a0041d4:	f004 0307 	and.w	r3, r4, #7
1a0041d8:	4605      	mov	r5, r0
1a0041da:	4614      	mov	r4, r2
1a0041dc:	3330      	adds	r3, #48	; 0x30
1a0041de:	ea54 0205 	orrs.w	r2, r4, r5
1a0041e2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0041e6:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a0041ea:	d1ee      	bne.n	1a0041ca <_vfprintf_r+0x42a>
1a0041ec:	07f2      	lsls	r2, r6, #31
1a0041ee:	f140 8288 	bpl.w	1a004702 <_vfprintf_r+0x962>
1a0041f2:	2b30      	cmp	r3, #48	; 0x30
1a0041f4:	f000 8285 	beq.w	1a004702 <_vfprintf_r+0x962>
1a0041f8:	2330      	movs	r3, #48	; 0x30
1a0041fa:	3902      	subs	r1, #2
1a0041fc:	f807 3c01 	strb.w	r3, [r7, #-1]
1a004200:	ab54      	add	r3, sp, #336	; 0x150
1a004202:	9602      	str	r6, [sp, #8]
1a004204:	460f      	mov	r7, r1
1a004206:	1a5e      	subs	r6, r3, r1
1a004208:	e22c      	b.n	1a004664 <_vfprintf_r+0x8c4>
1a00420a:	9c08      	ldr	r4, [sp, #32]
1a00420c:	2300      	movs	r3, #0
1a00420e:	f854 2b04 	ldr.w	r2, [r4], #4
1a004212:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a004216:	2601      	movs	r6, #1
1a004218:	461a      	mov	r2, r3
1a00421a:	9603      	str	r6, [sp, #12]
1a00421c:	9408      	str	r4, [sp, #32]
1a00421e:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a004222:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a004226:	9209      	str	r2, [sp, #36]	; 0x24
1a004228:	4691      	mov	r9, r2
1a00422a:	920c      	str	r2, [sp, #48]	; 0x30
1a00422c:	af3b      	add	r7, sp, #236	; 0xec
1a00422e:	9b02      	ldr	r3, [sp, #8]
1a004230:	f013 0302 	ands.w	r3, r3, #2
1a004234:	930a      	str	r3, [sp, #40]	; 0x28
1a004236:	d002      	beq.n	1a00423e <_vfprintf_r+0x49e>
1a004238:	9b03      	ldr	r3, [sp, #12]
1a00423a:	3302      	adds	r3, #2
1a00423c:	9303      	str	r3, [sp, #12]
1a00423e:	9b02      	ldr	r3, [sp, #8]
1a004240:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004242:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a004246:	930b      	str	r3, [sp, #44]	; 0x2c
1a004248:	d104      	bne.n	1a004254 <_vfprintf_r+0x4b4>
1a00424a:	9b06      	ldr	r3, [sp, #24]
1a00424c:	9903      	ldr	r1, [sp, #12]
1a00424e:	1a5d      	subs	r5, r3, r1
1a004250:	2d00      	cmp	r5, #0
1a004252:	dc66      	bgt.n	1a004322 <_vfprintf_r+0x582>
1a004254:	b172      	cbz	r2, 1a004274 <_vfprintf_r+0x4d4>
1a004256:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004258:	3201      	adds	r2, #1
1a00425a:	3401      	adds	r4, #1
1a00425c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a004260:	2101      	movs	r1, #1
1a004262:	2a07      	cmp	r2, #7
1a004264:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004268:	e9cb 0100 	strd	r0, r1, [fp]
1a00426c:	f300 83b1 	bgt.w	1a0049d2 <_vfprintf_r+0xc32>
1a004270:	f10b 0b08 	add.w	fp, fp, #8
1a004274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004276:	b16b      	cbz	r3, 1a004294 <_vfprintf_r+0x4f4>
1a004278:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00427a:	3301      	adds	r3, #1
1a00427c:	3402      	adds	r4, #2
1a00427e:	a921      	add	r1, sp, #132	; 0x84
1a004280:	2202      	movs	r2, #2
1a004282:	2b07      	cmp	r3, #7
1a004284:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004288:	e9cb 1200 	strd	r1, r2, [fp]
1a00428c:	f300 83ad 	bgt.w	1a0049ea <_vfprintf_r+0xc4a>
1a004290:	f10b 0b08 	add.w	fp, fp, #8
1a004294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004296:	2b80      	cmp	r3, #128	; 0x80
1a004298:	f000 8295 	beq.w	1a0047c6 <_vfprintf_r+0xa26>
1a00429c:	eba9 0506 	sub.w	r5, r9, r6
1a0042a0:	2d00      	cmp	r5, #0
1a0042a2:	f300 82d3 	bgt.w	1a00484c <_vfprintf_r+0xaac>
1a0042a6:	9b02      	ldr	r3, [sp, #8]
1a0042a8:	05db      	lsls	r3, r3, #23
1a0042aa:	f100 822e 	bmi.w	1a00470a <_vfprintf_r+0x96a>
1a0042ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0042b0:	f8cb 7000 	str.w	r7, [fp]
1a0042b4:	3301      	adds	r3, #1
1a0042b6:	4434      	add	r4, r6
1a0042b8:	2b07      	cmp	r3, #7
1a0042ba:	942a      	str	r4, [sp, #168]	; 0xa8
1a0042bc:	f8cb 6004 	str.w	r6, [fp, #4]
1a0042c0:	9329      	str	r3, [sp, #164]	; 0xa4
1a0042c2:	f300 8325 	bgt.w	1a004910 <_vfprintf_r+0xb70>
1a0042c6:	f10b 0b08 	add.w	fp, fp, #8
1a0042ca:	9b02      	ldr	r3, [sp, #8]
1a0042cc:	075d      	lsls	r5, r3, #29
1a0042ce:	d505      	bpl.n	1a0042dc <_vfprintf_r+0x53c>
1a0042d0:	9b06      	ldr	r3, [sp, #24]
1a0042d2:	9a03      	ldr	r2, [sp, #12]
1a0042d4:	1a9d      	subs	r5, r3, r2
1a0042d6:	2d00      	cmp	r5, #0
1a0042d8:	f300 83ae 	bgt.w	1a004a38 <_vfprintf_r+0xc98>
1a0042dc:	9b04      	ldr	r3, [sp, #16]
1a0042de:	9a06      	ldr	r2, [sp, #24]
1a0042e0:	9903      	ldr	r1, [sp, #12]
1a0042e2:	428a      	cmp	r2, r1
1a0042e4:	bfac      	ite	ge
1a0042e6:	189b      	addge	r3, r3, r2
1a0042e8:	185b      	addlt	r3, r3, r1
1a0042ea:	9304      	str	r3, [sp, #16]
1a0042ec:	2c00      	cmp	r4, #0
1a0042ee:	f040 82e7 	bne.w	1a0048c0 <_vfprintf_r+0xb20>
1a0042f2:	2300      	movs	r3, #0
1a0042f4:	9329      	str	r3, [sp, #164]	; 0xa4
1a0042f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0042f8:	b11b      	cbz	r3, 1a004302 <_vfprintf_r+0x562>
1a0042fa:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0042fc:	9805      	ldr	r0, [sp, #20]
1a0042fe:	f7fe ff31 	bl	1a003164 <_free_r>
1a004302:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004306:	4657      	mov	r7, sl
1a004308:	783b      	ldrb	r3, [r7, #0]
1a00430a:	2b00      	cmp	r3, #0
1a00430c:	f47f ad99 	bne.w	1a003e42 <_vfprintf_r+0xa2>
1a004310:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a004312:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004316:	2b00      	cmp	r3, #0
1a004318:	f040 86f5 	bne.w	1a005106 <_vfprintf_r+0x1366>
1a00431c:	2300      	movs	r3, #0
1a00431e:	9329      	str	r3, [sp, #164]	; 0xa4
1a004320:	e375      	b.n	1a004a0e <_vfprintf_r+0xc6e>
1a004322:	2d10      	cmp	r5, #16
1a004324:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004326:	dd29      	ble.n	1a00437c <_vfprintf_r+0x5dc>
1a004328:	4659      	mov	r1, fp
1a00432a:	4620      	mov	r0, r4
1a00432c:	961e      	str	r6, [sp, #120]	; 0x78
1a00432e:	2310      	movs	r3, #16
1a004330:	9c05      	ldr	r4, [sp, #20]
1a004332:	9e07      	ldr	r6, [sp, #28]
1a004334:	46bb      	mov	fp, r7
1a004336:	e004      	b.n	1a004342 <_vfprintf_r+0x5a2>
1a004338:	3d10      	subs	r5, #16
1a00433a:	2d10      	cmp	r5, #16
1a00433c:	f101 0108 	add.w	r1, r1, #8
1a004340:	dd18      	ble.n	1a004374 <_vfprintf_r+0x5d4>
1a004342:	3201      	adds	r2, #1
1a004344:	4fbc      	ldr	r7, [pc, #752]	; (1a004638 <_vfprintf_r+0x898>)
1a004346:	3010      	adds	r0, #16
1a004348:	2a07      	cmp	r2, #7
1a00434a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00434e:	e9c1 7300 	strd	r7, r3, [r1]
1a004352:	ddf1      	ble.n	1a004338 <_vfprintf_r+0x598>
1a004354:	aa28      	add	r2, sp, #160	; 0xa0
1a004356:	4631      	mov	r1, r6
1a004358:	4620      	mov	r0, r4
1a00435a:	f003 fb5d 	bl	1a007a18 <__sprint_r>
1a00435e:	2800      	cmp	r0, #0
1a004360:	f040 834f 	bne.w	1a004a02 <_vfprintf_r+0xc62>
1a004364:	3d10      	subs	r5, #16
1a004366:	2d10      	cmp	r5, #16
1a004368:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00436c:	a92b      	add	r1, sp, #172	; 0xac
1a00436e:	f04f 0310 	mov.w	r3, #16
1a004372:	dce6      	bgt.n	1a004342 <_vfprintf_r+0x5a2>
1a004374:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1a004376:	465f      	mov	r7, fp
1a004378:	4604      	mov	r4, r0
1a00437a:	468b      	mov	fp, r1
1a00437c:	3201      	adds	r2, #1
1a00437e:	4bae      	ldr	r3, [pc, #696]	; (1a004638 <_vfprintf_r+0x898>)
1a004380:	442c      	add	r4, r5
1a004382:	2a07      	cmp	r2, #7
1a004384:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004388:	e9cb 3500 	strd	r3, r5, [fp]
1a00438c:	f300 862a 	bgt.w	1a004fe4 <_vfprintf_r+0x1244>
1a004390:	f10b 0b08 	add.w	fp, fp, #8
1a004394:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004398:	e75c      	b.n	1a004254 <_vfprintf_r+0x4b4>
1a00439a:	f89a 8000 	ldrb.w	r8, [sl]
1a00439e:	9b02      	ldr	r3, [sp, #8]
1a0043a0:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a0043a4:	f000 85e3 	beq.w	1a004f6e <_vfprintf_r+0x11ce>
1a0043a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0043ac:	9302      	str	r3, [sp, #8]
1a0043ae:	e57b      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a0043b0:	9b02      	ldr	r3, [sp, #8]
1a0043b2:	f89a 8000 	ldrb.w	r8, [sl]
1a0043b6:	f043 0301 	orr.w	r3, r3, #1
1a0043ba:	9302      	str	r3, [sp, #8]
1a0043bc:	e574      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a0043be:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a0043c2:	f89a 8000 	ldrb.w	r8, [sl]
1a0043c6:	2b00      	cmp	r3, #0
1a0043c8:	f47f ad6e 	bne.w	1a003ea8 <_vfprintf_r+0x108>
1a0043cc:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a0043d0:	e56a      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a0043d2:	9c08      	ldr	r4, [sp, #32]
1a0043d4:	f647 0230 	movw	r2, #30768	; 0x7830
1a0043d8:	f854 3b04 	ldr.w	r3, [r4], #4
1a0043dc:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a0043e0:	9a02      	ldr	r2, [sp, #8]
1a0043e2:	9408      	str	r4, [sp, #32]
1a0043e4:	461c      	mov	r4, r3
1a0043e6:	4b95      	ldr	r3, [pc, #596]	; (1a00463c <_vfprintf_r+0x89c>)
1a0043e8:	9314      	str	r3, [sp, #80]	; 0x50
1a0043ea:	f042 0602 	orr.w	r6, r2, #2
1a0043ee:	2500      	movs	r5, #0
1a0043f0:	2302      	movs	r3, #2
1a0043f2:	f04f 0878 	mov.w	r8, #120	; 0x78
1a0043f6:	2200      	movs	r2, #0
1a0043f8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0043fc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a004400:	f43f aedb 	beq.w	1a0041ba <_vfprintf_r+0x41a>
1a004404:	f026 0280 	bic.w	r2, r6, #128	; 0x80
1a004408:	9202      	str	r2, [sp, #8]
1a00440a:	ea54 0205 	orrs.w	r2, r4, r5
1a00440e:	f040 82dd 	bne.w	1a0049cc <_vfprintf_r+0xc2c>
1a004412:	f1b9 0f00 	cmp.w	r9, #0
1a004416:	f040 8348 	bne.w	1a004aaa <_vfprintf_r+0xd0a>
1a00441a:	2b00      	cmp	r3, #0
1a00441c:	f47f ae5d 	bne.w	1a0040da <_vfprintf_r+0x33a>
1a004420:	f016 0601 	ands.w	r6, r6, #1
1a004424:	f000 846a 	beq.w	1a004cfc <_vfprintf_r+0xf5c>
1a004428:	2330      	movs	r3, #48	; 0x30
1a00442a:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a00442e:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a004432:	e117      	b.n	1a004664 <_vfprintf_r+0x8c4>
1a004434:	9e02      	ldr	r6, [sp, #8]
1a004436:	06b0      	lsls	r0, r6, #26
1a004438:	f100 80f2 	bmi.w	1a004620 <_vfprintf_r+0x880>
1a00443c:	9b02      	ldr	r3, [sp, #8]
1a00443e:	9a08      	ldr	r2, [sp, #32]
1a004440:	06d9      	lsls	r1, r3, #27
1a004442:	f852 4b04 	ldr.w	r4, [r2], #4
1a004446:	f101 8243 	bmi.w	1a0058d0 <_vfprintf_r+0x1b30>
1a00444a:	9e02      	ldr	r6, [sp, #8]
1a00444c:	4633      	mov	r3, r6
1a00444e:	065b      	lsls	r3, r3, #25
1a004450:	f140 8635 	bpl.w	1a0050be <_vfprintf_r+0x131e>
1a004454:	9208      	str	r2, [sp, #32]
1a004456:	b2a4      	uxth	r4, r4
1a004458:	2500      	movs	r5, #0
1a00445a:	e0e8      	b.n	1a00462e <_vfprintf_r+0x88e>
1a00445c:	9902      	ldr	r1, [sp, #8]
1a00445e:	9a08      	ldr	r2, [sp, #32]
1a004460:	0689      	lsls	r1, r1, #26
1a004462:	f102 0304 	add.w	r3, r2, #4
1a004466:	f100 8452 	bmi.w	1a004d0e <_vfprintf_r+0xf6e>
1a00446a:	9a02      	ldr	r2, [sp, #8]
1a00446c:	06d7      	lsls	r7, r2, #27
1a00446e:	f100 85e1 	bmi.w	1a005034 <_vfprintf_r+0x1294>
1a004472:	9a02      	ldr	r2, [sp, #8]
1a004474:	0656      	lsls	r6, r2, #25
1a004476:	f100 8664 	bmi.w	1a005142 <_vfprintf_r+0x13a2>
1a00447a:	9a02      	ldr	r2, [sp, #8]
1a00447c:	0595      	lsls	r5, r2, #22
1a00447e:	f140 85d9 	bpl.w	1a005034 <_vfprintf_r+0x1294>
1a004482:	9a08      	ldr	r2, [sp, #32]
1a004484:	9308      	str	r3, [sp, #32]
1a004486:	6812      	ldr	r2, [r2, #0]
1a004488:	9b04      	ldr	r3, [sp, #16]
1a00448a:	7013      	strb	r3, [r2, #0]
1a00448c:	4657      	mov	r7, sl
1a00448e:	e73b      	b.n	1a004308 <_vfprintf_r+0x568>
1a004490:	f89a 8000 	ldrb.w	r8, [sl]
1a004494:	9b02      	ldr	r3, [sp, #8]
1a004496:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a00449a:	f000 855f 	beq.w	1a004f5c <_vfprintf_r+0x11bc>
1a00449e:	f043 0310 	orr.w	r3, r3, #16
1a0044a2:	9302      	str	r3, [sp, #8]
1a0044a4:	e500      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a0044a6:	9b08      	ldr	r3, [sp, #32]
1a0044a8:	f89a 8000 	ldrb.w	r8, [sl]
1a0044ac:	f853 2b04 	ldr.w	r2, [r3], #4
1a0044b0:	9206      	str	r2, [sp, #24]
1a0044b2:	2a00      	cmp	r2, #0
1a0044b4:	f2c0 8513 	blt.w	1a004ede <_vfprintf_r+0x113e>
1a0044b8:	9308      	str	r3, [sp, #32]
1a0044ba:	e4f5      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a0044bc:	9d05      	ldr	r5, [sp, #20]
1a0044be:	4628      	mov	r0, r5
1a0044c0:	f002 fc04 	bl	1a006ccc <_localeconv_r>
1a0044c4:	6843      	ldr	r3, [r0, #4]
1a0044c6:	9317      	str	r3, [sp, #92]	; 0x5c
1a0044c8:	4618      	mov	r0, r3
1a0044ca:	f7ff fbf9 	bl	1a003cc0 <strlen>
1a0044ce:	9019      	str	r0, [sp, #100]	; 0x64
1a0044d0:	4604      	mov	r4, r0
1a0044d2:	4628      	mov	r0, r5
1a0044d4:	f002 fbfa 	bl	1a006ccc <_localeconv_r>
1a0044d8:	6883      	ldr	r3, [r0, #8]
1a0044da:	9318      	str	r3, [sp, #96]	; 0x60
1a0044dc:	2120      	movs	r1, #32
1a0044de:	2c00      	cmp	r4, #0
1a0044e0:	f43f ad4a 	beq.w	1a003f78 <_vfprintf_r+0x1d8>
1a0044e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a0044e6:	f89a 8000 	ldrb.w	r8, [sl]
1a0044ea:	2b00      	cmp	r3, #0
1a0044ec:	f43f acdc 	beq.w	1a003ea8 <_vfprintf_r+0x108>
1a0044f0:	781b      	ldrb	r3, [r3, #0]
1a0044f2:	2b00      	cmp	r3, #0
1a0044f4:	f43f acd8 	beq.w	1a003ea8 <_vfprintf_r+0x108>
1a0044f8:	9b02      	ldr	r3, [sp, #8]
1a0044fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a0044fe:	9302      	str	r3, [sp, #8]
1a004500:	e4d2      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a004502:	9b02      	ldr	r3, [sp, #8]
1a004504:	f89a 8000 	ldrb.w	r8, [sl]
1a004508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00450c:	9302      	str	r3, [sp, #8]
1a00450e:	e4cb      	b.n	1a003ea8 <_vfprintf_r+0x108>
1a004510:	4652      	mov	r2, sl
1a004512:	f812 8b01 	ldrb.w	r8, [r2], #1
1a004516:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a00451a:	f001 81be 	beq.w	1a00589a <_vfprintf_r+0x1afa>
1a00451e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a004522:	2b09      	cmp	r3, #9
1a004524:	4692      	mov	sl, r2
1a004526:	f04f 0900 	mov.w	r9, #0
1a00452a:	f63f acbf 	bhi.w	1a003eac <_vfprintf_r+0x10c>
1a00452e:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a004532:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a004536:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a00453a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a00453e:	2b09      	cmp	r3, #9
1a004540:	d9f5      	bls.n	1a00452e <_vfprintf_r+0x78e>
1a004542:	e4b3      	b.n	1a003eac <_vfprintf_r+0x10c>
1a004544:	9c08      	ldr	r4, [sp, #32]
1a004546:	3407      	adds	r4, #7
1a004548:	f024 0307 	bic.w	r3, r4, #7
1a00454c:	ecb3 7b02 	vldmia	r3!, {d7}
1a004550:	ec55 4b17 	vmov	r4, r5, d7
1a004554:	9308      	str	r3, [sp, #32]
1a004556:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a00455a:	931b      	str	r3, [sp, #108]	; 0x6c
1a00455c:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a004560:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a004564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004568:	4b35      	ldr	r3, [pc, #212]	; (1a004640 <_vfprintf_r+0x8a0>)
1a00456a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00456e:	f7fe fa49 	bl	1a002a04 <__aeabi_dcmpun>
1a004572:	2800      	cmp	r0, #0
1a004574:	f040 83dc 	bne.w	1a004d30 <_vfprintf_r+0xf90>
1a004578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00457c:	4b30      	ldr	r3, [pc, #192]	; (1a004640 <_vfprintf_r+0x8a0>)
1a00457e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a004582:	f7fe fa21 	bl	1a0029c8 <__aeabi_dcmple>
1a004586:	2800      	cmp	r0, #0
1a004588:	f040 83d2 	bne.w	1a004d30 <_vfprintf_r+0xf90>
1a00458c:	2200      	movs	r2, #0
1a00458e:	2300      	movs	r3, #0
1a004590:	4620      	mov	r0, r4
1a004592:	4629      	mov	r1, r5
1a004594:	f7fe fa0e 	bl	1a0029b4 <__aeabi_dcmplt>
1a004598:	2800      	cmp	r0, #0
1a00459a:	f040 8780 	bne.w	1a00549e <_vfprintf_r+0x16fe>
1a00459e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0045a2:	4f28      	ldr	r7, [pc, #160]	; (1a004644 <_vfprintf_r+0x8a4>)
1a0045a4:	4b28      	ldr	r3, [pc, #160]	; (1a004648 <_vfprintf_r+0x8a8>)
1a0045a6:	9802      	ldr	r0, [sp, #8]
1a0045a8:	2100      	movs	r1, #0
1a0045aa:	2603      	movs	r6, #3
1a0045ac:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a0045b0:	9603      	str	r6, [sp, #12]
1a0045b2:	9109      	str	r1, [sp, #36]	; 0x24
1a0045b4:	9002      	str	r0, [sp, #8]
1a0045b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a0045ba:	bfc8      	it	gt
1a0045bc:	461f      	movgt	r7, r3
1a0045be:	4689      	mov	r9, r1
1a0045c0:	910c      	str	r1, [sp, #48]	; 0x30
1a0045c2:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a0045c6:	e5c0      	b.n	1a00414a <_vfprintf_r+0x3aa>
1a0045c8:	9e02      	ldr	r6, [sp, #8]
1a0045ca:	06b4      	lsls	r4, r6, #26
1a0045cc:	d41f      	bmi.n	1a00460e <_vfprintf_r+0x86e>
1a0045ce:	9b02      	ldr	r3, [sp, #8]
1a0045d0:	9a08      	ldr	r2, [sp, #32]
1a0045d2:	06d8      	lsls	r0, r3, #27
1a0045d4:	f852 4b04 	ldr.w	r4, [r2], #4
1a0045d8:	f101 8174 	bmi.w	1a0058c4 <_vfprintf_r+0x1b24>
1a0045dc:	9e02      	ldr	r6, [sp, #8]
1a0045de:	0671      	lsls	r1, r6, #25
1a0045e0:	f140 8577 	bpl.w	1a0050d2 <_vfprintf_r+0x1332>
1a0045e4:	9208      	str	r2, [sp, #32]
1a0045e6:	b2a4      	uxth	r4, r4
1a0045e8:	2500      	movs	r5, #0
1a0045ea:	2301      	movs	r3, #1
1a0045ec:	e703      	b.n	1a0043f6 <_vfprintf_r+0x656>
1a0045ee:	9805      	ldr	r0, [sp, #20]
1a0045f0:	f7fe fd32 	bl	1a003058 <__sinit>
1a0045f4:	f7ff bbea 	b.w	1a003dcc <_vfprintf_r+0x2c>
1a0045f8:	f1b8 0f00 	cmp.w	r8, #0
1a0045fc:	f43f ae88 	beq.w	1a004310 <_vfprintf_r+0x570>
1a004600:	2300      	movs	r3, #0
1a004602:	2601      	movs	r6, #1
1a004604:	461a      	mov	r2, r3
1a004606:	9603      	str	r6, [sp, #12]
1a004608:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a00460c:	e607      	b.n	1a00421e <_vfprintf_r+0x47e>
1a00460e:	9c08      	ldr	r4, [sp, #32]
1a004610:	3407      	adds	r4, #7
1a004612:	f024 0307 	bic.w	r3, r4, #7
1a004616:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00461a:	9308      	str	r3, [sp, #32]
1a00461c:	2301      	movs	r3, #1
1a00461e:	e6ea      	b.n	1a0043f6 <_vfprintf_r+0x656>
1a004620:	9c08      	ldr	r4, [sp, #32]
1a004622:	3407      	adds	r4, #7
1a004624:	f024 0307 	bic.w	r3, r4, #7
1a004628:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00462c:	9308      	str	r3, [sp, #32]
1a00462e:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
1a004632:	2300      	movs	r3, #0
1a004634:	e6df      	b.n	1a0043f6 <_vfprintf_r+0x656>
1a004636:	bf00      	nop
1a004638:	1a008100 	.word	0x1a008100
1a00463c:	1a0080e0 	.word	0x1a0080e0
1a004640:	7fefffff 	.word	0x7fefffff
1a004644:	1a0080bc 	.word	0x1a0080bc
1a004648:	1a0080c0 	.word	0x1a0080c0
1a00464c:	9e02      	ldr	r6, [sp, #8]
1a00464e:	2d00      	cmp	r5, #0
1a004650:	bf08      	it	eq
1a004652:	2c0a      	cmpeq	r4, #10
1a004654:	d213      	bcs.n	1a00467e <_vfprintf_r+0x8de>
1a004656:	3430      	adds	r4, #48	; 0x30
1a004658:	9602      	str	r6, [sp, #8]
1a00465a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a00465e:	2601      	movs	r6, #1
1a004660:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a004664:	2300      	movs	r3, #0
1a004666:	454e      	cmp	r6, r9
1a004668:	9309      	str	r3, [sp, #36]	; 0x24
1a00466a:	930c      	str	r3, [sp, #48]	; 0x30
1a00466c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a004670:	4633      	mov	r3, r6
1a004672:	bfb8      	it	lt
1a004674:	464b      	movlt	r3, r9
1a004676:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00467a:	9303      	str	r3, [sp, #12]
1a00467c:	e565      	b.n	1a00414a <_vfprintf_r+0x3aa>
1a00467e:	f406 6380 	and.w	r3, r6, #1024	; 0x400
1a004682:	2200      	movs	r2, #0
1a004684:	e9cd a802 	strd	sl, r8, [sp, #8]
1a004688:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a00468c:	af54      	add	r7, sp, #336	; 0x150
1a00468e:	46cb      	mov	fp, r9
1a004690:	4692      	mov	sl, r2
1a004692:	46b1      	mov	r9, r6
1a004694:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a004698:	461e      	mov	r6, r3
1a00469a:	e007      	b.n	1a0046ac <_vfprintf_r+0x90c>
1a00469c:	f7fe f9f0 	bl	1a002a80 <__aeabi_uldivmod>
1a0046a0:	2d00      	cmp	r5, #0
1a0046a2:	bf08      	it	eq
1a0046a4:	2c0a      	cmpeq	r4, #10
1a0046a6:	d320      	bcc.n	1a0046ea <_vfprintf_r+0x94a>
1a0046a8:	4604      	mov	r4, r0
1a0046aa:	460d      	mov	r5, r1
1a0046ac:	220a      	movs	r2, #10
1a0046ae:	2300      	movs	r3, #0
1a0046b0:	4620      	mov	r0, r4
1a0046b2:	4629      	mov	r1, r5
1a0046b4:	f7fe f9e4 	bl	1a002a80 <__aeabi_uldivmod>
1a0046b8:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a0046bc:	f807 cc01 	strb.w	ip, [r7, #-1]
1a0046c0:	4620      	mov	r0, r4
1a0046c2:	4629      	mov	r1, r5
1a0046c4:	220a      	movs	r2, #10
1a0046c6:	2300      	movs	r3, #0
1a0046c8:	f10a 0a01 	add.w	sl, sl, #1
1a0046cc:	3f01      	subs	r7, #1
1a0046ce:	2e00      	cmp	r6, #0
1a0046d0:	d0e4      	beq.n	1a00469c <_vfprintf_r+0x8fc>
1a0046d2:	f898 c000 	ldrb.w	ip, [r8]
1a0046d6:	45e2      	cmp	sl, ip
1a0046d8:	d1e0      	bne.n	1a00469c <_vfprintf_r+0x8fc>
1a0046da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a0046de:	d0dd      	beq.n	1a00469c <_vfprintf_r+0x8fc>
1a0046e0:	429d      	cmp	r5, r3
1a0046e2:	bf08      	it	eq
1a0046e4:	4294      	cmpeq	r4, r2
1a0046e6:	f080 871e 	bcs.w	1a005526 <_vfprintf_r+0x1786>
1a0046ea:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a0046ee:	464e      	mov	r6, r9
1a0046f0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0046f4:	46d9      	mov	r9, fp
1a0046f6:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0046fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a0046fe:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a004702:	9602      	str	r6, [sp, #8]
1a004704:	ab54      	add	r3, sp, #336	; 0x150
1a004706:	1bde      	subs	r6, r3, r7
1a004708:	e7ac      	b.n	1a004664 <_vfprintf_r+0x8c4>
1a00470a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a00470e:	f340 810a 	ble.w	1a004926 <_vfprintf_r+0xb86>
1a004712:	2200      	movs	r2, #0
1a004714:	2300      	movs	r3, #0
1a004716:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00471a:	f7fe f941 	bl	1a0029a0 <__aeabi_dcmpeq>
1a00471e:	2800      	cmp	r0, #0
1a004720:	f000 81de 	beq.w	1a004ae0 <_vfprintf_r+0xd40>
1a004724:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004726:	4ac2      	ldr	r2, [pc, #776]	; (1a004a30 <_vfprintf_r+0xc90>)
1a004728:	f8cb 2000 	str.w	r2, [fp]
1a00472c:	3301      	adds	r3, #1
1a00472e:	3401      	adds	r4, #1
1a004730:	2201      	movs	r2, #1
1a004732:	2b07      	cmp	r3, #7
1a004734:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004738:	f8cb 2004 	str.w	r2, [fp, #4]
1a00473c:	f300 8463 	bgt.w	1a005006 <_vfprintf_r+0x1266>
1a004740:	f10b 0b08 	add.w	fp, fp, #8
1a004744:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004746:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004748:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00474a:	4293      	cmp	r3, r2
1a00474c:	f280 82a5 	bge.w	1a004c9a <_vfprintf_r+0xefa>
1a004750:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004752:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004754:	f8cb 2000 	str.w	r2, [fp]
1a004758:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a00475a:	f8cb 2004 	str.w	r2, [fp, #4]
1a00475e:	3301      	adds	r3, #1
1a004760:	4414      	add	r4, r2
1a004762:	2b07      	cmp	r3, #7
1a004764:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004768:	f300 83ec 	bgt.w	1a004f44 <_vfprintf_r+0x11a4>
1a00476c:	f10b 0b08 	add.w	fp, fp, #8
1a004770:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004772:	1e5d      	subs	r5, r3, #1
1a004774:	2d00      	cmp	r5, #0
1a004776:	f77f ada8 	ble.w	1a0042ca <_vfprintf_r+0x52a>
1a00477a:	2d10      	cmp	r5, #16
1a00477c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00477e:	4bad      	ldr	r3, [pc, #692]	; (1a004a34 <_vfprintf_r+0xc94>)
1a004780:	f340 844e 	ble.w	1a005020 <_vfprintf_r+0x1280>
1a004784:	2610      	movs	r6, #16
1a004786:	9f05      	ldr	r7, [sp, #20]
1a004788:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00478c:	4699      	mov	r9, r3
1a00478e:	e005      	b.n	1a00479c <_vfprintf_r+0x9fc>
1a004790:	f10b 0b08 	add.w	fp, fp, #8
1a004794:	3d10      	subs	r5, #16
1a004796:	2d10      	cmp	r5, #16
1a004798:	f340 8441 	ble.w	1a00501e <_vfprintf_r+0x127e>
1a00479c:	3201      	adds	r2, #1
1a00479e:	3410      	adds	r4, #16
1a0047a0:	2a07      	cmp	r2, #7
1a0047a2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0047a6:	e9cb 9600 	strd	r9, r6, [fp]
1a0047aa:	ddf1      	ble.n	1a004790 <_vfprintf_r+0x9f0>
1a0047ac:	aa28      	add	r2, sp, #160	; 0xa0
1a0047ae:	4641      	mov	r1, r8
1a0047b0:	4638      	mov	r0, r7
1a0047b2:	f003 f931 	bl	1a007a18 <__sprint_r>
1a0047b6:	2800      	cmp	r0, #0
1a0047b8:	f040 8423 	bne.w	1a005002 <_vfprintf_r+0x1262>
1a0047bc:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0047c0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0047c4:	e7e6      	b.n	1a004794 <_vfprintf_r+0x9f4>
1a0047c6:	9b06      	ldr	r3, [sp, #24]
1a0047c8:	9a03      	ldr	r2, [sp, #12]
1a0047ca:	1a9d      	subs	r5, r3, r2
1a0047cc:	2d00      	cmp	r5, #0
1a0047ce:	f77f ad65 	ble.w	1a00429c <_vfprintf_r+0x4fc>
1a0047d2:	2d10      	cmp	r5, #16
1a0047d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0047d6:	4b97      	ldr	r3, [pc, #604]	; (1a004a34 <_vfprintf_r+0xc94>)
1a0047d8:	dd28      	ble.n	1a00482c <_vfprintf_r+0xa8c>
1a0047da:	960a      	str	r6, [sp, #40]	; 0x28
1a0047dc:	4659      	mov	r1, fp
1a0047de:	4620      	mov	r0, r4
1a0047e0:	46bb      	mov	fp, r7
1a0047e2:	9c05      	ldr	r4, [sp, #20]
1a0047e4:	9e07      	ldr	r6, [sp, #28]
1a0047e6:	461f      	mov	r7, r3
1a0047e8:	e004      	b.n	1a0047f4 <_vfprintf_r+0xa54>
1a0047ea:	3d10      	subs	r5, #16
1a0047ec:	2d10      	cmp	r5, #16
1a0047ee:	f101 0108 	add.w	r1, r1, #8
1a0047f2:	dd16      	ble.n	1a004822 <_vfprintf_r+0xa82>
1a0047f4:	3201      	adds	r2, #1
1a0047f6:	3010      	adds	r0, #16
1a0047f8:	2310      	movs	r3, #16
1a0047fa:	2a07      	cmp	r2, #7
1a0047fc:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a004800:	600f      	str	r7, [r1, #0]
1a004802:	604b      	str	r3, [r1, #4]
1a004804:	ddf1      	ble.n	1a0047ea <_vfprintf_r+0xa4a>
1a004806:	aa28      	add	r2, sp, #160	; 0xa0
1a004808:	4631      	mov	r1, r6
1a00480a:	4620      	mov	r0, r4
1a00480c:	f003 f904 	bl	1a007a18 <__sprint_r>
1a004810:	2800      	cmp	r0, #0
1a004812:	f040 80f6 	bne.w	1a004a02 <_vfprintf_r+0xc62>
1a004816:	3d10      	subs	r5, #16
1a004818:	2d10      	cmp	r5, #16
1a00481a:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00481e:	a92b      	add	r1, sp, #172	; 0xac
1a004820:	dce8      	bgt.n	1a0047f4 <_vfprintf_r+0xa54>
1a004822:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a004824:	463b      	mov	r3, r7
1a004826:	4604      	mov	r4, r0
1a004828:	465f      	mov	r7, fp
1a00482a:	468b      	mov	fp, r1
1a00482c:	3201      	adds	r2, #1
1a00482e:	442c      	add	r4, r5
1a004830:	2a07      	cmp	r2, #7
1a004832:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004836:	e9cb 3500 	strd	r3, r5, [fp]
1a00483a:	f300 8355 	bgt.w	1a004ee8 <_vfprintf_r+0x1148>
1a00483e:	eba9 0506 	sub.w	r5, r9, r6
1a004842:	2d00      	cmp	r5, #0
1a004844:	f10b 0b08 	add.w	fp, fp, #8
1a004848:	f77f ad2d 	ble.w	1a0042a6 <_vfprintf_r+0x506>
1a00484c:	2d10      	cmp	r5, #16
1a00484e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004850:	4b78      	ldr	r3, [pc, #480]	; (1a004a34 <_vfprintf_r+0xc94>)
1a004852:	dd29      	ble.n	1a0048a8 <_vfprintf_r+0xb08>
1a004854:	960a      	str	r6, [sp, #40]	; 0x28
1a004856:	4659      	mov	r1, fp
1a004858:	4620      	mov	r0, r4
1a00485a:	46bb      	mov	fp, r7
1a00485c:	f04f 0910 	mov.w	r9, #16
1a004860:	9c05      	ldr	r4, [sp, #20]
1a004862:	9e07      	ldr	r6, [sp, #28]
1a004864:	461f      	mov	r7, r3
1a004866:	e004      	b.n	1a004872 <_vfprintf_r+0xad2>
1a004868:	3d10      	subs	r5, #16
1a00486a:	2d10      	cmp	r5, #16
1a00486c:	f101 0108 	add.w	r1, r1, #8
1a004870:	dd15      	ble.n	1a00489e <_vfprintf_r+0xafe>
1a004872:	3201      	adds	r2, #1
1a004874:	3010      	adds	r0, #16
1a004876:	2a07      	cmp	r2, #7
1a004878:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00487c:	e9c1 7900 	strd	r7, r9, [r1]
1a004880:	ddf2      	ble.n	1a004868 <_vfprintf_r+0xac8>
1a004882:	aa28      	add	r2, sp, #160	; 0xa0
1a004884:	4631      	mov	r1, r6
1a004886:	4620      	mov	r0, r4
1a004888:	f003 f8c6 	bl	1a007a18 <__sprint_r>
1a00488c:	2800      	cmp	r0, #0
1a00488e:	f040 80b8 	bne.w	1a004a02 <_vfprintf_r+0xc62>
1a004892:	3d10      	subs	r5, #16
1a004894:	2d10      	cmp	r5, #16
1a004896:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00489a:	a92b      	add	r1, sp, #172	; 0xac
1a00489c:	dce9      	bgt.n	1a004872 <_vfprintf_r+0xad2>
1a00489e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a0048a0:	463b      	mov	r3, r7
1a0048a2:	4604      	mov	r4, r0
1a0048a4:	465f      	mov	r7, fp
1a0048a6:	468b      	mov	fp, r1
1a0048a8:	3201      	adds	r2, #1
1a0048aa:	442c      	add	r4, r5
1a0048ac:	2a07      	cmp	r2, #7
1a0048ae:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0048b2:	e9cb 3500 	strd	r3, r5, [fp]
1a0048b6:	f300 81da 	bgt.w	1a004c6e <_vfprintf_r+0xece>
1a0048ba:	f10b 0b08 	add.w	fp, fp, #8
1a0048be:	e4f2      	b.n	1a0042a6 <_vfprintf_r+0x506>
1a0048c0:	aa28      	add	r2, sp, #160	; 0xa0
1a0048c2:	9907      	ldr	r1, [sp, #28]
1a0048c4:	9805      	ldr	r0, [sp, #20]
1a0048c6:	f003 f8a7 	bl	1a007a18 <__sprint_r>
1a0048ca:	2800      	cmp	r0, #0
1a0048cc:	f43f ad11 	beq.w	1a0042f2 <_vfprintf_r+0x552>
1a0048d0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0048d4:	e096      	b.n	1a004a04 <_vfprintf_r+0xc64>
1a0048d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0048d8:	9915      	ldr	r1, [sp, #84]	; 0x54
1a0048da:	f8cb 1000 	str.w	r1, [fp]
1a0048de:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0048e0:	f8cb 1004 	str.w	r1, [fp, #4]
1a0048e4:	3201      	adds	r2, #1
1a0048e6:	440c      	add	r4, r1
1a0048e8:	2a07      	cmp	r2, #7
1a0048ea:	942a      	str	r4, [sp, #168]	; 0xa8
1a0048ec:	9229      	str	r2, [sp, #164]	; 0xa4
1a0048ee:	f300 84e1 	bgt.w	1a0052b4 <_vfprintf_r+0x1514>
1a0048f2:	f10b 0b08 	add.w	fp, fp, #8
1a0048f6:	2b00      	cmp	r3, #0
1a0048f8:	f2c0 86a2 	blt.w	1a005640 <_vfprintf_r+0x18a0>
1a0048fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0048fe:	3201      	adds	r2, #1
1a004900:	441c      	add	r4, r3
1a004902:	2a07      	cmp	r2, #7
1a004904:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004908:	e9cb 7300 	strd	r7, r3, [fp]
1a00490c:	f77f acdb 	ble.w	1a0042c6 <_vfprintf_r+0x526>
1a004910:	aa28      	add	r2, sp, #160	; 0xa0
1a004912:	9907      	ldr	r1, [sp, #28]
1a004914:	9805      	ldr	r0, [sp, #20]
1a004916:	f003 f87f 	bl	1a007a18 <__sprint_r>
1a00491a:	2800      	cmp	r0, #0
1a00491c:	d1d8      	bne.n	1a0048d0 <_vfprintf_r+0xb30>
1a00491e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004920:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004924:	e4d1      	b.n	1a0042ca <_vfprintf_r+0x52a>
1a004926:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004928:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00492a:	2a01      	cmp	r2, #1
1a00492c:	f104 0401 	add.w	r4, r4, #1
1a004930:	f103 0501 	add.w	r5, r3, #1
1a004934:	f10b 0608 	add.w	r6, fp, #8
1a004938:	f340 8158 	ble.w	1a004bec <_vfprintf_r+0xe4c>
1a00493c:	2301      	movs	r3, #1
1a00493e:	2d07      	cmp	r5, #7
1a004940:	f8cb 7000 	str.w	r7, [fp]
1a004944:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a004948:	f8cb 3004 	str.w	r3, [fp, #4]
1a00494c:	f300 832a 	bgt.w	1a004fa4 <_vfprintf_r+0x1204>
1a004950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004952:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004954:	1c69      	adds	r1, r5, #1
1a004956:	441c      	add	r4, r3
1a004958:	2907      	cmp	r1, #7
1a00495a:	910b      	str	r1, [sp, #44]	; 0x2c
1a00495c:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a004960:	e9c6 2300 	strd	r2, r3, [r6]
1a004964:	f300 832a 	bgt.w	1a004fbc <_vfprintf_r+0x121c>
1a004968:	3608      	adds	r6, #8
1a00496a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00496c:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a00496e:	f102 0901 	add.w	r9, r2, #1
1a004972:	2300      	movs	r3, #0
1a004974:	2200      	movs	r2, #0
1a004976:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00497a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a00497e:	f106 0b08 	add.w	fp, r6, #8
1a004982:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a004986:	f7fe f80b 	bl	1a0029a0 <__aeabi_dcmpeq>
1a00498a:	2800      	cmp	r0, #0
1a00498c:	f040 8141 	bne.w	1a004c12 <_vfprintf_r+0xe72>
1a004990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004992:	f8c6 8004 	str.w	r8, [r6, #4]
1a004996:	3701      	adds	r7, #1
1a004998:	4444      	add	r4, r8
1a00499a:	2b07      	cmp	r3, #7
1a00499c:	6037      	str	r7, [r6, #0]
1a00499e:	942a      	str	r4, [sp, #168]	; 0xa8
1a0049a0:	9329      	str	r3, [sp, #164]	; 0xa4
1a0049a2:	f300 82bf 	bgt.w	1a004f24 <_vfprintf_r+0x1184>
1a0049a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0049a8:	f106 0310 	add.w	r3, r6, #16
1a0049ac:	3202      	adds	r2, #2
1a0049ae:	465e      	mov	r6, fp
1a0049b0:	920a      	str	r2, [sp, #40]	; 0x28
1a0049b2:	469b      	mov	fp, r3
1a0049b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a0049b6:	6072      	str	r2, [r6, #4]
1a0049b8:	4414      	add	r4, r2
1a0049ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0049bc:	942a      	str	r4, [sp, #168]	; 0xa8
1a0049be:	ab24      	add	r3, sp, #144	; 0x90
1a0049c0:	2a07      	cmp	r2, #7
1a0049c2:	9229      	str	r2, [sp, #164]	; 0xa4
1a0049c4:	6033      	str	r3, [r6, #0]
1a0049c6:	f77f ac80 	ble.w	1a0042ca <_vfprintf_r+0x52a>
1a0049ca:	e7a1      	b.n	1a004910 <_vfprintf_r+0xb70>
1a0049cc:	9e02      	ldr	r6, [sp, #8]
1a0049ce:	f7ff bbf4 	b.w	1a0041ba <_vfprintf_r+0x41a>
1a0049d2:	aa28      	add	r2, sp, #160	; 0xa0
1a0049d4:	9907      	ldr	r1, [sp, #28]
1a0049d6:	9805      	ldr	r0, [sp, #20]
1a0049d8:	f003 f81e 	bl	1a007a18 <__sprint_r>
1a0049dc:	2800      	cmp	r0, #0
1a0049de:	f47f af77 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a0049e2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0049e4:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0049e8:	e444      	b.n	1a004274 <_vfprintf_r+0x4d4>
1a0049ea:	aa28      	add	r2, sp, #160	; 0xa0
1a0049ec:	9907      	ldr	r1, [sp, #28]
1a0049ee:	9805      	ldr	r0, [sp, #20]
1a0049f0:	f003 f812 	bl	1a007a18 <__sprint_r>
1a0049f4:	2800      	cmp	r0, #0
1a0049f6:	f47f af6b 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a0049fa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0049fc:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004a00:	e448      	b.n	1a004294 <_vfprintf_r+0x4f4>
1a004a02:	46b1      	mov	r9, r6
1a004a04:	9909      	ldr	r1, [sp, #36]	; 0x24
1a004a06:	b111      	cbz	r1, 1a004a0e <_vfprintf_r+0xc6e>
1a004a08:	9805      	ldr	r0, [sp, #20]
1a004a0a:	f7fe fbab 	bl	1a003164 <_free_r>
1a004a0e:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a004a12:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004a16:	07d4      	lsls	r4, r2, #31
1a004a18:	d402      	bmi.n	1a004a20 <_vfprintf_r+0xc80>
1a004a1a:	0598      	lsls	r0, r3, #22
1a004a1c:	f140 82db 	bpl.w	1a004fd6 <_vfprintf_r+0x1236>
1a004a20:	0659      	lsls	r1, r3, #25
1a004a22:	f100 8640 	bmi.w	1a0056a6 <_vfprintf_r+0x1906>
1a004a26:	9804      	ldr	r0, [sp, #16]
1a004a28:	b055      	add	sp, #340	; 0x154
1a004a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004a2e:	bf00      	nop
1a004a30:	1a0080fc 	.word	0x1a0080fc
1a004a34:	1a008110 	.word	0x1a008110
1a004a38:	2d10      	cmp	r5, #16
1a004a3a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004a3c:	dd21      	ble.n	1a004a82 <_vfprintf_r+0xce2>
1a004a3e:	2610      	movs	r6, #16
1a004a40:	9f05      	ldr	r7, [sp, #20]
1a004a42:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a004a46:	e004      	b.n	1a004a52 <_vfprintf_r+0xcb2>
1a004a48:	3d10      	subs	r5, #16
1a004a4a:	2d10      	cmp	r5, #16
1a004a4c:	f10b 0b08 	add.w	fp, fp, #8
1a004a50:	dd17      	ble.n	1a004a82 <_vfprintf_r+0xce2>
1a004a52:	3301      	adds	r3, #1
1a004a54:	4ab3      	ldr	r2, [pc, #716]	; (1a004d24 <_vfprintf_r+0xf84>)
1a004a56:	3410      	adds	r4, #16
1a004a58:	2b07      	cmp	r3, #7
1a004a5a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004a5e:	e9cb 2600 	strd	r2, r6, [fp]
1a004a62:	ddf1      	ble.n	1a004a48 <_vfprintf_r+0xca8>
1a004a64:	aa28      	add	r2, sp, #160	; 0xa0
1a004a66:	4641      	mov	r1, r8
1a004a68:	4638      	mov	r0, r7
1a004a6a:	f002 ffd5 	bl	1a007a18 <__sprint_r>
1a004a6e:	2800      	cmp	r0, #0
1a004a70:	f040 82c7 	bne.w	1a005002 <_vfprintf_r+0x1262>
1a004a74:	3d10      	subs	r5, #16
1a004a76:	2d10      	cmp	r5, #16
1a004a78:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004a7c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004a80:	dce7      	bgt.n	1a004a52 <_vfprintf_r+0xcb2>
1a004a82:	3301      	adds	r3, #1
1a004a84:	4aa7      	ldr	r2, [pc, #668]	; (1a004d24 <_vfprintf_r+0xf84>)
1a004a86:	442c      	add	r4, r5
1a004a88:	2b07      	cmp	r3, #7
1a004a8a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004a8e:	e9cb 2500 	strd	r2, r5, [fp]
1a004a92:	f77f ac23 	ble.w	1a0042dc <_vfprintf_r+0x53c>
1a004a96:	aa28      	add	r2, sp, #160	; 0xa0
1a004a98:	9907      	ldr	r1, [sp, #28]
1a004a9a:	9805      	ldr	r0, [sp, #20]
1a004a9c:	f002 ffbc 	bl	1a007a18 <__sprint_r>
1a004aa0:	2800      	cmp	r0, #0
1a004aa2:	f47f af15 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a004aa6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004aa8:	e418      	b.n	1a0042dc <_vfprintf_r+0x53c>
1a004aaa:	2b01      	cmp	r3, #1
1a004aac:	f000 8423 	beq.w	1a0052f6 <_vfprintf_r+0x1556>
1a004ab0:	2b02      	cmp	r3, #2
1a004ab2:	9e02      	ldr	r6, [sp, #8]
1a004ab4:	f47f ab87 	bne.w	1a0041c6 <_vfprintf_r+0x426>
1a004ab8:	9814      	ldr	r0, [sp, #80]	; 0x50
1a004aba:	af54      	add	r7, sp, #336	; 0x150
1a004abc:	0923      	lsrs	r3, r4, #4
1a004abe:	f004 010f 	and.w	r1, r4, #15
1a004ac2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a004ac6:	092a      	lsrs	r2, r5, #4
1a004ac8:	461c      	mov	r4, r3
1a004aca:	4615      	mov	r5, r2
1a004acc:	5c43      	ldrb	r3, [r0, r1]
1a004ace:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a004ad2:	ea54 0305 	orrs.w	r3, r4, r5
1a004ad6:	d1f1      	bne.n	1a004abc <_vfprintf_r+0xd1c>
1a004ad8:	ab54      	add	r3, sp, #336	; 0x150
1a004ada:	9602      	str	r6, [sp, #8]
1a004adc:	1bde      	subs	r6, r3, r7
1a004ade:	e5c1      	b.n	1a004664 <_vfprintf_r+0x8c4>
1a004ae0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004ae2:	2b00      	cmp	r3, #0
1a004ae4:	f340 80df 	ble.w	1a004ca6 <_vfprintf_r+0xf06>
1a004ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004aea:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004aec:	4293      	cmp	r3, r2
1a004aee:	bfa8      	it	ge
1a004af0:	4613      	movge	r3, r2
1a004af2:	2b00      	cmp	r3, #0
1a004af4:	461d      	mov	r5, r3
1a004af6:	dd0d      	ble.n	1a004b14 <_vfprintf_r+0xd74>
1a004af8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004afa:	f8cb 7000 	str.w	r7, [fp]
1a004afe:	3301      	adds	r3, #1
1a004b00:	442c      	add	r4, r5
1a004b02:	2b07      	cmp	r3, #7
1a004b04:	942a      	str	r4, [sp, #168]	; 0xa8
1a004b06:	f8cb 5004 	str.w	r5, [fp, #4]
1a004b0a:	9329      	str	r3, [sp, #164]	; 0xa4
1a004b0c:	f300 84fe 	bgt.w	1a00550c <_vfprintf_r+0x176c>
1a004b10:	f10b 0b08 	add.w	fp, fp, #8
1a004b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004b16:	2d00      	cmp	r5, #0
1a004b18:	bfa8      	it	ge
1a004b1a:	1b5b      	subge	r3, r3, r5
1a004b1c:	2b00      	cmp	r3, #0
1a004b1e:	461d      	mov	r5, r3
1a004b20:	f300 8290 	bgt.w	1a005044 <_vfprintf_r+0x12a4>
1a004b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004b26:	443b      	add	r3, r7
1a004b28:	4699      	mov	r9, r3
1a004b2a:	9b02      	ldr	r3, [sp, #8]
1a004b2c:	0558      	lsls	r0, r3, #21
1a004b2e:	f100 8413 	bmi.w	1a005358 <_vfprintf_r+0x15b8>
1a004b32:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004b34:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004b36:	4293      	cmp	r3, r2
1a004b38:	db03      	blt.n	1a004b42 <_vfprintf_r+0xda2>
1a004b3a:	9a02      	ldr	r2, [sp, #8]
1a004b3c:	07d1      	lsls	r1, r2, #31
1a004b3e:	f140 82f7 	bpl.w	1a005130 <_vfprintf_r+0x1390>
1a004b42:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004b44:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004b46:	f8cb 1000 	str.w	r1, [fp]
1a004b4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a004b4c:	f8cb 1004 	str.w	r1, [fp, #4]
1a004b50:	3201      	adds	r2, #1
1a004b52:	440c      	add	r4, r1
1a004b54:	2a07      	cmp	r2, #7
1a004b56:	942a      	str	r4, [sp, #168]	; 0xa8
1a004b58:	9229      	str	r2, [sp, #164]	; 0xa4
1a004b5a:	f300 8523 	bgt.w	1a0055a4 <_vfprintf_r+0x1804>
1a004b5e:	f10b 0b08 	add.w	fp, fp, #8
1a004b62:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004b64:	18bd      	adds	r5, r7, r2
1a004b66:	eba5 0509 	sub.w	r5, r5, r9
1a004b6a:	1ad3      	subs	r3, r2, r3
1a004b6c:	429d      	cmp	r5, r3
1a004b6e:	bfa8      	it	ge
1a004b70:	461d      	movge	r5, r3
1a004b72:	2d00      	cmp	r5, #0
1a004b74:	dd0d      	ble.n	1a004b92 <_vfprintf_r+0xdf2>
1a004b76:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004b78:	f8cb 9000 	str.w	r9, [fp]
1a004b7c:	3201      	adds	r2, #1
1a004b7e:	442c      	add	r4, r5
1a004b80:	2a07      	cmp	r2, #7
1a004b82:	942a      	str	r4, [sp, #168]	; 0xa8
1a004b84:	f8cb 5004 	str.w	r5, [fp, #4]
1a004b88:	9229      	str	r2, [sp, #164]	; 0xa4
1a004b8a:	f300 8546 	bgt.w	1a00561a <_vfprintf_r+0x187a>
1a004b8e:	f10b 0b08 	add.w	fp, fp, #8
1a004b92:	2d00      	cmp	r5, #0
1a004b94:	bfac      	ite	ge
1a004b96:	1b5d      	subge	r5, r3, r5
1a004b98:	461d      	movlt	r5, r3
1a004b9a:	2d00      	cmp	r5, #0
1a004b9c:	f77f ab95 	ble.w	1a0042ca <_vfprintf_r+0x52a>
1a004ba0:	2d10      	cmp	r5, #16
1a004ba2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004ba4:	4b60      	ldr	r3, [pc, #384]	; (1a004d28 <_vfprintf_r+0xf88>)
1a004ba6:	f340 823b 	ble.w	1a005020 <_vfprintf_r+0x1280>
1a004baa:	2610      	movs	r6, #16
1a004bac:	9f05      	ldr	r7, [sp, #20]
1a004bae:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a004bb2:	4699      	mov	r9, r3
1a004bb4:	e005      	b.n	1a004bc2 <_vfprintf_r+0xe22>
1a004bb6:	f10b 0b08 	add.w	fp, fp, #8
1a004bba:	3d10      	subs	r5, #16
1a004bbc:	2d10      	cmp	r5, #16
1a004bbe:	f340 822e 	ble.w	1a00501e <_vfprintf_r+0x127e>
1a004bc2:	3201      	adds	r2, #1
1a004bc4:	3410      	adds	r4, #16
1a004bc6:	2a07      	cmp	r2, #7
1a004bc8:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004bcc:	e9cb 9600 	strd	r9, r6, [fp]
1a004bd0:	ddf1      	ble.n	1a004bb6 <_vfprintf_r+0xe16>
1a004bd2:	aa28      	add	r2, sp, #160	; 0xa0
1a004bd4:	4641      	mov	r1, r8
1a004bd6:	4638      	mov	r0, r7
1a004bd8:	f002 ff1e 	bl	1a007a18 <__sprint_r>
1a004bdc:	2800      	cmp	r0, #0
1a004bde:	f040 8210 	bne.w	1a005002 <_vfprintf_r+0x1262>
1a004be2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004be6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004bea:	e7e6      	b.n	1a004bba <_vfprintf_r+0xe1a>
1a004bec:	9a02      	ldr	r2, [sp, #8]
1a004bee:	07d2      	lsls	r2, r2, #31
1a004bf0:	f53f aea4 	bmi.w	1a00493c <_vfprintf_r+0xb9c>
1a004bf4:	2201      	movs	r2, #1
1a004bf6:	2d07      	cmp	r5, #7
1a004bf8:	f8cb 7000 	str.w	r7, [fp]
1a004bfc:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a004c00:	f8cb 2004 	str.w	r2, [fp, #4]
1a004c04:	f300 818e 	bgt.w	1a004f24 <_vfprintf_r+0x1184>
1a004c08:	3302      	adds	r3, #2
1a004c0a:	930a      	str	r3, [sp, #40]	; 0x28
1a004c0c:	f10b 0b10 	add.w	fp, fp, #16
1a004c10:	e6d0      	b.n	1a0049b4 <_vfprintf_r+0xc14>
1a004c12:	f1b8 0f00 	cmp.w	r8, #0
1a004c16:	f77f aecd 	ble.w	1a0049b4 <_vfprintf_r+0xc14>
1a004c1a:	f1b8 0f10 	cmp.w	r8, #16
1a004c1e:	4b42      	ldr	r3, [pc, #264]	; (1a004d28 <_vfprintf_r+0xf88>)
1a004c20:	f340 8635 	ble.w	1a00588e <_vfprintf_r+0x1aee>
1a004c24:	461a      	mov	r2, r3
1a004c26:	464d      	mov	r5, r9
1a004c28:	4623      	mov	r3, r4
1a004c2a:	2710      	movs	r7, #16
1a004c2c:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a004c30:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a004c34:	4614      	mov	r4, r2
1a004c36:	e007      	b.n	1a004c48 <_vfprintf_r+0xea8>
1a004c38:	3608      	adds	r6, #8
1a004c3a:	f1a8 0810 	sub.w	r8, r8, #16
1a004c3e:	f1b8 0f10 	cmp.w	r8, #16
1a004c42:	f340 815e 	ble.w	1a004f02 <_vfprintf_r+0x1162>
1a004c46:	3501      	adds	r5, #1
1a004c48:	3310      	adds	r3, #16
1a004c4a:	2d07      	cmp	r5, #7
1a004c4c:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a004c50:	e9c6 4700 	strd	r4, r7, [r6]
1a004c54:	ddf0      	ble.n	1a004c38 <_vfprintf_r+0xe98>
1a004c56:	aa28      	add	r2, sp, #160	; 0xa0
1a004c58:	4659      	mov	r1, fp
1a004c5a:	4648      	mov	r0, r9
1a004c5c:	f002 fedc 	bl	1a007a18 <__sprint_r>
1a004c60:	2800      	cmp	r0, #0
1a004c62:	f040 821d 	bne.w	1a0050a0 <_vfprintf_r+0x1300>
1a004c66:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a004c6a:	ae2b      	add	r6, sp, #172	; 0xac
1a004c6c:	e7e5      	b.n	1a004c3a <_vfprintf_r+0xe9a>
1a004c6e:	aa28      	add	r2, sp, #160	; 0xa0
1a004c70:	9907      	ldr	r1, [sp, #28]
1a004c72:	9805      	ldr	r0, [sp, #20]
1a004c74:	f002 fed0 	bl	1a007a18 <__sprint_r>
1a004c78:	2800      	cmp	r0, #0
1a004c7a:	f47f ae29 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a004c7e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004c80:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004c84:	f7ff bb0f 	b.w	1a0042a6 <_vfprintf_r+0x506>
1a004c88:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a004c8c:	f7fe fbb2 	bl	1a0033f4 <__retarget_lock_acquire_recursive>
1a004c90:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a004c94:	b293      	uxth	r3, r2
1a004c96:	f7ff b8a3 	b.w	1a003de0 <_vfprintf_r+0x40>
1a004c9a:	9b02      	ldr	r3, [sp, #8]
1a004c9c:	07dd      	lsls	r5, r3, #31
1a004c9e:	f53f ad57 	bmi.w	1a004750 <_vfprintf_r+0x9b0>
1a004ca2:	f7ff bb12 	b.w	1a0042ca <_vfprintf_r+0x52a>
1a004ca6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004ca8:	4920      	ldr	r1, [pc, #128]	; (1a004d2c <_vfprintf_r+0xf8c>)
1a004caa:	f8cb 1000 	str.w	r1, [fp]
1a004cae:	3201      	adds	r2, #1
1a004cb0:	3401      	adds	r4, #1
1a004cb2:	2101      	movs	r1, #1
1a004cb4:	2a07      	cmp	r2, #7
1a004cb6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004cba:	f8cb 1004 	str.w	r1, [fp, #4]
1a004cbe:	f300 8409 	bgt.w	1a0054d4 <_vfprintf_r+0x1734>
1a004cc2:	f10b 0b08 	add.w	fp, fp, #8
1a004cc6:	2b00      	cmp	r3, #0
1a004cc8:	f47f ae05 	bne.w	1a0048d6 <_vfprintf_r+0xb36>
1a004ccc:	9b02      	ldr	r3, [sp, #8]
1a004cce:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004cd0:	f003 0301 	and.w	r3, r3, #1
1a004cd4:	4313      	orrs	r3, r2
1a004cd6:	f43f aaf8 	beq.w	1a0042ca <_vfprintf_r+0x52a>
1a004cda:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004cdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a004cde:	f8cb 3000 	str.w	r3, [fp]
1a004ce2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004ce4:	f8cb 3004 	str.w	r3, [fp, #4]
1a004ce8:	3201      	adds	r2, #1
1a004cea:	441c      	add	r4, r3
1a004cec:	2a07      	cmp	r2, #7
1a004cee:	942a      	str	r4, [sp, #168]	; 0xa8
1a004cf0:	9229      	str	r2, [sp, #164]	; 0xa4
1a004cf2:	f300 82df 	bgt.w	1a0052b4 <_vfprintf_r+0x1514>
1a004cf6:	f10b 0b08 	add.w	fp, fp, #8
1a004cfa:	e5ff      	b.n	1a0048fc <_vfprintf_r+0xb5c>
1a004cfc:	af54      	add	r7, sp, #336	; 0x150
1a004cfe:	e4b1      	b.n	1a004664 <_vfprintf_r+0x8c4>
1a004d00:	9b02      	ldr	r3, [sp, #8]
1a004d02:	0598      	lsls	r0, r3, #22
1a004d04:	f100 822d 	bmi.w	1a005162 <_vfprintf_r+0x13c2>
1a004d08:	2500      	movs	r5, #0
1a004d0a:	f7ff b987 	b.w	1a00401c <_vfprintf_r+0x27c>
1a004d0e:	9904      	ldr	r1, [sp, #16]
1a004d10:	6812      	ldr	r2, [r2, #0]
1a004d12:	9308      	str	r3, [sp, #32]
1a004d14:	17cd      	asrs	r5, r1, #31
1a004d16:	4608      	mov	r0, r1
1a004d18:	4629      	mov	r1, r5
1a004d1a:	e9c2 0100 	strd	r0, r1, [r2]
1a004d1e:	4657      	mov	r7, sl
1a004d20:	f7ff baf2 	b.w	1a004308 <_vfprintf_r+0x568>
1a004d24:	1a008100 	.word	0x1a008100
1a004d28:	1a008110 	.word	0x1a008110
1a004d2c:	1a0080fc 	.word	0x1a0080fc
1a004d30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004d34:	4602      	mov	r2, r0
1a004d36:	460b      	mov	r3, r1
1a004d38:	f7fd fe64 	bl	1a002a04 <__aeabi_dcmpun>
1a004d3c:	2800      	cmp	r0, #0
1a004d3e:	f040 853a 	bne.w	1a0057b6 <_vfprintf_r+0x1a16>
1a004d42:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a004d46:	f000 84d0 	beq.w	1a0056ea <_vfprintf_r+0x194a>
1a004d4a:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a004d4e:	f000 820c 	beq.w	1a00516a <_vfprintf_r+0x13ca>
1a004d52:	f028 0320 	bic.w	r3, r8, #32
1a004d56:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004d5a:	9303      	str	r3, [sp, #12]
1a004d5c:	f000 8500 	beq.w	1a005760 <_vfprintf_r+0x19c0>
1a004d60:	2b47      	cmp	r3, #71	; 0x47
1a004d62:	d104      	bne.n	1a004d6e <_vfprintf_r+0xfce>
1a004d64:	f1b9 0f00 	cmp.w	r9, #0
1a004d68:	bf08      	it	eq
1a004d6a:	f04f 0901 	moveq.w	r9, #1
1a004d6e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a004d72:	9902      	ldr	r1, [sp, #8]
1a004d74:	2d00      	cmp	r5, #0
1a004d76:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a004d7a:	f2c0 8395 	blt.w	1a0054a8 <_vfprintf_r+0x1708>
1a004d7e:	2300      	movs	r3, #0
1a004d80:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
1a004d84:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a004d88:	931e      	str	r3, [sp, #120]	; 0x78
1a004d8a:	9202      	str	r2, [sp, #8]
1a004d8c:	9b03      	ldr	r3, [sp, #12]
1a004d8e:	2b46      	cmp	r3, #70	; 0x46
1a004d90:	f000 83df 	beq.w	1a005552 <_vfprintf_r+0x17b2>
1a004d94:	2b45      	cmp	r3, #69	; 0x45
1a004d96:	f000 84d2 	beq.w	1a00573e <_vfprintf_r+0x199e>
1a004d9a:	aa26      	add	r2, sp, #152	; 0x98
1a004d9c:	ab23      	add	r3, sp, #140	; 0x8c
1a004d9e:	e9cd 3200 	strd	r3, r2, [sp]
1a004da2:	2102      	movs	r1, #2
1a004da4:	ab22      	add	r3, sp, #136	; 0x88
1a004da6:	464a      	mov	r2, r9
1a004da8:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004dac:	9805      	ldr	r0, [sp, #20]
1a004dae:	f000 fedf 	bl	1a005b70 <_dtoa_r>
1a004db2:	9b03      	ldr	r3, [sp, #12]
1a004db4:	2b47      	cmp	r3, #71	; 0x47
1a004db6:	4607      	mov	r7, r0
1a004db8:	f040 858d 	bne.w	1a0058d6 <_vfprintf_r+0x1b36>
1a004dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004dbe:	07db      	lsls	r3, r3, #31
1a004dc0:	f100 843b 	bmi.w	1a00563a <_vfprintf_r+0x189a>
1a004dc4:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a004dc6:	1bf3      	subs	r3, r6, r7
1a004dc8:	9312      	str	r3, [sp, #72]	; 0x48
1a004dca:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004dcc:	930e      	str	r3, [sp, #56]	; 0x38
1a004dce:	9b03      	ldr	r3, [sp, #12]
1a004dd0:	2b47      	cmp	r3, #71	; 0x47
1a004dd2:	f000 8293 	beq.w	1a0052fc <_vfprintf_r+0x155c>
1a004dd6:	9b03      	ldr	r3, [sp, #12]
1a004dd8:	2b46      	cmp	r3, #70	; 0x46
1a004dda:	f000 83fd 	beq.w	1a0055d8 <_vfprintf_r+0x1838>
1a004dde:	9903      	ldr	r1, [sp, #12]
1a004de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004de2:	2941      	cmp	r1, #65	; 0x41
1a004de4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a004de8:	fa5f f388 	uxtb.w	r3, r8
1a004dec:	bf03      	ittte	eq
1a004dee:	330f      	addeq	r3, #15
1a004df0:	b2db      	uxtbeq	r3, r3
1a004df2:	2101      	moveq	r1, #1
1a004df4:	2100      	movne	r1, #0
1a004df6:	2a00      	cmp	r2, #0
1a004df8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a004dfc:	bfb8      	it	lt
1a004dfe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a004e00:	9222      	str	r2, [sp, #136]	; 0x88
1a004e02:	bfb6      	itet	lt
1a004e04:	f1c3 0201 	rsblt	r2, r3, #1
1a004e08:	232b      	movge	r3, #43	; 0x2b
1a004e0a:	232d      	movlt	r3, #45	; 0x2d
1a004e0c:	2a09      	cmp	r2, #9
1a004e0e:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a004e12:	f340 84c1 	ble.w	1a005798 <_vfprintf_r+0x19f8>
1a004e16:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a004e1a:	4620      	mov	r0, r4
1a004e1c:	4dbe      	ldr	r5, [pc, #760]	; (1a005118 <_vfprintf_r+0x1378>)
1a004e1e:	e001      	b.n	1a004e24 <_vfprintf_r+0x1084>
1a004e20:	4608      	mov	r0, r1
1a004e22:	461a      	mov	r2, r3
1a004e24:	fb85 3102 	smull	r3, r1, r5, r2
1a004e28:	17d3      	asrs	r3, r2, #31
1a004e2a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a004e2e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a004e32:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a004e36:	3130      	adds	r1, #48	; 0x30
1a004e38:	2a63      	cmp	r2, #99	; 0x63
1a004e3a:	f800 1c01 	strb.w	r1, [r0, #-1]
1a004e3e:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a004e42:	dced      	bgt.n	1a004e20 <_vfprintf_r+0x1080>
1a004e44:	3330      	adds	r3, #48	; 0x30
1a004e46:	1e82      	subs	r2, r0, #2
1a004e48:	b2db      	uxtb	r3, r3
1a004e4a:	4294      	cmp	r4, r2
1a004e4c:	f801 3c01 	strb.w	r3, [r1, #-1]
1a004e50:	f240 8544 	bls.w	1a0058dc <_vfprintf_r+0x1b3c>
1a004e54:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a004e58:	e001      	b.n	1a004e5e <_vfprintf_r+0x10be>
1a004e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004e5e:	f802 3b01 	strb.w	r3, [r2], #1
1a004e62:	42a1      	cmp	r1, r4
1a004e64:	d1f9      	bne.n	1a004e5a <_vfprintf_r+0x10ba>
1a004e66:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a004e6a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a004e6e:	1a1b      	subs	r3, r3, r0
1a004e70:	4413      	add	r3, r2
1a004e72:	aa24      	add	r2, sp, #144	; 0x90
1a004e74:	1a9b      	subs	r3, r3, r2
1a004e76:	9316      	str	r3, [sp, #88]	; 0x58
1a004e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004e7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a004e7c:	2b01      	cmp	r3, #1
1a004e7e:	eb03 0602 	add.w	r6, r3, r2
1a004e82:	f340 84ee 	ble.w	1a005862 <_vfprintf_r+0x1ac2>
1a004e86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004e88:	441e      	add	r6, r3
1a004e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004e8c:	2200      	movs	r2, #0
1a004e8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a004e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a004e96:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a004e9a:	9302      	str	r3, [sp, #8]
1a004e9c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a004ea0:	920c      	str	r2, [sp, #48]	; 0x30
1a004ea2:	9303      	str	r3, [sp, #12]
1a004ea4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a004ea6:	2b00      	cmp	r3, #0
1a004ea8:	f040 824f 	bne.w	1a00534a <_vfprintf_r+0x15aa>
1a004eac:	4699      	mov	r9, r3
1a004eae:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004eb2:	f7ff b94a 	b.w	1a00414a <_vfprintf_r+0x3aa>
1a004eb6:	9b08      	ldr	r3, [sp, #32]
1a004eb8:	1d1a      	adds	r2, r3, #4
1a004eba:	9b02      	ldr	r3, [sp, #8]
1a004ebc:	06d9      	lsls	r1, r3, #27
1a004ebe:	f100 8504 	bmi.w	1a0058ca <_vfprintf_r+0x1b2a>
1a004ec2:	9e02      	ldr	r6, [sp, #8]
1a004ec4:	4633      	mov	r3, r6
1a004ec6:	065b      	lsls	r3, r3, #25
1a004ec8:	f140 80ec 	bpl.w	1a0050a4 <_vfprintf_r+0x1304>
1a004ecc:	9b08      	ldr	r3, [sp, #32]
1a004ece:	9208      	str	r2, [sp, #32]
1a004ed0:	f9b3 4000 	ldrsh.w	r4, [r3]
1a004ed4:	17e5      	asrs	r5, r4, #31
1a004ed6:	4622      	mov	r2, r4
1a004ed8:	462b      	mov	r3, r5
1a004eda:	f7ff b8eb 	b.w	1a0040b4 <_vfprintf_r+0x314>
1a004ede:	4252      	negs	r2, r2
1a004ee0:	9206      	str	r2, [sp, #24]
1a004ee2:	9308      	str	r3, [sp, #32]
1a004ee4:	f7ff b8af 	b.w	1a004046 <_vfprintf_r+0x2a6>
1a004ee8:	aa28      	add	r2, sp, #160	; 0xa0
1a004eea:	9907      	ldr	r1, [sp, #28]
1a004eec:	9805      	ldr	r0, [sp, #20]
1a004eee:	f002 fd93 	bl	1a007a18 <__sprint_r>
1a004ef2:	2800      	cmp	r0, #0
1a004ef4:	f47f acec 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a004ef8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004efa:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004efe:	f7ff b9cd 	b.w	1a00429c <_vfprintf_r+0x4fc>
1a004f02:	4622      	mov	r2, r4
1a004f04:	461c      	mov	r4, r3
1a004f06:	4613      	mov	r3, r2
1a004f08:	462a      	mov	r2, r5
1a004f0a:	3201      	adds	r2, #1
1a004f0c:	920a      	str	r2, [sp, #40]	; 0x28
1a004f0e:	f106 0208 	add.w	r2, r6, #8
1a004f12:	e9c6 3800 	strd	r3, r8, [r6]
1a004f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004f18:	9329      	str	r3, [sp, #164]	; 0xa4
1a004f1a:	4444      	add	r4, r8
1a004f1c:	2b07      	cmp	r3, #7
1a004f1e:	942a      	str	r4, [sp, #168]	; 0xa8
1a004f20:	f340 8100 	ble.w	1a005124 <_vfprintf_r+0x1384>
1a004f24:	aa28      	add	r2, sp, #160	; 0xa0
1a004f26:	9907      	ldr	r1, [sp, #28]
1a004f28:	9805      	ldr	r0, [sp, #20]
1a004f2a:	f002 fd75 	bl	1a007a18 <__sprint_r>
1a004f2e:	2800      	cmp	r0, #0
1a004f30:	f47f acce 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a004f34:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004f38:	3301      	adds	r3, #1
1a004f3a:	930a      	str	r3, [sp, #40]	; 0x28
1a004f3c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004f40:	ae2b      	add	r6, sp, #172	; 0xac
1a004f42:	e537      	b.n	1a0049b4 <_vfprintf_r+0xc14>
1a004f44:	aa28      	add	r2, sp, #160	; 0xa0
1a004f46:	9907      	ldr	r1, [sp, #28]
1a004f48:	9805      	ldr	r0, [sp, #20]
1a004f4a:	f002 fd65 	bl	1a007a18 <__sprint_r>
1a004f4e:	2800      	cmp	r0, #0
1a004f50:	f47f acbe 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a004f54:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004f56:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004f5a:	e409      	b.n	1a004770 <_vfprintf_r+0x9d0>
1a004f5c:	f043 0320 	orr.w	r3, r3, #32
1a004f60:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a004f64:	9302      	str	r3, [sp, #8]
1a004f66:	f10a 0a01 	add.w	sl, sl, #1
1a004f6a:	f7fe bf9d 	b.w	1a003ea8 <_vfprintf_r+0x108>
1a004f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a004f72:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a004f76:	9302      	str	r3, [sp, #8]
1a004f78:	f10a 0a01 	add.w	sl, sl, #1
1a004f7c:	f7fe bf94 	b.w	1a003ea8 <_vfprintf_r+0x108>
1a004f80:	464e      	mov	r6, r9
1a004f82:	2e06      	cmp	r6, #6
1a004f84:	bf28      	it	cs
1a004f86:	2606      	movcs	r6, #6
1a004f88:	46b9      	mov	r9, r7
1a004f8a:	970c      	str	r7, [sp, #48]	; 0x30
1a004f8c:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
1a004f90:	9709      	str	r7, [sp, #36]	; 0x24
1a004f92:	463a      	mov	r2, r7
1a004f94:	9603      	str	r6, [sp, #12]
1a004f96:	9408      	str	r4, [sp, #32]
1a004f98:	4f60      	ldr	r7, [pc, #384]	; (1a00511c <_vfprintf_r+0x137c>)
1a004f9a:	f7ff b8d6 	b.w	1a00414a <_vfprintf_r+0x3aa>
1a004f9e:	463c      	mov	r4, r7
1a004fa0:	f7fe bf75 	b.w	1a003e8e <_vfprintf_r+0xee>
1a004fa4:	aa28      	add	r2, sp, #160	; 0xa0
1a004fa6:	9907      	ldr	r1, [sp, #28]
1a004fa8:	9805      	ldr	r0, [sp, #20]
1a004faa:	f002 fd35 	bl	1a007a18 <__sprint_r>
1a004fae:	2800      	cmp	r0, #0
1a004fb0:	f47f ac8e 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a004fb4:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a004fb8:	ae2b      	add	r6, sp, #172	; 0xac
1a004fba:	e4c9      	b.n	1a004950 <_vfprintf_r+0xbb0>
1a004fbc:	aa28      	add	r2, sp, #160	; 0xa0
1a004fbe:	9907      	ldr	r1, [sp, #28]
1a004fc0:	9805      	ldr	r0, [sp, #20]
1a004fc2:	f002 fd29 	bl	1a007a18 <__sprint_r>
1a004fc6:	2800      	cmp	r0, #0
1a004fc8:	f47f ac82 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a004fcc:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004fd0:	ae2b      	add	r6, sp, #172	; 0xac
1a004fd2:	930b      	str	r3, [sp, #44]	; 0x2c
1a004fd4:	e4c9      	b.n	1a00496a <_vfprintf_r+0xbca>
1a004fd6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a004fda:	f7fe fa0d 	bl	1a0033f8 <__retarget_lock_release_recursive>
1a004fde:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004fe2:	e51d      	b.n	1a004a20 <_vfprintf_r+0xc80>
1a004fe4:	aa28      	add	r2, sp, #160	; 0xa0
1a004fe6:	9907      	ldr	r1, [sp, #28]
1a004fe8:	9805      	ldr	r0, [sp, #20]
1a004fea:	f002 fd15 	bl	1a007a18 <__sprint_r>
1a004fee:	2800      	cmp	r0, #0
1a004ff0:	f47f ac6e 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a004ff4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004ff8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004ffa:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a004ffe:	f7ff b929 	b.w	1a004254 <_vfprintf_r+0x4b4>
1a005002:	46c1      	mov	r9, r8
1a005004:	e4fe      	b.n	1a004a04 <_vfprintf_r+0xc64>
1a005006:	aa28      	add	r2, sp, #160	; 0xa0
1a005008:	9907      	ldr	r1, [sp, #28]
1a00500a:	9805      	ldr	r0, [sp, #20]
1a00500c:	f002 fd04 	bl	1a007a18 <__sprint_r>
1a005010:	2800      	cmp	r0, #0
1a005012:	f47f ac5d 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a005016:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00501a:	f7ff bb93 	b.w	1a004744 <_vfprintf_r+0x9a4>
1a00501e:	464b      	mov	r3, r9
1a005020:	3201      	adds	r2, #1
1a005022:	442c      	add	r4, r5
1a005024:	2a07      	cmp	r2, #7
1a005026:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00502a:	e9cb 3500 	strd	r3, r5, [fp]
1a00502e:	f77f a94a 	ble.w	1a0042c6 <_vfprintf_r+0x526>
1a005032:	e46d      	b.n	1a004910 <_vfprintf_r+0xb70>
1a005034:	9a08      	ldr	r2, [sp, #32]
1a005036:	6812      	ldr	r2, [r2, #0]
1a005038:	9308      	str	r3, [sp, #32]
1a00503a:	9b04      	ldr	r3, [sp, #16]
1a00503c:	6013      	str	r3, [r2, #0]
1a00503e:	4657      	mov	r7, sl
1a005040:	f7ff b962 	b.w	1a004308 <_vfprintf_r+0x568>
1a005044:	2d10      	cmp	r5, #16
1a005046:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a005048:	4b35      	ldr	r3, [pc, #212]	; (1a005120 <_vfprintf_r+0x1380>)
1a00504a:	dd50      	ble.n	1a0050ee <_vfprintf_r+0x134e>
1a00504c:	4619      	mov	r1, r3
1a00504e:	2610      	movs	r6, #16
1a005050:	4623      	mov	r3, r4
1a005052:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a005056:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00505a:	460c      	mov	r4, r1
1a00505c:	e004      	b.n	1a005068 <_vfprintf_r+0x12c8>
1a00505e:	f10b 0b08 	add.w	fp, fp, #8
1a005062:	3d10      	subs	r5, #16
1a005064:	2d10      	cmp	r5, #16
1a005066:	dd3f      	ble.n	1a0050e8 <_vfprintf_r+0x1348>
1a005068:	3201      	adds	r2, #1
1a00506a:	3310      	adds	r3, #16
1a00506c:	2a07      	cmp	r2, #7
1a00506e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a005072:	e9cb 4600 	strd	r4, r6, [fp]
1a005076:	ddf2      	ble.n	1a00505e <_vfprintf_r+0x12be>
1a005078:	aa28      	add	r2, sp, #160	; 0xa0
1a00507a:	4649      	mov	r1, r9
1a00507c:	4640      	mov	r0, r8
1a00507e:	f002 fccb 	bl	1a007a18 <__sprint_r>
1a005082:	2800      	cmp	r0, #0
1a005084:	f47f acbe 	bne.w	1a004a04 <_vfprintf_r+0xc64>
1a005088:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a00508c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005090:	e7e7      	b.n	1a005062 <_vfprintf_r+0x12c2>
1a005092:	4638      	mov	r0, r7
1a005094:	f7fe fe14 	bl	1a003cc0 <strlen>
1a005098:	46a9      	mov	r9, r5
1a00509a:	4606      	mov	r6, r0
1a00509c:	f7ff b849 	b.w	1a004132 <_vfprintf_r+0x392>
1a0050a0:	46d9      	mov	r9, fp
1a0050a2:	e4af      	b.n	1a004a04 <_vfprintf_r+0xc64>
1a0050a4:	9e02      	ldr	r6, [sp, #8]
1a0050a6:	9b08      	ldr	r3, [sp, #32]
1a0050a8:	f416 7f00 	tst.w	r6, #512	; 0x200
1a0050ac:	d051      	beq.n	1a005152 <_vfprintf_r+0x13b2>
1a0050ae:	f993 4000 	ldrsb.w	r4, [r3]
1a0050b2:	9208      	str	r2, [sp, #32]
1a0050b4:	17e5      	asrs	r5, r4, #31
1a0050b6:	4622      	mov	r2, r4
1a0050b8:	462b      	mov	r3, r5
1a0050ba:	f7fe bffb 	b.w	1a0040b4 <_vfprintf_r+0x314>
1a0050be:	9e02      	ldr	r6, [sp, #8]
1a0050c0:	05b7      	lsls	r7, r6, #22
1a0050c2:	bf47      	ittee	mi
1a0050c4:	9208      	strmi	r2, [sp, #32]
1a0050c6:	b2e4      	uxtbmi	r4, r4
1a0050c8:	9e02      	ldrpl	r6, [sp, #8]
1a0050ca:	9208      	strpl	r2, [sp, #32]
1a0050cc:	2500      	movs	r5, #0
1a0050ce:	f7ff baae 	b.w	1a00462e <_vfprintf_r+0x88e>
1a0050d2:	9e02      	ldr	r6, [sp, #8]
1a0050d4:	9208      	str	r2, [sp, #32]
1a0050d6:	4633      	mov	r3, r6
1a0050d8:	059b      	lsls	r3, r3, #22
1a0050da:	bf4c      	ite	mi
1a0050dc:	b2e4      	uxtbmi	r4, r4
1a0050de:	9e02      	ldrpl	r6, [sp, #8]
1a0050e0:	2500      	movs	r5, #0
1a0050e2:	2301      	movs	r3, #1
1a0050e4:	f7ff b987 	b.w	1a0043f6 <_vfprintf_r+0x656>
1a0050e8:	4621      	mov	r1, r4
1a0050ea:	461c      	mov	r4, r3
1a0050ec:	460b      	mov	r3, r1
1a0050ee:	3201      	adds	r2, #1
1a0050f0:	442c      	add	r4, r5
1a0050f2:	2a07      	cmp	r2, #7
1a0050f4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0050f8:	e9cb 3500 	strd	r3, r5, [fp]
1a0050fc:	f300 80ef 	bgt.w	1a0052de <_vfprintf_r+0x153e>
1a005100:	f10b 0b08 	add.w	fp, fp, #8
1a005104:	e50e      	b.n	1a004b24 <_vfprintf_r+0xd84>
1a005106:	9805      	ldr	r0, [sp, #20]
1a005108:	aa28      	add	r2, sp, #160	; 0xa0
1a00510a:	4649      	mov	r1, r9
1a00510c:	f002 fc84 	bl	1a007a18 <__sprint_r>
1a005110:	2800      	cmp	r0, #0
1a005112:	f43f a903 	beq.w	1a00431c <_vfprintf_r+0x57c>
1a005116:	e47a      	b.n	1a004a0e <_vfprintf_r+0xc6e>
1a005118:	66666667 	.word	0x66666667
1a00511c:	1a0080f4 	.word	0x1a0080f4
1a005120:	1a008110 	.word	0x1a008110
1a005124:	3301      	adds	r3, #1
1a005126:	930a      	str	r3, [sp, #40]	; 0x28
1a005128:	f102 0b08 	add.w	fp, r2, #8
1a00512c:	4616      	mov	r6, r2
1a00512e:	e441      	b.n	1a0049b4 <_vfprintf_r+0xc14>
1a005130:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005132:	18bd      	adds	r5, r7, r2
1a005134:	eba5 0509 	sub.w	r5, r5, r9
1a005138:	1ad3      	subs	r3, r2, r3
1a00513a:	429d      	cmp	r5, r3
1a00513c:	bfa8      	it	ge
1a00513e:	461d      	movge	r5, r3
1a005140:	e527      	b.n	1a004b92 <_vfprintf_r+0xdf2>
1a005142:	9a08      	ldr	r2, [sp, #32]
1a005144:	9308      	str	r3, [sp, #32]
1a005146:	6812      	ldr	r2, [r2, #0]
1a005148:	9b04      	ldr	r3, [sp, #16]
1a00514a:	8013      	strh	r3, [r2, #0]
1a00514c:	4657      	mov	r7, sl
1a00514e:	f7ff b8db 	b.w	1a004308 <_vfprintf_r+0x568>
1a005152:	681c      	ldr	r4, [r3, #0]
1a005154:	9208      	str	r2, [sp, #32]
1a005156:	17e5      	asrs	r5, r4, #31
1a005158:	9e02      	ldr	r6, [sp, #8]
1a00515a:	4622      	mov	r2, r4
1a00515c:	462b      	mov	r3, r5
1a00515e:	f7fe bfa9 	b.w	1a0040b4 <_vfprintf_r+0x314>
1a005162:	b2e4      	uxtb	r4, r4
1a005164:	2500      	movs	r5, #0
1a005166:	f7fe bf59 	b.w	1a00401c <_vfprintf_r+0x27c>
1a00516a:	2330      	movs	r3, #48	; 0x30
1a00516c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a005170:	2358      	movs	r3, #88	; 0x58
1a005172:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a005176:	9b02      	ldr	r3, [sp, #8]
1a005178:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a00517c:	f043 0302 	orr.w	r3, r3, #2
1a005180:	930a      	str	r3, [sp, #40]	; 0x28
1a005182:	f300 82b7 	bgt.w	1a0056f4 <_vfprintf_r+0x1954>
1a005186:	2300      	movs	r3, #0
1a005188:	9309      	str	r3, [sp, #36]	; 0x24
1a00518a:	af3b      	add	r7, sp, #236	; 0xec
1a00518c:	9a02      	ldr	r2, [sp, #8]
1a00518e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a005190:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a005194:	9202      	str	r2, [sp, #8]
1a005196:	2b00      	cmp	r3, #0
1a005198:	f028 0220 	bic.w	r2, r8, #32
1a00519c:	9203      	str	r2, [sp, #12]
1a00519e:	f2c0 8188 	blt.w	1a0054b2 <_vfprintf_r+0x1712>
1a0051a2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a0051a6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a0051aa:	2300      	movs	r3, #0
1a0051ac:	931e      	str	r3, [sp, #120]	; 0x78
1a0051ae:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a0051b2:	f000 82d9 	beq.w	1a005768 <_vfprintf_r+0x19c8>
1a0051b6:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a0051ba:	f47f ade7 	bne.w	1a004d8c <_vfprintf_r+0xfec>
1a0051be:	a822      	add	r0, sp, #136	; 0x88
1a0051c0:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a0051c4:	f002 fb7c 	bl	1a0078c0 <frexp>
1a0051c8:	2200      	movs	r2, #0
1a0051ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a0051ce:	ec51 0b10 	vmov	r0, r1, d0
1a0051d2:	f7fd f97d 	bl	1a0024d0 <__aeabi_dmul>
1a0051d6:	2200      	movs	r2, #0
1a0051d8:	2300      	movs	r3, #0
1a0051da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a0051de:	f7fd fbdf 	bl	1a0029a0 <__aeabi_dcmpeq>
1a0051e2:	b108      	cbz	r0, 1a0051e8 <_vfprintf_r+0x1448>
1a0051e4:	2301      	movs	r3, #1
1a0051e6:	9322      	str	r3, [sp, #136]	; 0x88
1a0051e8:	4bb6      	ldr	r3, [pc, #728]	; (1a0054c4 <_vfprintf_r+0x1724>)
1a0051ea:	930b      	str	r3, [sp, #44]	; 0x2c
1a0051ec:	e9cd 8a0e 	strd	r8, sl, [sp, #56]	; 0x38
1a0051f0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
1a0051f4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
1a0051f8:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
1a0051fc:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a005200:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a005204:	970c      	str	r7, [sp, #48]	; 0x30
1a005206:	46ba      	mov	sl, r7
1a005208:	e003      	b.n	1a005212 <_vfprintf_r+0x1472>
1a00520a:	f7fd fbc9 	bl	1a0029a0 <__aeabi_dcmpeq>
1a00520e:	bb20      	cbnz	r0, 1a00525a <_vfprintf_r+0x14ba>
1a005210:	46b2      	mov	sl, r6
1a005212:	2200      	movs	r2, #0
1a005214:	4bac      	ldr	r3, [pc, #688]	; (1a0054c8 <_vfprintf_r+0x1728>)
1a005216:	4640      	mov	r0, r8
1a005218:	4649      	mov	r1, r9
1a00521a:	f7fd f959 	bl	1a0024d0 <__aeabi_dmul>
1a00521e:	4689      	mov	r9, r1
1a005220:	4680      	mov	r8, r0
1a005222:	f7fd fc05 	bl	1a002a30 <__aeabi_d2iz>
1a005226:	4607      	mov	r7, r0
1a005228:	f7fd f8e8 	bl	1a0023fc <__aeabi_i2d>
1a00522c:	4602      	mov	r2, r0
1a00522e:	460b      	mov	r3, r1
1a005230:	4640      	mov	r0, r8
1a005232:	4649      	mov	r1, r9
1a005234:	f7fc ff94 	bl	1a002160 <__aeabi_dsub>
1a005238:	4656      	mov	r6, sl
1a00523a:	f81b 4007 	ldrb.w	r4, [fp, r7]
1a00523e:	f806 4b01 	strb.w	r4, [r6], #1
1a005242:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a005246:	462c      	mov	r4, r5
1a005248:	4680      	mov	r8, r0
1a00524a:	4689      	mov	r9, r1
1a00524c:	f04f 0200 	mov.w	r2, #0
1a005250:	f04f 0300 	mov.w	r3, #0
1a005254:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a005258:	d1d7      	bne.n	1a00520a <_vfprintf_r+0x146a>
1a00525a:	4640      	mov	r0, r8
1a00525c:	4649      	mov	r1, r9
1a00525e:	2200      	movs	r2, #0
1a005260:	4b9a      	ldr	r3, [pc, #616]	; (1a0054cc <_vfprintf_r+0x172c>)
1a005262:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a005266:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
1a00526a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a00526e:	463d      	mov	r5, r7
1a005270:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
1a005274:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a005276:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a00527a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00527e:	f7fd fbb7 	bl	1a0029f0 <__aeabi_dcmpgt>
1a005282:	2800      	cmp	r0, #0
1a005284:	f040 8214 	bne.w	1a0056b0 <_vfprintf_r+0x1910>
1a005288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00528c:	2200      	movs	r2, #0
1a00528e:	4b8f      	ldr	r3, [pc, #572]	; (1a0054cc <_vfprintf_r+0x172c>)
1a005290:	f7fd fb86 	bl	1a0029a0 <__aeabi_dcmpeq>
1a005294:	b118      	cbz	r0, 1a00529e <_vfprintf_r+0x14fe>
1a005296:	462b      	mov	r3, r5
1a005298:	07db      	lsls	r3, r3, #31
1a00529a:	f100 8209 	bmi.w	1a0056b0 <_vfprintf_r+0x1910>
1a00529e:	2c00      	cmp	r4, #0
1a0052a0:	f6ff ad91 	blt.w	1a004dc6 <_vfprintf_r+0x1026>
1a0052a4:	1c63      	adds	r3, r4, #1
1a0052a6:	4433      	add	r3, r6
1a0052a8:	2230      	movs	r2, #48	; 0x30
1a0052aa:	f806 2b01 	strb.w	r2, [r6], #1
1a0052ae:	429e      	cmp	r6, r3
1a0052b0:	d1fb      	bne.n	1a0052aa <_vfprintf_r+0x150a>
1a0052b2:	e588      	b.n	1a004dc6 <_vfprintf_r+0x1026>
1a0052b4:	aa28      	add	r2, sp, #160	; 0xa0
1a0052b6:	9907      	ldr	r1, [sp, #28]
1a0052b8:	9805      	ldr	r0, [sp, #20]
1a0052ba:	f002 fbad 	bl	1a007a18 <__sprint_r>
1a0052be:	2800      	cmp	r0, #0
1a0052c0:	f47f ab06 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a0052c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0052c6:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0052ca:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0052ce:	f7ff bb12 	b.w	1a0048f6 <_vfprintf_r+0xb56>
1a0052d2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a0052d6:	f7fe f88f 	bl	1a0033f8 <__retarget_lock_release_recursive>
1a0052da:	f7fe be6a 	b.w	1a003fb2 <_vfprintf_r+0x212>
1a0052de:	aa28      	add	r2, sp, #160	; 0xa0
1a0052e0:	9907      	ldr	r1, [sp, #28]
1a0052e2:	9805      	ldr	r0, [sp, #20]
1a0052e4:	f002 fb98 	bl	1a007a18 <__sprint_r>
1a0052e8:	2800      	cmp	r0, #0
1a0052ea:	f47f aaf1 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a0052ee:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0052f0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0052f4:	e416      	b.n	1a004b24 <_vfprintf_r+0xd84>
1a0052f6:	9e02      	ldr	r6, [sp, #8]
1a0052f8:	f7ff b9ad 	b.w	1a004656 <_vfprintf_r+0x8b6>
1a0052fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0052fe:	1cde      	adds	r6, r3, #3
1a005300:	db01      	blt.n	1a005306 <_vfprintf_r+0x1566>
1a005302:	4599      	cmp	r9, r3
1a005304:	da05      	bge.n	1a005312 <_vfprintf_r+0x1572>
1a005306:	f1a8 0802 	sub.w	r8, r8, #2
1a00530a:	f028 0320 	bic.w	r3, r8, #32
1a00530e:	9303      	str	r3, [sp, #12]
1a005310:	e565      	b.n	1a004dde <_vfprintf_r+0x103e>
1a005312:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005314:	4619      	mov	r1, r3
1a005316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005318:	4299      	cmp	r1, r3
1a00531a:	f300 8174 	bgt.w	1a005606 <_vfprintf_r+0x1866>
1a00531e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005320:	07d4      	lsls	r4, r2, #31
1a005322:	f140 8254 	bpl.w	1a0057ce <_vfprintf_r+0x1a2e>
1a005326:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a005328:	189e      	adds	r6, r3, r2
1a00532a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00532c:	0558      	lsls	r0, r3, #21
1a00532e:	d503      	bpl.n	1a005338 <_vfprintf_r+0x1598>
1a005330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005332:	2b00      	cmp	r3, #0
1a005334:	f300 824d 	bgt.w	1a0057d2 <_vfprintf_r+0x1a32>
1a005338:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00533c:	9303      	str	r3, [sp, #12]
1a00533e:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005342:	2300      	movs	r3, #0
1a005344:	930c      	str	r3, [sp, #48]	; 0x30
1a005346:	930f      	str	r3, [sp, #60]	; 0x3c
1a005348:	e5ac      	b.n	1a004ea4 <_vfprintf_r+0x1104>
1a00534a:	222d      	movs	r2, #45	; 0x2d
1a00534c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a005350:	f04f 0900 	mov.w	r9, #0
1a005354:	f7fe befb 	b.w	1a00414e <_vfprintf_r+0x3ae>
1a005358:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00535a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a00535e:	18fb      	adds	r3, r7, r3
1a005360:	930a      	str	r3, [sp, #40]	; 0x28
1a005362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005364:	970e      	str	r7, [sp, #56]	; 0x38
1a005366:	465a      	mov	r2, fp
1a005368:	464f      	mov	r7, r9
1a00536a:	4e59      	ldr	r6, [pc, #356]	; (1a0054d0 <_vfprintf_r+0x1730>)
1a00536c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a005370:	f8dd a014 	ldr.w	sl, [sp, #20]
1a005374:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a005378:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
1a00537c:	4621      	mov	r1, r4
1a00537e:	2b00      	cmp	r3, #0
1a005380:	d032      	beq.n	1a0053e8 <_vfprintf_r+0x1648>
1a005382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005384:	2b00      	cmp	r3, #0
1a005386:	d16e      	bne.n	1a005466 <_vfprintf_r+0x16c6>
1a005388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00538a:	3b01      	subs	r3, #1
1a00538c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a005390:	930f      	str	r3, [sp, #60]	; 0x3c
1a005392:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a005394:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a005396:	6010      	str	r0, [r2, #0]
1a005398:	3301      	adds	r3, #1
1a00539a:	4449      	add	r1, r9
1a00539c:	2b07      	cmp	r3, #7
1a00539e:	912a      	str	r1, [sp, #168]	; 0xa8
1a0053a0:	f8c2 9004 	str.w	r9, [r2, #4]
1a0053a4:	9329      	str	r3, [sp, #164]	; 0xa4
1a0053a6:	dc62      	bgt.n	1a00546e <_vfprintf_r+0x16ce>
1a0053a8:	3208      	adds	r2, #8
1a0053aa:	980a      	ldr	r0, [sp, #40]	; 0x28
1a0053ac:	f898 3000 	ldrb.w	r3, [r8]
1a0053b0:	1bc5      	subs	r5, r0, r7
1a0053b2:	429d      	cmp	r5, r3
1a0053b4:	bfa8      	it	ge
1a0053b6:	461d      	movge	r5, r3
1a0053b8:	2d00      	cmp	r5, #0
1a0053ba:	dd0b      	ble.n	1a0053d4 <_vfprintf_r+0x1634>
1a0053bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0053be:	6017      	str	r7, [r2, #0]
1a0053c0:	3301      	adds	r3, #1
1a0053c2:	4429      	add	r1, r5
1a0053c4:	2b07      	cmp	r3, #7
1a0053c6:	912a      	str	r1, [sp, #168]	; 0xa8
1a0053c8:	6055      	str	r5, [r2, #4]
1a0053ca:	9329      	str	r3, [sp, #164]	; 0xa4
1a0053cc:	dc5a      	bgt.n	1a005484 <_vfprintf_r+0x16e4>
1a0053ce:	f898 3000 	ldrb.w	r3, [r8]
1a0053d2:	3208      	adds	r2, #8
1a0053d4:	2d00      	cmp	r5, #0
1a0053d6:	bfac      	ite	ge
1a0053d8:	1b5d      	subge	r5, r3, r5
1a0053da:	461d      	movlt	r5, r3
1a0053dc:	2d00      	cmp	r5, #0
1a0053de:	dc15      	bgt.n	1a00540c <_vfprintf_r+0x166c>
1a0053e0:	441f      	add	r7, r3
1a0053e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0053e4:	2b00      	cmp	r3, #0
1a0053e6:	d1cc      	bne.n	1a005382 <_vfprintf_r+0x15e2>
1a0053e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0053ea:	2b00      	cmp	r3, #0
1a0053ec:	d13b      	bne.n	1a005466 <_vfprintf_r+0x16c6>
1a0053ee:	46b9      	mov	r9, r7
1a0053f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0053f2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a0053f4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a0053f8:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0053fc:	18fb      	adds	r3, r7, r3
1a0053fe:	4599      	cmp	r9, r3
1a005400:	4693      	mov	fp, r2
1a005402:	460c      	mov	r4, r1
1a005404:	bf28      	it	cs
1a005406:	4699      	movcs	r9, r3
1a005408:	f7ff bb93 	b.w	1a004b32 <_vfprintf_r+0xd92>
1a00540c:	2d10      	cmp	r5, #16
1a00540e:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a005410:	dd1c      	ble.n	1a00544c <_vfprintf_r+0x16ac>
1a005412:	2410      	movs	r4, #16
1a005414:	e004      	b.n	1a005420 <_vfprintf_r+0x1680>
1a005416:	3d10      	subs	r5, #16
1a005418:	2d10      	cmp	r5, #16
1a00541a:	f102 0208 	add.w	r2, r2, #8
1a00541e:	dd15      	ble.n	1a00544c <_vfprintf_r+0x16ac>
1a005420:	3001      	adds	r0, #1
1a005422:	3110      	adds	r1, #16
1a005424:	2807      	cmp	r0, #7
1a005426:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a00542a:	e9c2 6400 	strd	r6, r4, [r2]
1a00542e:	ddf2      	ble.n	1a005416 <_vfprintf_r+0x1676>
1a005430:	aa28      	add	r2, sp, #160	; 0xa0
1a005432:	4659      	mov	r1, fp
1a005434:	4650      	mov	r0, sl
1a005436:	f002 faef 	bl	1a007a18 <__sprint_r>
1a00543a:	2800      	cmp	r0, #0
1a00543c:	f47f ae30 	bne.w	1a0050a0 <_vfprintf_r+0x1300>
1a005440:	3d10      	subs	r5, #16
1a005442:	2d10      	cmp	r5, #16
1a005444:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a005448:	aa2b      	add	r2, sp, #172	; 0xac
1a00544a:	dce9      	bgt.n	1a005420 <_vfprintf_r+0x1680>
1a00544c:	3001      	adds	r0, #1
1a00544e:	4429      	add	r1, r5
1a005450:	2807      	cmp	r0, #7
1a005452:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a005456:	e9c2 6500 	strd	r6, r5, [r2]
1a00545a:	dc49      	bgt.n	1a0054f0 <_vfprintf_r+0x1750>
1a00545c:	f898 3000 	ldrb.w	r3, [r8]
1a005460:	3208      	adds	r2, #8
1a005462:	441f      	add	r7, r3
1a005464:	e7bd      	b.n	1a0053e2 <_vfprintf_r+0x1642>
1a005466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005468:	3b01      	subs	r3, #1
1a00546a:	930c      	str	r3, [sp, #48]	; 0x30
1a00546c:	e791      	b.n	1a005392 <_vfprintf_r+0x15f2>
1a00546e:	aa28      	add	r2, sp, #160	; 0xa0
1a005470:	4659      	mov	r1, fp
1a005472:	4650      	mov	r0, sl
1a005474:	f002 fad0 	bl	1a007a18 <__sprint_r>
1a005478:	2800      	cmp	r0, #0
1a00547a:	f47f ae11 	bne.w	1a0050a0 <_vfprintf_r+0x1300>
1a00547e:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a005480:	aa2b      	add	r2, sp, #172	; 0xac
1a005482:	e792      	b.n	1a0053aa <_vfprintf_r+0x160a>
1a005484:	aa28      	add	r2, sp, #160	; 0xa0
1a005486:	4659      	mov	r1, fp
1a005488:	4650      	mov	r0, sl
1a00548a:	f002 fac5 	bl	1a007a18 <__sprint_r>
1a00548e:	2800      	cmp	r0, #0
1a005490:	f47f ae06 	bne.w	1a0050a0 <_vfprintf_r+0x1300>
1a005494:	f898 3000 	ldrb.w	r3, [r8]
1a005498:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00549a:	aa2b      	add	r2, sp, #172	; 0xac
1a00549c:	e79a      	b.n	1a0053d4 <_vfprintf_r+0x1634>
1a00549e:	222d      	movs	r2, #45	; 0x2d
1a0054a0:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a0054a4:	f7ff b87d 	b.w	1a0045a2 <_vfprintf_r+0x802>
1a0054a8:	9b02      	ldr	r3, [sp, #8]
1a0054aa:	930a      	str	r3, [sp, #40]	; 0x28
1a0054ac:	2300      	movs	r3, #0
1a0054ae:	9309      	str	r3, [sp, #36]	; 0x24
1a0054b0:	9202      	str	r2, [sp, #8]
1a0054b2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a0054b6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a0054ba:	931d      	str	r3, [sp, #116]	; 0x74
1a0054bc:	232d      	movs	r3, #45	; 0x2d
1a0054be:	911c      	str	r1, [sp, #112]	; 0x70
1a0054c0:	931e      	str	r3, [sp, #120]	; 0x78
1a0054c2:	e674      	b.n	1a0051ae <_vfprintf_r+0x140e>
1a0054c4:	1a0080cc 	.word	0x1a0080cc
1a0054c8:	40300000 	.word	0x40300000
1a0054cc:	3fe00000 	.word	0x3fe00000
1a0054d0:	1a008110 	.word	0x1a008110
1a0054d4:	aa28      	add	r2, sp, #160	; 0xa0
1a0054d6:	9907      	ldr	r1, [sp, #28]
1a0054d8:	9805      	ldr	r0, [sp, #20]
1a0054da:	f002 fa9d 	bl	1a007a18 <__sprint_r>
1a0054de:	2800      	cmp	r0, #0
1a0054e0:	f47f a9f6 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a0054e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0054e6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0054e8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0054ec:	f7ff bbeb 	b.w	1a004cc6 <_vfprintf_r+0xf26>
1a0054f0:	aa28      	add	r2, sp, #160	; 0xa0
1a0054f2:	4659      	mov	r1, fp
1a0054f4:	4650      	mov	r0, sl
1a0054f6:	f002 fa8f 	bl	1a007a18 <__sprint_r>
1a0054fa:	2800      	cmp	r0, #0
1a0054fc:	f47f add0 	bne.w	1a0050a0 <_vfprintf_r+0x1300>
1a005500:	f898 3000 	ldrb.w	r3, [r8]
1a005504:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a005506:	aa2b      	add	r2, sp, #172	; 0xac
1a005508:	441f      	add	r7, r3
1a00550a:	e76a      	b.n	1a0053e2 <_vfprintf_r+0x1642>
1a00550c:	aa28      	add	r2, sp, #160	; 0xa0
1a00550e:	9907      	ldr	r1, [sp, #28]
1a005510:	9805      	ldr	r0, [sp, #20]
1a005512:	f002 fa81 	bl	1a007a18 <__sprint_r>
1a005516:	2800      	cmp	r0, #0
1a005518:	f47f a9da 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a00551c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00551e:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005522:	f7ff baf7 	b.w	1a004b14 <_vfprintf_r+0xd74>
1a005526:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a005528:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a00552a:	1aff      	subs	r7, r7, r3
1a00552c:	461a      	mov	r2, r3
1a00552e:	4638      	mov	r0, r7
1a005530:	f002 f9fc 	bl	1a00792c <strncpy>
1a005534:	f898 3001 	ldrb.w	r3, [r8, #1]
1a005538:	b10b      	cbz	r3, 1a00553e <_vfprintf_r+0x179e>
1a00553a:	f108 0801 	add.w	r8, r8, #1
1a00553e:	220a      	movs	r2, #10
1a005540:	2300      	movs	r3, #0
1a005542:	4620      	mov	r0, r4
1a005544:	4629      	mov	r1, r5
1a005546:	f04f 0a00 	mov.w	sl, #0
1a00554a:	f7fd fa99 	bl	1a002a80 <__aeabi_uldivmod>
1a00554e:	f7ff b8ab 	b.w	1a0046a8 <_vfprintf_r+0x908>
1a005552:	aa26      	add	r2, sp, #152	; 0x98
1a005554:	ab23      	add	r3, sp, #140	; 0x8c
1a005556:	e9cd 3200 	strd	r3, r2, [sp]
1a00555a:	2103      	movs	r1, #3
1a00555c:	ab22      	add	r3, sp, #136	; 0x88
1a00555e:	464a      	mov	r2, r9
1a005560:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005564:	9805      	ldr	r0, [sp, #20]
1a005566:	f000 fb03 	bl	1a005b70 <_dtoa_r>
1a00556a:	7803      	ldrb	r3, [r0, #0]
1a00556c:	2b30      	cmp	r3, #48	; 0x30
1a00556e:	4607      	mov	r7, r0
1a005570:	f000 8161 	beq.w	1a005836 <_vfprintf_r+0x1a96>
1a005574:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005576:	444b      	add	r3, r9
1a005578:	18fc      	adds	r4, r7, r3
1a00557a:	2200      	movs	r2, #0
1a00557c:	2300      	movs	r3, #0
1a00557e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a005582:	f7fd fa0d 	bl	1a0029a0 <__aeabi_dcmpeq>
1a005586:	b108      	cbz	r0, 1a00558c <_vfprintf_r+0x17ec>
1a005588:	4626      	mov	r6, r4
1a00558a:	e41c      	b.n	1a004dc6 <_vfprintf_r+0x1026>
1a00558c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00558e:	42a6      	cmp	r6, r4
1a005590:	f4bf ac19 	bcs.w	1a004dc6 <_vfprintf_r+0x1026>
1a005594:	2230      	movs	r2, #48	; 0x30
1a005596:	1c73      	adds	r3, r6, #1
1a005598:	9326      	str	r3, [sp, #152]	; 0x98
1a00559a:	7032      	strb	r2, [r6, #0]
1a00559c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00559e:	42b4      	cmp	r4, r6
1a0055a0:	d8f9      	bhi.n	1a005596 <_vfprintf_r+0x17f6>
1a0055a2:	e410      	b.n	1a004dc6 <_vfprintf_r+0x1026>
1a0055a4:	aa28      	add	r2, sp, #160	; 0xa0
1a0055a6:	9907      	ldr	r1, [sp, #28]
1a0055a8:	9805      	ldr	r0, [sp, #20]
1a0055aa:	f002 fa35 	bl	1a007a18 <__sprint_r>
1a0055ae:	2800      	cmp	r0, #0
1a0055b0:	f47f a98e 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a0055b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0055b6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0055b8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0055bc:	f7ff bad1 	b.w	1a004b62 <_vfprintf_r+0xdc2>
1a0055c0:	464e      	mov	r6, r9
1a0055c2:	f8cd 900c 	str.w	r9, [sp, #12]
1a0055c6:	9408      	str	r4, [sp, #32]
1a0055c8:	4681      	mov	r9, r0
1a0055ca:	900c      	str	r0, [sp, #48]	; 0x30
1a0055cc:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a0055d0:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0055d4:	f7fe bdb9 	b.w	1a00414a <_vfprintf_r+0x3aa>
1a0055d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0055da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0055dc:	f003 0301 	and.w	r3, r3, #1
1a0055e0:	2a00      	cmp	r2, #0
1a0055e2:	ea43 0309 	orr.w	r3, r3, r9
1a0055e6:	f340 8142 	ble.w	1a00586e <_vfprintf_r+0x1ace>
1a0055ea:	2b00      	cmp	r3, #0
1a0055ec:	f040 8119 	bne.w	1a005822 <_vfprintf_r+0x1a82>
1a0055f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0055f2:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0055f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0055f8:	055a      	lsls	r2, r3, #21
1a0055fa:	f100 80ec 	bmi.w	1a0057d6 <_vfprintf_r+0x1a36>
1a0055fe:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005602:	9303      	str	r3, [sp, #12]
1a005604:	e69d      	b.n	1a005342 <_vfprintf_r+0x15a2>
1a005606:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a00560a:	189e      	adds	r6, r3, r2
1a00560c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00560e:	2b00      	cmp	r3, #0
1a005610:	f340 811e 	ble.w	1a005850 <_vfprintf_r+0x1ab0>
1a005614:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005618:	e7ed      	b.n	1a0055f6 <_vfprintf_r+0x1856>
1a00561a:	aa28      	add	r2, sp, #160	; 0xa0
1a00561c:	9907      	ldr	r1, [sp, #28]
1a00561e:	9805      	ldr	r0, [sp, #20]
1a005620:	f002 f9fa 	bl	1a007a18 <__sprint_r>
1a005624:	2800      	cmp	r0, #0
1a005626:	f47f a953 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a00562a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00562c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00562e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a005630:	1ad3      	subs	r3, r2, r3
1a005632:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a005636:	f7ff baac 	b.w	1a004b92 <_vfprintf_r+0xdf2>
1a00563a:	eb07 0409 	add.w	r4, r7, r9
1a00563e:	e79c      	b.n	1a00557a <_vfprintf_r+0x17da>
1a005640:	425d      	negs	r5, r3
1a005642:	3310      	adds	r3, #16
1a005644:	4ba7      	ldr	r3, [pc, #668]	; (1a0058e4 <_vfprintf_r+0x1b44>)
1a005646:	da63      	bge.n	1a005710 <_vfprintf_r+0x1970>
1a005648:	4619      	mov	r1, r3
1a00564a:	2610      	movs	r6, #16
1a00564c:	4623      	mov	r3, r4
1a00564e:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a005652:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005656:	460c      	mov	r4, r1
1a005658:	e004      	b.n	1a005664 <_vfprintf_r+0x18c4>
1a00565a:	f10b 0b08 	add.w	fp, fp, #8
1a00565e:	3d10      	subs	r5, #16
1a005660:	2d10      	cmp	r5, #16
1a005662:	dd52      	ble.n	1a00570a <_vfprintf_r+0x196a>
1a005664:	3201      	adds	r2, #1
1a005666:	3310      	adds	r3, #16
1a005668:	2a07      	cmp	r2, #7
1a00566a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a00566e:	e9cb 4600 	strd	r4, r6, [fp]
1a005672:	ddf2      	ble.n	1a00565a <_vfprintf_r+0x18ba>
1a005674:	aa28      	add	r2, sp, #160	; 0xa0
1a005676:	4649      	mov	r1, r9
1a005678:	4640      	mov	r0, r8
1a00567a:	f002 f9cd 	bl	1a007a18 <__sprint_r>
1a00567e:	2800      	cmp	r0, #0
1a005680:	f47f a9c0 	bne.w	1a004a04 <_vfprintf_r+0xc64>
1a005684:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a005688:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00568c:	e7e7      	b.n	1a00565e <_vfprintf_r+0x18be>
1a00568e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a005692:	07db      	lsls	r3, r3, #31
1a005694:	d407      	bmi.n	1a0056a6 <_vfprintf_r+0x1906>
1a005696:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00569a:	059f      	lsls	r7, r3, #22
1a00569c:	d403      	bmi.n	1a0056a6 <_vfprintf_r+0x1906>
1a00569e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a0056a2:	f7fd fea9 	bl	1a0033f8 <__retarget_lock_release_recursive>
1a0056a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0056aa:	9304      	str	r3, [sp, #16]
1a0056ac:	f7ff b9bb 	b.w	1a004a26 <_vfprintf_r+0xc86>
1a0056b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0056b2:	9326      	str	r3, [sp, #152]	; 0x98
1a0056b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0056b6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1a0056ba:	7bd9      	ldrb	r1, [r3, #15]
1a0056bc:	428a      	cmp	r2, r1
1a0056be:	4633      	mov	r3, r6
1a0056c0:	d109      	bne.n	1a0056d6 <_vfprintf_r+0x1936>
1a0056c2:	2030      	movs	r0, #48	; 0x30
1a0056c4:	f803 0c01 	strb.w	r0, [r3, #-1]
1a0056c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a0056ca:	1e5a      	subs	r2, r3, #1
1a0056cc:	9226      	str	r2, [sp, #152]	; 0x98
1a0056ce:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a0056d2:	4291      	cmp	r1, r2
1a0056d4:	d0f6      	beq.n	1a0056c4 <_vfprintf_r+0x1924>
1a0056d6:	2a39      	cmp	r2, #57	; 0x39
1a0056d8:	bf0b      	itete	eq
1a0056da:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a0056dc:	3201      	addne	r2, #1
1a0056de:	7a92      	ldrbeq	r2, [r2, #10]
1a0056e0:	b2d2      	uxtbne	r2, r2
1a0056e2:	f803 2c01 	strb.w	r2, [r3, #-1]
1a0056e6:	f7ff bb6e 	b.w	1a004dc6 <_vfprintf_r+0x1026>
1a0056ea:	2330      	movs	r3, #48	; 0x30
1a0056ec:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0056f0:	2378      	movs	r3, #120	; 0x78
1a0056f2:	e53e      	b.n	1a005172 <_vfprintf_r+0x13d2>
1a0056f4:	f109 0101 	add.w	r1, r9, #1
1a0056f8:	9805      	ldr	r0, [sp, #20]
1a0056fa:	f7fd fe7f 	bl	1a0033fc <_malloc_r>
1a0056fe:	4607      	mov	r7, r0
1a005700:	2800      	cmp	r0, #0
1a005702:	f000 80d5 	beq.w	1a0058b0 <_vfprintf_r+0x1b10>
1a005706:	9009      	str	r0, [sp, #36]	; 0x24
1a005708:	e540      	b.n	1a00518c <_vfprintf_r+0x13ec>
1a00570a:	4621      	mov	r1, r4
1a00570c:	461c      	mov	r4, r3
1a00570e:	460b      	mov	r3, r1
1a005710:	3201      	adds	r2, #1
1a005712:	442c      	add	r4, r5
1a005714:	2a07      	cmp	r2, #7
1a005716:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00571a:	e9cb 3500 	strd	r3, r5, [fp]
1a00571e:	f77f aaea 	ble.w	1a004cf6 <_vfprintf_r+0xf56>
1a005722:	aa28      	add	r2, sp, #160	; 0xa0
1a005724:	9907      	ldr	r1, [sp, #28]
1a005726:	9805      	ldr	r0, [sp, #20]
1a005728:	f002 f976 	bl	1a007a18 <__sprint_r>
1a00572c:	2800      	cmp	r0, #0
1a00572e:	f47f a8cf 	bne.w	1a0048d0 <_vfprintf_r+0xb30>
1a005732:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a005736:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00573a:	f7ff b8df 	b.w	1a0048fc <_vfprintf_r+0xb5c>
1a00573e:	f109 0401 	add.w	r4, r9, #1
1a005742:	a926      	add	r1, sp, #152	; 0x98
1a005744:	ab23      	add	r3, sp, #140	; 0x8c
1a005746:	e9cd 3100 	strd	r3, r1, [sp]
1a00574a:	4622      	mov	r2, r4
1a00574c:	ab22      	add	r3, sp, #136	; 0x88
1a00574e:	2102      	movs	r1, #2
1a005750:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a005754:	9805      	ldr	r0, [sp, #20]
1a005756:	f000 fa0b 	bl	1a005b70 <_dtoa_r>
1a00575a:	4607      	mov	r7, r0
1a00575c:	443c      	add	r4, r7
1a00575e:	e70c      	b.n	1a00557a <_vfprintf_r+0x17da>
1a005760:	f04f 0906 	mov.w	r9, #6
1a005764:	f7ff bb03 	b.w	1a004d6e <_vfprintf_r+0xfce>
1a005768:	a822      	add	r0, sp, #136	; 0x88
1a00576a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00576e:	f002 f8a7 	bl	1a0078c0 <frexp>
1a005772:	2200      	movs	r2, #0
1a005774:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a005778:	ec51 0b10 	vmov	r0, r1, d0
1a00577c:	f7fc fea8 	bl	1a0024d0 <__aeabi_dmul>
1a005780:	2200      	movs	r2, #0
1a005782:	2300      	movs	r3, #0
1a005784:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a005788:	f7fd f90a 	bl	1a0029a0 <__aeabi_dcmpeq>
1a00578c:	b108      	cbz	r0, 1a005792 <_vfprintf_r+0x19f2>
1a00578e:	2301      	movs	r3, #1
1a005790:	9322      	str	r3, [sp, #136]	; 0x88
1a005792:	4b55      	ldr	r3, [pc, #340]	; (1a0058e8 <_vfprintf_r+0x1b48>)
1a005794:	930b      	str	r3, [sp, #44]	; 0x2c
1a005796:	e529      	b.n	1a0051ec <_vfprintf_r+0x144c>
1a005798:	2900      	cmp	r1, #0
1a00579a:	d17b      	bne.n	1a005894 <_vfprintf_r+0x1af4>
1a00579c:	2330      	movs	r3, #48	; 0x30
1a00579e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a0057a2:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a0057a6:	3230      	adds	r2, #48	; 0x30
1a0057a8:	f803 2b01 	strb.w	r2, [r3], #1
1a0057ac:	aa24      	add	r2, sp, #144	; 0x90
1a0057ae:	1a9b      	subs	r3, r3, r2
1a0057b0:	9316      	str	r3, [sp, #88]	; 0x58
1a0057b2:	f7ff bb61 	b.w	1a004e78 <_vfprintf_r+0x10d8>
1a0057b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0057b8:	4f4c      	ldr	r7, [pc, #304]	; (1a0058ec <_vfprintf_r+0x1b4c>)
1a0057ba:	2b00      	cmp	r3, #0
1a0057bc:	bfb6      	itet	lt
1a0057be:	222d      	movlt	r2, #45	; 0x2d
1a0057c0:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a0057c4:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a0057c8:	4b49      	ldr	r3, [pc, #292]	; (1a0058f0 <_vfprintf_r+0x1b50>)
1a0057ca:	f7fe beec 	b.w	1a0045a6 <_vfprintf_r+0x806>
1a0057ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0057d0:	e5ab      	b.n	1a00532a <_vfprintf_r+0x158a>
1a0057d2:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0057d6:	9818      	ldr	r0, [sp, #96]	; 0x60
1a0057d8:	2200      	movs	r2, #0
1a0057da:	920c      	str	r2, [sp, #48]	; 0x30
1a0057dc:	920f      	str	r2, [sp, #60]	; 0x3c
1a0057de:	7803      	ldrb	r3, [r0, #0]
1a0057e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0057e2:	2bff      	cmp	r3, #255	; 0xff
1a0057e4:	d00c      	beq.n	1a005800 <_vfprintf_r+0x1a60>
1a0057e6:	4293      	cmp	r3, r2
1a0057e8:	da0a      	bge.n	1a005800 <_vfprintf_r+0x1a60>
1a0057ea:	7841      	ldrb	r1, [r0, #1]
1a0057ec:	1ad2      	subs	r2, r2, r3
1a0057ee:	b1a1      	cbz	r1, 1a00581a <_vfprintf_r+0x1a7a>
1a0057f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0057f2:	3301      	adds	r3, #1
1a0057f4:	930f      	str	r3, [sp, #60]	; 0x3c
1a0057f6:	460b      	mov	r3, r1
1a0057f8:	2bff      	cmp	r3, #255	; 0xff
1a0057fa:	f100 0001 	add.w	r0, r0, #1
1a0057fe:	d1f2      	bne.n	1a0057e6 <_vfprintf_r+0x1a46>
1a005800:	920e      	str	r2, [sp, #56]	; 0x38
1a005802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005806:	9018      	str	r0, [sp, #96]	; 0x60
1a005808:	4413      	add	r3, r2
1a00580a:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a00580c:	fb02 6603 	mla	r6, r2, r3, r6
1a005810:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005814:	9303      	str	r3, [sp, #12]
1a005816:	f7ff bb45 	b.w	1a004ea4 <_vfprintf_r+0x1104>
1a00581a:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00581c:	3101      	adds	r1, #1
1a00581e:	910c      	str	r1, [sp, #48]	; 0x30
1a005820:	e7df      	b.n	1a0057e2 <_vfprintf_r+0x1a42>
1a005822:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a005824:	18d6      	adds	r6, r2, r3
1a005826:	444e      	add	r6, r9
1a005828:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00582c:	e6e3      	b.n	1a0055f6 <_vfprintf_r+0x1856>
1a00582e:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005832:	f7ff b8ec 	b.w	1a004a0e <_vfprintf_r+0xc6e>
1a005836:	2200      	movs	r2, #0
1a005838:	2300      	movs	r3, #0
1a00583a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a00583e:	f7fd f8af 	bl	1a0029a0 <__aeabi_dcmpeq>
1a005842:	2800      	cmp	r0, #0
1a005844:	f47f ae96 	bne.w	1a005574 <_vfprintf_r+0x17d4>
1a005848:	f1c9 0301 	rsb	r3, r9, #1
1a00584c:	9322      	str	r3, [sp, #136]	; 0x88
1a00584e:	e692      	b.n	1a005576 <_vfprintf_r+0x17d6>
1a005850:	f1c3 0301 	rsb	r3, r3, #1
1a005854:	441e      	add	r6, r3
1a005856:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00585a:	9303      	str	r3, [sp, #12]
1a00585c:	f04f 0867 	mov.w	r8, #103	; 0x67
1a005860:	e56f      	b.n	1a005342 <_vfprintf_r+0x15a2>
1a005862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005864:	07dd      	lsls	r5, r3, #31
1a005866:	f57f ab10 	bpl.w	1a004e8a <_vfprintf_r+0x10ea>
1a00586a:	f7ff bb0c 	b.w	1a004e86 <_vfprintf_r+0x10e6>
1a00586e:	b92b      	cbnz	r3, 1a00587c <_vfprintf_r+0x1adc>
1a005870:	2301      	movs	r3, #1
1a005872:	9303      	str	r3, [sp, #12]
1a005874:	461e      	mov	r6, r3
1a005876:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00587a:	e562      	b.n	1a005342 <_vfprintf_r+0x15a2>
1a00587c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00587e:	1c5e      	adds	r6, r3, #1
1a005880:	444e      	add	r6, r9
1a005882:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a005886:	9303      	str	r3, [sp, #12]
1a005888:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00588c:	e559      	b.n	1a005342 <_vfprintf_r+0x15a2>
1a00588e:	465a      	mov	r2, fp
1a005890:	f7ff bb3f 	b.w	1a004f12 <_vfprintf_r+0x1172>
1a005894:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a005898:	e785      	b.n	1a0057a6 <_vfprintf_r+0x1a06>
1a00589a:	9b08      	ldr	r3, [sp, #32]
1a00589c:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a0058a0:	f853 0b04 	ldr.w	r0, [r3], #4
1a0058a4:	9308      	str	r3, [sp, #32]
1a0058a6:	4692      	mov	sl, r2
1a0058a8:	ea40 79e0 	orr.w	r9, r0, r0, asr #31
1a0058ac:	f7fe bafc 	b.w	1a003ea8 <_vfprintf_r+0x108>
1a0058b0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0058b4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0058b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0058bc:	f8a9 300c 	strh.w	r3, [r9, #12]
1a0058c0:	f7ff b8a5 	b.w	1a004a0e <_vfprintf_r+0xc6e>
1a0058c4:	461e      	mov	r6, r3
1a0058c6:	f7fe bc15 	b.w	1a0040f4 <_vfprintf_r+0x354>
1a0058ca:	461e      	mov	r6, r3
1a0058cc:	f7fe bc5e 	b.w	1a00418c <_vfprintf_r+0x3ec>
1a0058d0:	461e      	mov	r6, r3
1a0058d2:	f7fe bc48 	b.w	1a004166 <_vfprintf_r+0x3c6>
1a0058d6:	464c      	mov	r4, r9
1a0058d8:	443c      	add	r4, r7
1a0058da:	e64e      	b.n	1a00557a <_vfprintf_r+0x17da>
1a0058dc:	2302      	movs	r3, #2
1a0058de:	9316      	str	r3, [sp, #88]	; 0x58
1a0058e0:	f7ff baca 	b.w	1a004e78 <_vfprintf_r+0x10d8>
1a0058e4:	1a008110 	.word	0x1a008110
1a0058e8:	1a0080e0 	.word	0x1a0080e0
1a0058ec:	1a0080c4 	.word	0x1a0080c4
1a0058f0:	1a0080c8 	.word	0x1a0080c8

1a0058f4 <__sbprintf>:
1a0058f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0058f8:	460c      	mov	r4, r1
1a0058fa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a0058fe:	8989      	ldrh	r1, [r1, #12]
1a005900:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a005902:	89e5      	ldrh	r5, [r4, #14]
1a005904:	9619      	str	r6, [sp, #100]	; 0x64
1a005906:	f021 0102 	bic.w	r1, r1, #2
1a00590a:	4606      	mov	r6, r0
1a00590c:	69e0      	ldr	r0, [r4, #28]
1a00590e:	f8ad 100c 	strh.w	r1, [sp, #12]
1a005912:	4617      	mov	r7, r2
1a005914:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a005918:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a00591a:	f8ad 500e 	strh.w	r5, [sp, #14]
1a00591e:	4698      	mov	r8, r3
1a005920:	ad1a      	add	r5, sp, #104	; 0x68
1a005922:	2300      	movs	r3, #0
1a005924:	9007      	str	r0, [sp, #28]
1a005926:	a816      	add	r0, sp, #88	; 0x58
1a005928:	9209      	str	r2, [sp, #36]	; 0x24
1a00592a:	9306      	str	r3, [sp, #24]
1a00592c:	9500      	str	r5, [sp, #0]
1a00592e:	9504      	str	r5, [sp, #16]
1a005930:	9102      	str	r1, [sp, #8]
1a005932:	9105      	str	r1, [sp, #20]
1a005934:	f7fd fd5a 	bl	1a0033ec <__retarget_lock_init_recursive>
1a005938:	4643      	mov	r3, r8
1a00593a:	463a      	mov	r2, r7
1a00593c:	4669      	mov	r1, sp
1a00593e:	4630      	mov	r0, r6
1a005940:	f7fe fa2e 	bl	1a003da0 <_vfprintf_r>
1a005944:	1e05      	subs	r5, r0, #0
1a005946:	db07      	blt.n	1a005958 <__sbprintf+0x64>
1a005948:	4630      	mov	r0, r6
1a00594a:	4669      	mov	r1, sp
1a00594c:	f7fd fb28 	bl	1a002fa0 <_fflush_r>
1a005950:	2800      	cmp	r0, #0
1a005952:	bf18      	it	ne
1a005954:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a005958:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a00595c:	065b      	lsls	r3, r3, #25
1a00595e:	d503      	bpl.n	1a005968 <__sbprintf+0x74>
1a005960:	89a3      	ldrh	r3, [r4, #12]
1a005962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005966:	81a3      	strh	r3, [r4, #12]
1a005968:	9816      	ldr	r0, [sp, #88]	; 0x58
1a00596a:	f7fd fd41 	bl	1a0033f0 <__retarget_lock_close_recursive>
1a00596e:	4628      	mov	r0, r5
1a005970:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a005974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a005978 <__swsetup_r>:
1a005978:	b538      	push	{r3, r4, r5, lr}
1a00597a:	4b32      	ldr	r3, [pc, #200]	; (1a005a44 <__swsetup_r+0xcc>)
1a00597c:	681b      	ldr	r3, [r3, #0]
1a00597e:	4605      	mov	r5, r0
1a005980:	460c      	mov	r4, r1
1a005982:	b10b      	cbz	r3, 1a005988 <__swsetup_r+0x10>
1a005984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a005986:	b312      	cbz	r2, 1a0059ce <__swsetup_r+0x56>
1a005988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00598c:	b293      	uxth	r3, r2
1a00598e:	0718      	lsls	r0, r3, #28
1a005990:	d525      	bpl.n	1a0059de <__swsetup_r+0x66>
1a005992:	6920      	ldr	r0, [r4, #16]
1a005994:	2800      	cmp	r0, #0
1a005996:	d02d      	beq.n	1a0059f4 <__swsetup_r+0x7c>
1a005998:	f013 0201 	ands.w	r2, r3, #1
1a00599c:	d007      	beq.n	1a0059ae <__swsetup_r+0x36>
1a00599e:	6963      	ldr	r3, [r4, #20]
1a0059a0:	2200      	movs	r2, #0
1a0059a2:	425b      	negs	r3, r3
1a0059a4:	61a3      	str	r3, [r4, #24]
1a0059a6:	60a2      	str	r2, [r4, #8]
1a0059a8:	b138      	cbz	r0, 1a0059ba <__swsetup_r+0x42>
1a0059aa:	2000      	movs	r0, #0
1a0059ac:	bd38      	pop	{r3, r4, r5, pc}
1a0059ae:	0799      	lsls	r1, r3, #30
1a0059b0:	bf58      	it	pl
1a0059b2:	6962      	ldrpl	r2, [r4, #20]
1a0059b4:	60a2      	str	r2, [r4, #8]
1a0059b6:	2800      	cmp	r0, #0
1a0059b8:	d1f7      	bne.n	1a0059aa <__swsetup_r+0x32>
1a0059ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0059be:	061a      	lsls	r2, r3, #24
1a0059c0:	d5f4      	bpl.n	1a0059ac <__swsetup_r+0x34>
1a0059c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0059c6:	81a3      	strh	r3, [r4, #12]
1a0059c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0059cc:	bd38      	pop	{r3, r4, r5, pc}
1a0059ce:	4618      	mov	r0, r3
1a0059d0:	f7fd fb42 	bl	1a003058 <__sinit>
1a0059d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0059d8:	b293      	uxth	r3, r2
1a0059da:	0718      	lsls	r0, r3, #28
1a0059dc:	d4d9      	bmi.n	1a005992 <__swsetup_r+0x1a>
1a0059de:	06d9      	lsls	r1, r3, #27
1a0059e0:	d528      	bpl.n	1a005a34 <__swsetup_r+0xbc>
1a0059e2:	0758      	lsls	r0, r3, #29
1a0059e4:	d412      	bmi.n	1a005a0c <__swsetup_r+0x94>
1a0059e6:	6920      	ldr	r0, [r4, #16]
1a0059e8:	f042 0308 	orr.w	r3, r2, #8
1a0059ec:	81a3      	strh	r3, [r4, #12]
1a0059ee:	b29b      	uxth	r3, r3
1a0059f0:	2800      	cmp	r0, #0
1a0059f2:	d1d1      	bne.n	1a005998 <__swsetup_r+0x20>
1a0059f4:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a0059f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a0059fc:	d0cc      	beq.n	1a005998 <__swsetup_r+0x20>
1a0059fe:	4628      	mov	r0, r5
1a005a00:	4621      	mov	r1, r4
1a005a02:	f001 f995 	bl	1a006d30 <__smakebuf_r>
1a005a06:	89a3      	ldrh	r3, [r4, #12]
1a005a08:	6920      	ldr	r0, [r4, #16]
1a005a0a:	e7c5      	b.n	1a005998 <__swsetup_r+0x20>
1a005a0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005a0e:	b151      	cbz	r1, 1a005a26 <__swsetup_r+0xae>
1a005a10:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a005a14:	4299      	cmp	r1, r3
1a005a16:	d004      	beq.n	1a005a22 <__swsetup_r+0xaa>
1a005a18:	4628      	mov	r0, r5
1a005a1a:	f7fd fba3 	bl	1a003164 <_free_r>
1a005a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005a22:	2300      	movs	r3, #0
1a005a24:	6323      	str	r3, [r4, #48]	; 0x30
1a005a26:	2300      	movs	r3, #0
1a005a28:	6920      	ldr	r0, [r4, #16]
1a005a2a:	6063      	str	r3, [r4, #4]
1a005a2c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a005a30:	6020      	str	r0, [r4, #0]
1a005a32:	e7d9      	b.n	1a0059e8 <__swsetup_r+0x70>
1a005a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a005a38:	2309      	movs	r3, #9
1a005a3a:	602b      	str	r3, [r5, #0]
1a005a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005a40:	81a2      	strh	r2, [r4, #12]
1a005a42:	bd38      	pop	{r3, r4, r5, pc}
1a005a44:	1000003c 	.word	0x1000003c

1a005a48 <quorem>:
1a005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005a4c:	6903      	ldr	r3, [r0, #16]
1a005a4e:	690f      	ldr	r7, [r1, #16]
1a005a50:	42bb      	cmp	r3, r7
1a005a52:	b083      	sub	sp, #12
1a005a54:	f2c0 8086 	blt.w	1a005b64 <quorem+0x11c>
1a005a58:	3f01      	subs	r7, #1
1a005a5a:	f101 0614 	add.w	r6, r1, #20
1a005a5e:	f100 0a14 	add.w	sl, r0, #20
1a005a62:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a005a66:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a005a6a:	00bc      	lsls	r4, r7, #2
1a005a6c:	3301      	adds	r3, #1
1a005a6e:	9400      	str	r4, [sp, #0]
1a005a70:	eb06 0904 	add.w	r9, r6, r4
1a005a74:	429a      	cmp	r2, r3
1a005a76:	4454      	add	r4, sl
1a005a78:	fbb2 f8f3 	udiv	r8, r2, r3
1a005a7c:	9401      	str	r4, [sp, #4]
1a005a7e:	d33a      	bcc.n	1a005af6 <quorem+0xae>
1a005a80:	2500      	movs	r5, #0
1a005a82:	462a      	mov	r2, r5
1a005a84:	46b6      	mov	lr, r6
1a005a86:	46d4      	mov	ip, sl
1a005a88:	f85e 4b04 	ldr.w	r4, [lr], #4
1a005a8c:	f8dc 3000 	ldr.w	r3, [ip]
1a005a90:	fa1f fb84 	uxth.w	fp, r4
1a005a94:	fb08 550b 	mla	r5, r8, fp, r5
1a005a98:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a005a9c:	0c24      	lsrs	r4, r4, #16
1a005a9e:	fb08 b404 	mla	r4, r8, r4, fp
1a005aa2:	b2ad      	uxth	r5, r5
1a005aa4:	1b55      	subs	r5, r2, r5
1a005aa6:	b2a2      	uxth	r2, r4
1a005aa8:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a005aac:	fa15 f383 	uxtah	r3, r5, r3
1a005ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a005ab4:	b29b      	uxth	r3, r3
1a005ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a005aba:	45f1      	cmp	r9, lr
1a005abc:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a005ac0:	f84c 3b04 	str.w	r3, [ip], #4
1a005ac4:	ea4f 4222 	mov.w	r2, r2, asr #16
1a005ac8:	d2de      	bcs.n	1a005a88 <quorem+0x40>
1a005aca:	9b00      	ldr	r3, [sp, #0]
1a005acc:	f85a 3003 	ldr.w	r3, [sl, r3]
1a005ad0:	b98b      	cbnz	r3, 1a005af6 <quorem+0xae>
1a005ad2:	9a01      	ldr	r2, [sp, #4]
1a005ad4:	1f13      	subs	r3, r2, #4
1a005ad6:	459a      	cmp	sl, r3
1a005ad8:	d20c      	bcs.n	1a005af4 <quorem+0xac>
1a005ada:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a005ade:	b94b      	cbnz	r3, 1a005af4 <quorem+0xac>
1a005ae0:	f1a2 0308 	sub.w	r3, r2, #8
1a005ae4:	e002      	b.n	1a005aec <quorem+0xa4>
1a005ae6:	681a      	ldr	r2, [r3, #0]
1a005ae8:	3b04      	subs	r3, #4
1a005aea:	b91a      	cbnz	r2, 1a005af4 <quorem+0xac>
1a005aec:	459a      	cmp	sl, r3
1a005aee:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a005af2:	d3f8      	bcc.n	1a005ae6 <quorem+0x9e>
1a005af4:	6107      	str	r7, [r0, #16]
1a005af6:	4604      	mov	r4, r0
1a005af8:	f001 fc34 	bl	1a007364 <__mcmp>
1a005afc:	2800      	cmp	r0, #0
1a005afe:	db2d      	blt.n	1a005b5c <quorem+0x114>
1a005b00:	f108 0801 	add.w	r8, r8, #1
1a005b04:	4650      	mov	r0, sl
1a005b06:	2300      	movs	r3, #0
1a005b08:	f856 1b04 	ldr.w	r1, [r6], #4
1a005b0c:	6805      	ldr	r5, [r0, #0]
1a005b0e:	b28a      	uxth	r2, r1
1a005b10:	1a9a      	subs	r2, r3, r2
1a005b12:	0c0b      	lsrs	r3, r1, #16
1a005b14:	fa12 f285 	uxtah	r2, r2, r5
1a005b18:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a005b1c:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a005b20:	b292      	uxth	r2, r2
1a005b22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a005b26:	45b1      	cmp	r9, r6
1a005b28:	f840 2b04 	str.w	r2, [r0], #4
1a005b2c:	ea4f 4323 	mov.w	r3, r3, asr #16
1a005b30:	d2ea      	bcs.n	1a005b08 <quorem+0xc0>
1a005b32:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a005b36:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a005b3a:	b97a      	cbnz	r2, 1a005b5c <quorem+0x114>
1a005b3c:	1f1a      	subs	r2, r3, #4
1a005b3e:	4592      	cmp	sl, r2
1a005b40:	d20b      	bcs.n	1a005b5a <quorem+0x112>
1a005b42:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a005b46:	b942      	cbnz	r2, 1a005b5a <quorem+0x112>
1a005b48:	3b08      	subs	r3, #8
1a005b4a:	e002      	b.n	1a005b52 <quorem+0x10a>
1a005b4c:	681a      	ldr	r2, [r3, #0]
1a005b4e:	3b04      	subs	r3, #4
1a005b50:	b91a      	cbnz	r2, 1a005b5a <quorem+0x112>
1a005b52:	459a      	cmp	sl, r3
1a005b54:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a005b58:	d3f8      	bcc.n	1a005b4c <quorem+0x104>
1a005b5a:	6127      	str	r7, [r4, #16]
1a005b5c:	4640      	mov	r0, r8
1a005b5e:	b003      	add	sp, #12
1a005b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005b64:	2000      	movs	r0, #0
1a005b66:	b003      	add	sp, #12
1a005b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005b6c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a005b70 <_dtoa_r>:
1a005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005b74:	ec57 6b10 	vmov	r6, r7, d0
1a005b78:	b097      	sub	sp, #92	; 0x5c
1a005b7a:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a005b7c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a005b7e:	9102      	str	r1, [sp, #8]
1a005b80:	4682      	mov	sl, r0
1a005b82:	920a      	str	r2, [sp, #40]	; 0x28
1a005b84:	9307      	str	r3, [sp, #28]
1a005b86:	e9cd 6700 	strd	r6, r7, [sp]
1a005b8a:	b155      	cbz	r5, 1a005ba2 <_dtoa_r+0x32>
1a005b8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a005b8e:	606a      	str	r2, [r5, #4]
1a005b90:	2301      	movs	r3, #1
1a005b92:	4093      	lsls	r3, r2
1a005b94:	60ab      	str	r3, [r5, #8]
1a005b96:	4629      	mov	r1, r5
1a005b98:	f001 f9f8 	bl	1a006f8c <_Bfree>
1a005b9c:	2300      	movs	r3, #0
1a005b9e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a005ba2:	1e3e      	subs	r6, r7, #0
1a005ba4:	bfb4      	ite	lt
1a005ba6:	2301      	movlt	r3, #1
1a005ba8:	2300      	movge	r3, #0
1a005baa:	6023      	str	r3, [r4, #0]
1a005bac:	4b76      	ldr	r3, [pc, #472]	; (1a005d88 <_dtoa_r+0x218>)
1a005bae:	bfbc      	itt	lt
1a005bb0:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a005bb4:	9601      	strlt	r6, [sp, #4]
1a005bb6:	43b3      	bics	r3, r6
1a005bb8:	f000 80ae 	beq.w	1a005d18 <_dtoa_r+0x1a8>
1a005bbc:	ed9d 7b00 	vldr	d7, [sp]
1a005bc0:	2200      	movs	r2, #0
1a005bc2:	2300      	movs	r3, #0
1a005bc4:	ec51 0b17 	vmov	r0, r1, d7
1a005bc8:	ed8d 7b04 	vstr	d7, [sp, #16]
1a005bcc:	f7fc fee8 	bl	1a0029a0 <__aeabi_dcmpeq>
1a005bd0:	4605      	mov	r5, r0
1a005bd2:	b178      	cbz	r0, 1a005bf4 <_dtoa_r+0x84>
1a005bd4:	9a07      	ldr	r2, [sp, #28]
1a005bd6:	2301      	movs	r3, #1
1a005bd8:	6013      	str	r3, [r2, #0]
1a005bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005bdc:	2b00      	cmp	r3, #0
1a005bde:	f000 8313 	beq.w	1a006208 <_dtoa_r+0x698>
1a005be2:	4b6a      	ldr	r3, [pc, #424]	; (1a005d8c <_dtoa_r+0x21c>)
1a005be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a005be6:	6013      	str	r3, [r2, #0]
1a005be8:	3b01      	subs	r3, #1
1a005bea:	9303      	str	r3, [sp, #12]
1a005bec:	9803      	ldr	r0, [sp, #12]
1a005bee:	b017      	add	sp, #92	; 0x5c
1a005bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005bf4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a005bf8:	aa14      	add	r2, sp, #80	; 0x50
1a005bfa:	a915      	add	r1, sp, #84	; 0x54
1a005bfc:	ec48 7b10 	vmov	d0, r7, r8
1a005c00:	4650      	mov	r0, sl
1a005c02:	f001 fc47 	bl	1a007494 <__d2b>
1a005c06:	0d34      	lsrs	r4, r6, #20
1a005c08:	4683      	mov	fp, r0
1a005c0a:	f040 809b 	bne.w	1a005d44 <_dtoa_r+0x1d4>
1a005c0e:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a005c12:	442c      	add	r4, r5
1a005c14:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a005c18:	2b20      	cmp	r3, #32
1a005c1a:	f340 83bb 	ble.w	1a006394 <_dtoa_r+0x824>
1a005c1e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a005c22:	409e      	lsls	r6, r3
1a005c24:	9b00      	ldr	r3, [sp, #0]
1a005c26:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a005c2a:	fa23 f000 	lsr.w	r0, r3, r0
1a005c2e:	4330      	orrs	r0, r6
1a005c30:	f7fc fbd4 	bl	1a0023dc <__aeabi_ui2d>
1a005c34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a005c38:	2101      	movs	r1, #1
1a005c3a:	4602      	mov	r2, r0
1a005c3c:	3c01      	subs	r4, #1
1a005c3e:	910e      	str	r1, [sp, #56]	; 0x38
1a005c40:	4610      	mov	r0, r2
1a005c42:	4619      	mov	r1, r3
1a005c44:	2200      	movs	r2, #0
1a005c46:	4b52      	ldr	r3, [pc, #328]	; (1a005d90 <_dtoa_r+0x220>)
1a005c48:	f7fc fa8a 	bl	1a002160 <__aeabi_dsub>
1a005c4c:	a348      	add	r3, pc, #288	; (adr r3, 1a005d70 <_dtoa_r+0x200>)
1a005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005c52:	f7fc fc3d 	bl	1a0024d0 <__aeabi_dmul>
1a005c56:	a348      	add	r3, pc, #288	; (adr r3, 1a005d78 <_dtoa_r+0x208>)
1a005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005c5c:	f7fc fa82 	bl	1a002164 <__adddf3>
1a005c60:	4606      	mov	r6, r0
1a005c62:	4620      	mov	r0, r4
1a005c64:	460f      	mov	r7, r1
1a005c66:	f7fc fbc9 	bl	1a0023fc <__aeabi_i2d>
1a005c6a:	a345      	add	r3, pc, #276	; (adr r3, 1a005d80 <_dtoa_r+0x210>)
1a005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005c70:	f7fc fc2e 	bl	1a0024d0 <__aeabi_dmul>
1a005c74:	4602      	mov	r2, r0
1a005c76:	460b      	mov	r3, r1
1a005c78:	4630      	mov	r0, r6
1a005c7a:	4639      	mov	r1, r7
1a005c7c:	f7fc fa72 	bl	1a002164 <__adddf3>
1a005c80:	4606      	mov	r6, r0
1a005c82:	460f      	mov	r7, r1
1a005c84:	f7fc fed4 	bl	1a002a30 <__aeabi_d2iz>
1a005c88:	2200      	movs	r2, #0
1a005c8a:	4681      	mov	r9, r0
1a005c8c:	2300      	movs	r3, #0
1a005c8e:	4630      	mov	r0, r6
1a005c90:	4639      	mov	r1, r7
1a005c92:	f7fc fe8f 	bl	1a0029b4 <__aeabi_dcmplt>
1a005c96:	2800      	cmp	r0, #0
1a005c98:	f040 82a9 	bne.w	1a0061ee <_dtoa_r+0x67e>
1a005c9c:	1b2c      	subs	r4, r5, r4
1a005c9e:	f1b9 0f16 	cmp.w	r9, #22
1a005ca2:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a005ca6:	f200 8296 	bhi.w	1a0061d6 <_dtoa_r+0x666>
1a005caa:	4b3a      	ldr	r3, [pc, #232]	; (1a005d94 <_dtoa_r+0x224>)
1a005cac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005cb8:	f7fc fe7c 	bl	1a0029b4 <__aeabi_dcmplt>
1a005cbc:	2800      	cmp	r0, #0
1a005cbe:	d06f      	beq.n	1a005da0 <_dtoa_r+0x230>
1a005cc0:	2300      	movs	r3, #0
1a005cc2:	f1b8 0f00 	cmp.w	r8, #0
1a005cc6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a005cca:	930d      	str	r3, [sp, #52]	; 0x34
1a005ccc:	f2c0 8289 	blt.w	1a0061e2 <_dtoa_r+0x672>
1a005cd0:	2300      	movs	r3, #0
1a005cd2:	9308      	str	r3, [sp, #32]
1a005cd4:	f1b9 0f00 	cmp.w	r9, #0
1a005cd8:	da68      	bge.n	1a005dac <_dtoa_r+0x23c>
1a005cda:	9b08      	ldr	r3, [sp, #32]
1a005cdc:	f8cd 9018 	str.w	r9, [sp, #24]
1a005ce0:	eba3 0309 	sub.w	r3, r3, r9
1a005ce4:	9308      	str	r3, [sp, #32]
1a005ce6:	f1c9 0300 	rsb	r3, r9, #0
1a005cea:	930c      	str	r3, [sp, #48]	; 0x30
1a005cec:	9b02      	ldr	r3, [sp, #8]
1a005cee:	2b09      	cmp	r3, #9
1a005cf0:	f04f 0900 	mov.w	r9, #0
1a005cf4:	d862      	bhi.n	1a005dbc <_dtoa_r+0x24c>
1a005cf6:	2b05      	cmp	r3, #5
1a005cf8:	f340 834a 	ble.w	1a006390 <_dtoa_r+0x820>
1a005cfc:	3b04      	subs	r3, #4
1a005cfe:	9302      	str	r3, [sp, #8]
1a005d00:	2400      	movs	r4, #0
1a005d02:	9b02      	ldr	r3, [sp, #8]
1a005d04:	3b02      	subs	r3, #2
1a005d06:	2b03      	cmp	r3, #3
1a005d08:	f200 8641 	bhi.w	1a00698e <_dtoa_r+0xe1e>
1a005d0c:	e8df f013 	tbh	[pc, r3, lsl #1]
1a005d10:	04630466 	.word	0x04630466
1a005d14:	0456043b 	.word	0x0456043b
1a005d18:	9a07      	ldr	r2, [sp, #28]
1a005d1a:	f242 730f 	movw	r3, #9999	; 0x270f
1a005d1e:	6013      	str	r3, [r2, #0]
1a005d20:	9b00      	ldr	r3, [sp, #0]
1a005d22:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a005d26:	4333      	orrs	r3, r6
1a005d28:	d118      	bne.n	1a005d5c <_dtoa_r+0x1ec>
1a005d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005d2c:	2b00      	cmp	r3, #0
1a005d2e:	f000 8625 	beq.w	1a00697c <_dtoa_r+0xe0c>
1a005d32:	4b19      	ldr	r3, [pc, #100]	; (1a005d98 <_dtoa_r+0x228>)
1a005d34:	9303      	str	r3, [sp, #12]
1a005d36:	3308      	adds	r3, #8
1a005d38:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a005d3a:	9803      	ldr	r0, [sp, #12]
1a005d3c:	6013      	str	r3, [r2, #0]
1a005d3e:	b017      	add	sp, #92	; 0x5c
1a005d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005d44:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a005d48:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a005d4c:	950e      	str	r5, [sp, #56]	; 0x38
1a005d4e:	463a      	mov	r2, r7
1a005d50:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a005d54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a005d58:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a005d5a:	e771      	b.n	1a005c40 <_dtoa_r+0xd0>
1a005d5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005d5e:	2b00      	cmp	r3, #0
1a005d60:	f040 8400 	bne.w	1a006564 <_dtoa_r+0x9f4>
1a005d64:	4b0d      	ldr	r3, [pc, #52]	; (1a005d9c <_dtoa_r+0x22c>)
1a005d66:	9303      	str	r3, [sp, #12]
1a005d68:	e740      	b.n	1a005bec <_dtoa_r+0x7c>
1a005d6a:	bf00      	nop
1a005d6c:	f3af 8000 	nop.w
1a005d70:	636f4361 	.word	0x636f4361
1a005d74:	3fd287a7 	.word	0x3fd287a7
1a005d78:	8b60c8b3 	.word	0x8b60c8b3
1a005d7c:	3fc68a28 	.word	0x3fc68a28
1a005d80:	509f79fb 	.word	0x509f79fb
1a005d84:	3fd34413 	.word	0x3fd34413
1a005d88:	7ff00000 	.word	0x7ff00000
1a005d8c:	1a0080fd 	.word	0x1a0080fd
1a005d90:	3ff80000 	.word	0x3ff80000
1a005d94:	1a008158 	.word	0x1a008158
1a005d98:	1a008124 	.word	0x1a008124
1a005d9c:	1a008120 	.word	0x1a008120
1a005da0:	f1b8 0f00 	cmp.w	r8, #0
1a005da4:	f2c0 84b6 	blt.w	1a006714 <_dtoa_r+0xba4>
1a005da8:	900d      	str	r0, [sp, #52]	; 0x34
1a005daa:	9008      	str	r0, [sp, #32]
1a005dac:	2300      	movs	r3, #0
1a005dae:	930c      	str	r3, [sp, #48]	; 0x30
1a005db0:	9b02      	ldr	r3, [sp, #8]
1a005db2:	f8cd 9018 	str.w	r9, [sp, #24]
1a005db6:	2b09      	cmp	r3, #9
1a005db8:	44c8      	add	r8, r9
1a005dba:	d99c      	bls.n	1a005cf6 <_dtoa_r+0x186>
1a005dbc:	2300      	movs	r3, #0
1a005dbe:	2401      	movs	r4, #1
1a005dc0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a005dc4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a005dc8:	9302      	str	r3, [sp, #8]
1a005dca:	9509      	str	r5, [sp, #36]	; 0x24
1a005dcc:	2100      	movs	r1, #0
1a005dce:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a005dd2:	950f      	str	r5, [sp, #60]	; 0x3c
1a005dd4:	4650      	mov	r0, sl
1a005dd6:	f001 f8b3 	bl	1a006f40 <_Balloc>
1a005dda:	2d0e      	cmp	r5, #14
1a005ddc:	9003      	str	r0, [sp, #12]
1a005dde:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a005de2:	f200 810a 	bhi.w	1a005ffa <_dtoa_r+0x48a>
1a005de6:	2c00      	cmp	r4, #0
1a005de8:	f000 8107 	beq.w	1a005ffa <_dtoa_r+0x48a>
1a005dec:	9906      	ldr	r1, [sp, #24]
1a005dee:	2900      	cmp	r1, #0
1a005df0:	f340 8466 	ble.w	1a0066c0 <_dtoa_r+0xb50>
1a005df4:	4bb1      	ldr	r3, [pc, #708]	; (1a0060bc <_dtoa_r+0x54c>)
1a005df6:	f001 020f 	and.w	r2, r1, #15
1a005dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005dfe:	ed93 7b00 	vldr	d7, [r3]
1a005e02:	110c      	asrs	r4, r1, #4
1a005e04:	06e3      	lsls	r3, r4, #27
1a005e06:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005e0a:	f140 8406 	bpl.w	1a00661a <_dtoa_r+0xaaa>
1a005e0e:	4bac      	ldr	r3, [pc, #688]	; (1a0060c0 <_dtoa_r+0x550>)
1a005e10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005e14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a005e18:	f7fc fc84 	bl	1a002724 <__aeabi_ddiv>
1a005e1c:	e9cd 0100 	strd	r0, r1, [sp]
1a005e20:	f004 040f 	and.w	r4, r4, #15
1a005e24:	2603      	movs	r6, #3
1a005e26:	b17c      	cbz	r4, 1a005e48 <_dtoa_r+0x2d8>
1a005e28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005e2c:	4da4      	ldr	r5, [pc, #656]	; (1a0060c0 <_dtoa_r+0x550>)
1a005e2e:	07e7      	lsls	r7, r4, #31
1a005e30:	d504      	bpl.n	1a005e3c <_dtoa_r+0x2cc>
1a005e32:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005e36:	f7fc fb4b 	bl	1a0024d0 <__aeabi_dmul>
1a005e3a:	3601      	adds	r6, #1
1a005e3c:	1064      	asrs	r4, r4, #1
1a005e3e:	f105 0508 	add.w	r5, r5, #8
1a005e42:	d1f4      	bne.n	1a005e2e <_dtoa_r+0x2be>
1a005e44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a005e48:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005e4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a005e50:	f7fc fc68 	bl	1a002724 <__aeabi_ddiv>
1a005e54:	e9cd 0100 	strd	r0, r1, [sp]
1a005e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a005e5a:	b153      	cbz	r3, 1a005e72 <_dtoa_r+0x302>
1a005e5c:	e9dd 4500 	ldrd	r4, r5, [sp]
1a005e60:	2200      	movs	r2, #0
1a005e62:	4b98      	ldr	r3, [pc, #608]	; (1a0060c4 <_dtoa_r+0x554>)
1a005e64:	4620      	mov	r0, r4
1a005e66:	4629      	mov	r1, r5
1a005e68:	f7fc fda4 	bl	1a0029b4 <__aeabi_dcmplt>
1a005e6c:	2800      	cmp	r0, #0
1a005e6e:	f040 8521 	bne.w	1a0068b4 <_dtoa_r+0xd44>
1a005e72:	4630      	mov	r0, r6
1a005e74:	f7fc fac2 	bl	1a0023fc <__aeabi_i2d>
1a005e78:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005e7c:	f7fc fb28 	bl	1a0024d0 <__aeabi_dmul>
1a005e80:	4b91      	ldr	r3, [pc, #580]	; (1a0060c8 <_dtoa_r+0x558>)
1a005e82:	2200      	movs	r2, #0
1a005e84:	f7fc f96e 	bl	1a002164 <__adddf3>
1a005e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005e8a:	4604      	mov	r4, r0
1a005e8c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a005e90:	2b00      	cmp	r3, #0
1a005e92:	f000 83f9 	beq.w	1a006688 <_dtoa_r+0xb18>
1a005e96:	9b06      	ldr	r3, [sp, #24]
1a005e98:	9312      	str	r3, [sp, #72]	; 0x48
1a005e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005e9c:	9310      	str	r3, [sp, #64]	; 0x40
1a005e9e:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005ea2:	4639      	mov	r1, r7
1a005ea4:	4630      	mov	r0, r6
1a005ea6:	f7fc fdc3 	bl	1a002a30 <__aeabi_d2iz>
1a005eaa:	9000      	str	r0, [sp, #0]
1a005eac:	f7fc faa6 	bl	1a0023fc <__aeabi_i2d>
1a005eb0:	4602      	mov	r2, r0
1a005eb2:	460b      	mov	r3, r1
1a005eb4:	4630      	mov	r0, r6
1a005eb6:	4639      	mov	r1, r7
1a005eb8:	f7fc f952 	bl	1a002160 <__aeabi_dsub>
1a005ebc:	4b7f      	ldr	r3, [pc, #508]	; (1a0060bc <_dtoa_r+0x54c>)
1a005ebe:	9a00      	ldr	r2, [sp, #0]
1a005ec0:	460f      	mov	r7, r1
1a005ec2:	9910      	ldr	r1, [sp, #64]	; 0x40
1a005ec4:	4606      	mov	r6, r0
1a005ec6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a005eca:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a005ecc:	9903      	ldr	r1, [sp, #12]
1a005ece:	3230      	adds	r2, #48	; 0x30
1a005ed0:	e9cd 4500 	strd	r4, r5, [sp]
1a005ed4:	b2d5      	uxtb	r5, r2
1a005ed6:	1c4c      	adds	r4, r1, #1
1a005ed8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a005edc:	2800      	cmp	r0, #0
1a005ede:	f000 848d 	beq.w	1a0067fc <_dtoa_r+0xc8c>
1a005ee2:	2000      	movs	r0, #0
1a005ee4:	4979      	ldr	r1, [pc, #484]	; (1a0060cc <_dtoa_r+0x55c>)
1a005ee6:	f7fc fc1d 	bl	1a002724 <__aeabi_ddiv>
1a005eea:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005eee:	f7fc f937 	bl	1a002160 <__aeabi_dsub>
1a005ef2:	9b03      	ldr	r3, [sp, #12]
1a005ef4:	4632      	mov	r2, r6
1a005ef6:	701d      	strb	r5, [r3, #0]
1a005ef8:	463b      	mov	r3, r7
1a005efa:	e9cd 0100 	strd	r0, r1, [sp]
1a005efe:	f7fc fd77 	bl	1a0029f0 <__aeabi_dcmpgt>
1a005f02:	2800      	cmp	r0, #0
1a005f04:	f040 84ca 	bne.w	1a00689c <_dtoa_r+0xd2c>
1a005f08:	4632      	mov	r2, r6
1a005f0a:	463b      	mov	r3, r7
1a005f0c:	2000      	movs	r0, #0
1a005f0e:	496d      	ldr	r1, [pc, #436]	; (1a0060c4 <_dtoa_r+0x554>)
1a005f10:	f7fc f926 	bl	1a002160 <__aeabi_dsub>
1a005f14:	4602      	mov	r2, r0
1a005f16:	460b      	mov	r3, r1
1a005f18:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005f1c:	f7fc fd68 	bl	1a0029f0 <__aeabi_dcmpgt>
1a005f20:	2800      	cmp	r0, #0
1a005f22:	f040 8526 	bne.w	1a006972 <_dtoa_r+0xe02>
1a005f26:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005f28:	2b01      	cmp	r3, #1
1a005f2a:	d062      	beq.n	1a005ff2 <_dtoa_r+0x482>
1a005f2c:	9a03      	ldr	r2, [sp, #12]
1a005f2e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a005f32:	4413      	add	r3, r2
1a005f34:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a005f38:	e9dd 8900 	ldrd	r8, r9, [sp]
1a005f3c:	f8cd b000 	str.w	fp, [sp]
1a005f40:	46d3      	mov	fp, sl
1a005f42:	469a      	mov	sl, r3
1a005f44:	e00c      	b.n	1a005f60 <_dtoa_r+0x3f0>
1a005f46:	2000      	movs	r0, #0
1a005f48:	495e      	ldr	r1, [pc, #376]	; (1a0060c4 <_dtoa_r+0x554>)
1a005f4a:	f7fc f909 	bl	1a002160 <__aeabi_dsub>
1a005f4e:	4642      	mov	r2, r8
1a005f50:	464b      	mov	r3, r9
1a005f52:	f7fc fd2f 	bl	1a0029b4 <__aeabi_dcmplt>
1a005f56:	2800      	cmp	r0, #0
1a005f58:	f040 84eb 	bne.w	1a006932 <_dtoa_r+0xdc2>
1a005f5c:	45a2      	cmp	sl, r4
1a005f5e:	d041      	beq.n	1a005fe4 <_dtoa_r+0x474>
1a005f60:	4640      	mov	r0, r8
1a005f62:	4649      	mov	r1, r9
1a005f64:	2200      	movs	r2, #0
1a005f66:	4b5a      	ldr	r3, [pc, #360]	; (1a0060d0 <_dtoa_r+0x560>)
1a005f68:	f7fc fab2 	bl	1a0024d0 <__aeabi_dmul>
1a005f6c:	2200      	movs	r2, #0
1a005f6e:	4b58      	ldr	r3, [pc, #352]	; (1a0060d0 <_dtoa_r+0x560>)
1a005f70:	4680      	mov	r8, r0
1a005f72:	4689      	mov	r9, r1
1a005f74:	4630      	mov	r0, r6
1a005f76:	4639      	mov	r1, r7
1a005f78:	f7fc faaa 	bl	1a0024d0 <__aeabi_dmul>
1a005f7c:	460f      	mov	r7, r1
1a005f7e:	4606      	mov	r6, r0
1a005f80:	f7fc fd56 	bl	1a002a30 <__aeabi_d2iz>
1a005f84:	4605      	mov	r5, r0
1a005f86:	f7fc fa39 	bl	1a0023fc <__aeabi_i2d>
1a005f8a:	4602      	mov	r2, r0
1a005f8c:	460b      	mov	r3, r1
1a005f8e:	4630      	mov	r0, r6
1a005f90:	4639      	mov	r1, r7
1a005f92:	f7fc f8e5 	bl	1a002160 <__aeabi_dsub>
1a005f96:	3530      	adds	r5, #48	; 0x30
1a005f98:	b2ed      	uxtb	r5, r5
1a005f9a:	4642      	mov	r2, r8
1a005f9c:	464b      	mov	r3, r9
1a005f9e:	f804 5b01 	strb.w	r5, [r4], #1
1a005fa2:	4606      	mov	r6, r0
1a005fa4:	460f      	mov	r7, r1
1a005fa6:	f7fc fd05 	bl	1a0029b4 <__aeabi_dcmplt>
1a005faa:	4632      	mov	r2, r6
1a005fac:	463b      	mov	r3, r7
1a005fae:	2800      	cmp	r0, #0
1a005fb0:	d0c9      	beq.n	1a005f46 <_dtoa_r+0x3d6>
1a005fb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005fb4:	46da      	mov	sl, fp
1a005fb6:	3301      	adds	r3, #1
1a005fb8:	f8dd b000 	ldr.w	fp, [sp]
1a005fbc:	9306      	str	r3, [sp, #24]
1a005fbe:	4659      	mov	r1, fp
1a005fc0:	4650      	mov	r0, sl
1a005fc2:	f000 ffe3 	bl	1a006f8c <_Bfree>
1a005fc6:	2300      	movs	r3, #0
1a005fc8:	7023      	strb	r3, [r4, #0]
1a005fca:	9b07      	ldr	r3, [sp, #28]
1a005fcc:	461a      	mov	r2, r3
1a005fce:	9b06      	ldr	r3, [sp, #24]
1a005fd0:	6013      	str	r3, [r2, #0]
1a005fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005fd4:	2b00      	cmp	r3, #0
1a005fd6:	f43f ae09 	beq.w	1a005bec <_dtoa_r+0x7c>
1a005fda:	9803      	ldr	r0, [sp, #12]
1a005fdc:	601c      	str	r4, [r3, #0]
1a005fde:	b017      	add	sp, #92	; 0x5c
1a005fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005fe4:	46da      	mov	sl, fp
1a005fe6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a005fea:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a005fee:	f8dd b000 	ldr.w	fp, [sp]
1a005ff2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a005ff6:	e9cd 3400 	strd	r3, r4, [sp]
1a005ffa:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a005ffc:	2b00      	cmp	r3, #0
1a005ffe:	f2c0 80c9 	blt.w	1a006194 <_dtoa_r+0x624>
1a006002:	9a06      	ldr	r2, [sp, #24]
1a006004:	2a0e      	cmp	r2, #14
1a006006:	f300 80c5 	bgt.w	1a006194 <_dtoa_r+0x624>
1a00600a:	4b2c      	ldr	r3, [pc, #176]	; (1a0060bc <_dtoa_r+0x54c>)
1a00600c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a006010:	e9d3 8900 	ldrd	r8, r9, [r3]
1a006014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006016:	2b00      	cmp	r3, #0
1a006018:	da17      	bge.n	1a00604a <_dtoa_r+0x4da>
1a00601a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a00601c:	2f00      	cmp	r7, #0
1a00601e:	dc14      	bgt.n	1a00604a <_dtoa_r+0x4da>
1a006020:	f040 834b 	bne.w	1a0066ba <_dtoa_r+0xb4a>
1a006024:	2200      	movs	r2, #0
1a006026:	4b2b      	ldr	r3, [pc, #172]	; (1a0060d4 <_dtoa_r+0x564>)
1a006028:	4640      	mov	r0, r8
1a00602a:	4649      	mov	r1, r9
1a00602c:	f7fc fa50 	bl	1a0024d0 <__aeabi_dmul>
1a006030:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006034:	f7fc fcd2 	bl	1a0029dc <__aeabi_dcmpge>
1a006038:	2800      	cmp	r0, #0
1a00603a:	f000 83be 	beq.w	1a0067ba <_dtoa_r+0xc4a>
1a00603e:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a006040:	463d      	mov	r5, r7
1a006042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006044:	9c03      	ldr	r4, [sp, #12]
1a006046:	43db      	mvns	r3, r3
1a006048:	e260      	b.n	1a00650c <_dtoa_r+0x99c>
1a00604a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a00604e:	4642      	mov	r2, r8
1a006050:	464b      	mov	r3, r9
1a006052:	4620      	mov	r0, r4
1a006054:	4629      	mov	r1, r5
1a006056:	f7fc fb65 	bl	1a002724 <__aeabi_ddiv>
1a00605a:	f7fc fce9 	bl	1a002a30 <__aeabi_d2iz>
1a00605e:	9000      	str	r0, [sp, #0]
1a006060:	f7fc f9cc 	bl	1a0023fc <__aeabi_i2d>
1a006064:	4642      	mov	r2, r8
1a006066:	464b      	mov	r3, r9
1a006068:	f7fc fa32 	bl	1a0024d0 <__aeabi_dmul>
1a00606c:	4602      	mov	r2, r0
1a00606e:	460b      	mov	r3, r1
1a006070:	4620      	mov	r0, r4
1a006072:	4629      	mov	r1, r5
1a006074:	f7fc f874 	bl	1a002160 <__aeabi_dsub>
1a006078:	9b00      	ldr	r3, [sp, #0]
1a00607a:	9c03      	ldr	r4, [sp, #12]
1a00607c:	9a06      	ldr	r2, [sp, #24]
1a00607e:	3330      	adds	r3, #48	; 0x30
1a006080:	f804 3b01 	strb.w	r3, [r4], #1
1a006084:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006086:	3201      	adds	r2, #1
1a006088:	2b01      	cmp	r3, #1
1a00608a:	4606      	mov	r6, r0
1a00608c:	460f      	mov	r7, r1
1a00608e:	9206      	str	r2, [sp, #24]
1a006090:	d054      	beq.n	1a00613c <_dtoa_r+0x5cc>
1a006092:	2200      	movs	r2, #0
1a006094:	4b0e      	ldr	r3, [pc, #56]	; (1a0060d0 <_dtoa_r+0x560>)
1a006096:	f7fc fa1b 	bl	1a0024d0 <__aeabi_dmul>
1a00609a:	2200      	movs	r2, #0
1a00609c:	2300      	movs	r3, #0
1a00609e:	4606      	mov	r6, r0
1a0060a0:	460f      	mov	r7, r1
1a0060a2:	f7fc fc7d 	bl	1a0029a0 <__aeabi_dcmpeq>
1a0060a6:	2800      	cmp	r0, #0
1a0060a8:	d189      	bne.n	1a005fbe <_dtoa_r+0x44e>
1a0060aa:	f8cd b000 	str.w	fp, [sp]
1a0060ae:	2501      	movs	r5, #1
1a0060b0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a0060b4:	f8cd a008 	str.w	sl, [sp, #8]
1a0060b8:	e019      	b.n	1a0060ee <_dtoa_r+0x57e>
1a0060ba:	bf00      	nop
1a0060bc:	1a008158 	.word	0x1a008158
1a0060c0:	1a008130 	.word	0x1a008130
1a0060c4:	3ff00000 	.word	0x3ff00000
1a0060c8:	401c0000 	.word	0x401c0000
1a0060cc:	3fe00000 	.word	0x3fe00000
1a0060d0:	40240000 	.word	0x40240000
1a0060d4:	40140000 	.word	0x40140000
1a0060d8:	f7fc f9fa 	bl	1a0024d0 <__aeabi_dmul>
1a0060dc:	2200      	movs	r2, #0
1a0060de:	2300      	movs	r3, #0
1a0060e0:	4606      	mov	r6, r0
1a0060e2:	460f      	mov	r7, r1
1a0060e4:	f7fc fc5c 	bl	1a0029a0 <__aeabi_dcmpeq>
1a0060e8:	2800      	cmp	r0, #0
1a0060ea:	f040 835c 	bne.w	1a0067a6 <_dtoa_r+0xc36>
1a0060ee:	4642      	mov	r2, r8
1a0060f0:	464b      	mov	r3, r9
1a0060f2:	4630      	mov	r0, r6
1a0060f4:	4639      	mov	r1, r7
1a0060f6:	f7fc fb15 	bl	1a002724 <__aeabi_ddiv>
1a0060fa:	f7fc fc99 	bl	1a002a30 <__aeabi_d2iz>
1a0060fe:	4682      	mov	sl, r0
1a006100:	f7fc f97c 	bl	1a0023fc <__aeabi_i2d>
1a006104:	4642      	mov	r2, r8
1a006106:	464b      	mov	r3, r9
1a006108:	f7fc f9e2 	bl	1a0024d0 <__aeabi_dmul>
1a00610c:	4602      	mov	r2, r0
1a00610e:	460b      	mov	r3, r1
1a006110:	4630      	mov	r0, r6
1a006112:	4639      	mov	r1, r7
1a006114:	f7fc f824 	bl	1a002160 <__aeabi_dsub>
1a006118:	3501      	adds	r5, #1
1a00611a:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a00611e:	45ab      	cmp	fp, r5
1a006120:	4606      	mov	r6, r0
1a006122:	460f      	mov	r7, r1
1a006124:	f04f 0200 	mov.w	r2, #0
1a006128:	4ba7      	ldr	r3, [pc, #668]	; (1a0063c8 <_dtoa_r+0x858>)
1a00612a:	f804 cb01 	strb.w	ip, [r4], #1
1a00612e:	d1d3      	bne.n	1a0060d8 <_dtoa_r+0x568>
1a006130:	f8dd b000 	ldr.w	fp, [sp]
1a006134:	f8cd a000 	str.w	sl, [sp]
1a006138:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00613c:	4632      	mov	r2, r6
1a00613e:	463b      	mov	r3, r7
1a006140:	4630      	mov	r0, r6
1a006142:	4639      	mov	r1, r7
1a006144:	f7fc f80e 	bl	1a002164 <__adddf3>
1a006148:	4642      	mov	r2, r8
1a00614a:	464b      	mov	r3, r9
1a00614c:	4606      	mov	r6, r0
1a00614e:	460f      	mov	r7, r1
1a006150:	f7fc fc4e 	bl	1a0029f0 <__aeabi_dcmpgt>
1a006154:	b960      	cbnz	r0, 1a006170 <_dtoa_r+0x600>
1a006156:	4642      	mov	r2, r8
1a006158:	464b      	mov	r3, r9
1a00615a:	4630      	mov	r0, r6
1a00615c:	4639      	mov	r1, r7
1a00615e:	f7fc fc1f 	bl	1a0029a0 <__aeabi_dcmpeq>
1a006162:	2800      	cmp	r0, #0
1a006164:	f43f af2b 	beq.w	1a005fbe <_dtoa_r+0x44e>
1a006168:	9b00      	ldr	r3, [sp, #0]
1a00616a:	07db      	lsls	r3, r3, #31
1a00616c:	f57f af27 	bpl.w	1a005fbe <_dtoa_r+0x44e>
1a006170:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a006174:	9a03      	ldr	r2, [sp, #12]
1a006176:	1e63      	subs	r3, r4, #1
1a006178:	e004      	b.n	1a006184 <_dtoa_r+0x614>
1a00617a:	429a      	cmp	r2, r3
1a00617c:	f000 83c0 	beq.w	1a006900 <_dtoa_r+0xd90>
1a006180:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a006184:	2d39      	cmp	r5, #57	; 0x39
1a006186:	f103 0401 	add.w	r4, r3, #1
1a00618a:	d0f6      	beq.n	1a00617a <_dtoa_r+0x60a>
1a00618c:	1c6a      	adds	r2, r5, #1
1a00618e:	b2d2      	uxtb	r2, r2
1a006190:	701a      	strb	r2, [r3, #0]
1a006192:	e714      	b.n	1a005fbe <_dtoa_r+0x44e>
1a006194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a006196:	2a00      	cmp	r2, #0
1a006198:	d03c      	beq.n	1a006214 <_dtoa_r+0x6a4>
1a00619a:	9a02      	ldr	r2, [sp, #8]
1a00619c:	2a01      	cmp	r2, #1
1a00619e:	f340 8258 	ble.w	1a006652 <_dtoa_r+0xae2>
1a0061a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0061a4:	1e5e      	subs	r6, r3, #1
1a0061a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0061a8:	42b3      	cmp	r3, r6
1a0061aa:	f280 8234 	bge.w	1a006616 <_dtoa_r+0xaa6>
1a0061ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0061b0:	960c      	str	r6, [sp, #48]	; 0x30
1a0061b2:	1af3      	subs	r3, r6, r3
1a0061b4:	4499      	add	r9, r3
1a0061b6:	2600      	movs	r6, #0
1a0061b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0061ba:	2b00      	cmp	r3, #0
1a0061bc:	f2c0 82f8 	blt.w	1a0067b0 <_dtoa_r+0xc40>
1a0061c0:	9a08      	ldr	r2, [sp, #32]
1a0061c2:	4614      	mov	r4, r2
1a0061c4:	441a      	add	r2, r3
1a0061c6:	4498      	add	r8, r3
1a0061c8:	9208      	str	r2, [sp, #32]
1a0061ca:	2101      	movs	r1, #1
1a0061cc:	4650      	mov	r0, sl
1a0061ce:	f000 ff7d 	bl	1a0070cc <__i2b>
1a0061d2:	4605      	mov	r5, r0
1a0061d4:	e021      	b.n	1a00621a <_dtoa_r+0x6aa>
1a0061d6:	2301      	movs	r3, #1
1a0061d8:	f1b8 0f00 	cmp.w	r8, #0
1a0061dc:	930d      	str	r3, [sp, #52]	; 0x34
1a0061de:	f6bf ad77 	bge.w	1a005cd0 <_dtoa_r+0x160>
1a0061e2:	f1c4 0301 	rsb	r3, r4, #1
1a0061e6:	9308      	str	r3, [sp, #32]
1a0061e8:	f04f 0800 	mov.w	r8, #0
1a0061ec:	e572      	b.n	1a005cd4 <_dtoa_r+0x164>
1a0061ee:	4648      	mov	r0, r9
1a0061f0:	f7fc f904 	bl	1a0023fc <__aeabi_i2d>
1a0061f4:	4632      	mov	r2, r6
1a0061f6:	463b      	mov	r3, r7
1a0061f8:	f7fc fbd2 	bl	1a0029a0 <__aeabi_dcmpeq>
1a0061fc:	2800      	cmp	r0, #0
1a0061fe:	f47f ad4d 	bne.w	1a005c9c <_dtoa_r+0x12c>
1a006202:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a006206:	e549      	b.n	1a005c9c <_dtoa_r+0x12c>
1a006208:	4b70      	ldr	r3, [pc, #448]	; (1a0063cc <_dtoa_r+0x85c>)
1a00620a:	9303      	str	r3, [sp, #12]
1a00620c:	9803      	ldr	r0, [sp, #12]
1a00620e:	b017      	add	sp, #92	; 0x5c
1a006210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006214:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a006216:	9c08      	ldr	r4, [sp, #32]
1a006218:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00621a:	2c00      	cmp	r4, #0
1a00621c:	dd0c      	ble.n	1a006238 <_dtoa_r+0x6c8>
1a00621e:	f1b8 0f00 	cmp.w	r8, #0
1a006222:	dd09      	ble.n	1a006238 <_dtoa_r+0x6c8>
1a006224:	4544      	cmp	r4, r8
1a006226:	9a08      	ldr	r2, [sp, #32]
1a006228:	4623      	mov	r3, r4
1a00622a:	bfa8      	it	ge
1a00622c:	4643      	movge	r3, r8
1a00622e:	1ad2      	subs	r2, r2, r3
1a006230:	9208      	str	r2, [sp, #32]
1a006232:	1ae4      	subs	r4, r4, r3
1a006234:	eba8 0803 	sub.w	r8, r8, r3
1a006238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00623a:	b1d3      	cbz	r3, 1a006272 <_dtoa_r+0x702>
1a00623c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00623e:	2b00      	cmp	r3, #0
1a006240:	f000 8189 	beq.w	1a006556 <_dtoa_r+0x9e6>
1a006244:	2e00      	cmp	r6, #0
1a006246:	dd10      	ble.n	1a00626a <_dtoa_r+0x6fa>
1a006248:	4629      	mov	r1, r5
1a00624a:	4632      	mov	r2, r6
1a00624c:	4650      	mov	r0, sl
1a00624e:	f000 ffdf 	bl	1a007210 <__pow5mult>
1a006252:	465a      	mov	r2, fp
1a006254:	4601      	mov	r1, r0
1a006256:	4605      	mov	r5, r0
1a006258:	4650      	mov	r0, sl
1a00625a:	f000 ff41 	bl	1a0070e0 <__multiply>
1a00625e:	4659      	mov	r1, fp
1a006260:	4607      	mov	r7, r0
1a006262:	4650      	mov	r0, sl
1a006264:	f000 fe92 	bl	1a006f8c <_Bfree>
1a006268:	46bb      	mov	fp, r7
1a00626a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00626c:	1b9a      	subs	r2, r3, r6
1a00626e:	f040 8173 	bne.w	1a006558 <_dtoa_r+0x9e8>
1a006272:	2101      	movs	r1, #1
1a006274:	4650      	mov	r0, sl
1a006276:	f000 ff29 	bl	1a0070cc <__i2b>
1a00627a:	f1b9 0f00 	cmp.w	r9, #0
1a00627e:	4607      	mov	r7, r0
1a006280:	f300 808e 	bgt.w	1a0063a0 <_dtoa_r+0x830>
1a006284:	9b02      	ldr	r3, [sp, #8]
1a006286:	2b01      	cmp	r3, #1
1a006288:	f340 8171 	ble.w	1a00656e <_dtoa_r+0x9fe>
1a00628c:	2600      	movs	r6, #0
1a00628e:	2001      	movs	r0, #1
1a006290:	f1b9 0f00 	cmp.w	r9, #0
1a006294:	f040 808f 	bne.w	1a0063b6 <_dtoa_r+0x846>
1a006298:	4440      	add	r0, r8
1a00629a:	f010 001f 	ands.w	r0, r0, #31
1a00629e:	d075      	beq.n	1a00638c <_dtoa_r+0x81c>
1a0062a0:	f1c0 0320 	rsb	r3, r0, #32
1a0062a4:	2b04      	cmp	r3, #4
1a0062a6:	f340 836d 	ble.w	1a006984 <_dtoa_r+0xe14>
1a0062aa:	f1c0 001c 	rsb	r0, r0, #28
1a0062ae:	9b08      	ldr	r3, [sp, #32]
1a0062b0:	4403      	add	r3, r0
1a0062b2:	9308      	str	r3, [sp, #32]
1a0062b4:	4404      	add	r4, r0
1a0062b6:	4480      	add	r8, r0
1a0062b8:	9b08      	ldr	r3, [sp, #32]
1a0062ba:	2b00      	cmp	r3, #0
1a0062bc:	dd05      	ble.n	1a0062ca <_dtoa_r+0x75a>
1a0062be:	4659      	mov	r1, fp
1a0062c0:	461a      	mov	r2, r3
1a0062c2:	4650      	mov	r0, sl
1a0062c4:	f000 fff4 	bl	1a0072b0 <__lshift>
1a0062c8:	4683      	mov	fp, r0
1a0062ca:	f1b8 0f00 	cmp.w	r8, #0
1a0062ce:	dd05      	ble.n	1a0062dc <_dtoa_r+0x76c>
1a0062d0:	4639      	mov	r1, r7
1a0062d2:	4642      	mov	r2, r8
1a0062d4:	4650      	mov	r0, sl
1a0062d6:	f000 ffeb 	bl	1a0072b0 <__lshift>
1a0062da:	4607      	mov	r7, r0
1a0062dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0062de:	2b00      	cmp	r3, #0
1a0062e0:	f040 811e 	bne.w	1a006520 <_dtoa_r+0x9b0>
1a0062e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0062e6:	2b00      	cmp	r3, #0
1a0062e8:	f340 80f5 	ble.w	1a0064d6 <_dtoa_r+0x966>
1a0062ec:	9b06      	ldr	r3, [sp, #24]
1a0062ee:	3301      	adds	r3, #1
1a0062f0:	9306      	str	r3, [sp, #24]
1a0062f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0062f4:	2b00      	cmp	r3, #0
1a0062f6:	d177      	bne.n	1a0063e8 <_dtoa_r+0x878>
1a0062f8:	9c03      	ldr	r4, [sp, #12]
1a0062fa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0062fe:	2601      	movs	r6, #1
1a006300:	e003      	b.n	1a00630a <_dtoa_r+0x79a>
1a006302:	f000 fe4d 	bl	1a006fa0 <__multadd>
1a006306:	3601      	adds	r6, #1
1a006308:	4683      	mov	fp, r0
1a00630a:	4639      	mov	r1, r7
1a00630c:	4658      	mov	r0, fp
1a00630e:	f7ff fb9b 	bl	1a005a48 <quorem>
1a006312:	4546      	cmp	r6, r8
1a006314:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a006318:	f804 9b01 	strb.w	r9, [r4], #1
1a00631c:	f04f 0300 	mov.w	r3, #0
1a006320:	f04f 020a 	mov.w	r2, #10
1a006324:	4659      	mov	r1, fp
1a006326:	4650      	mov	r0, sl
1a006328:	dbeb      	blt.n	1a006302 <_dtoa_r+0x792>
1a00632a:	2300      	movs	r3, #0
1a00632c:	9300      	str	r3, [sp, #0]
1a00632e:	4659      	mov	r1, fp
1a006330:	2201      	movs	r2, #1
1a006332:	4650      	mov	r0, sl
1a006334:	f000 ffbc 	bl	1a0072b0 <__lshift>
1a006338:	4639      	mov	r1, r7
1a00633a:	4683      	mov	fp, r0
1a00633c:	f001 f812 	bl	1a007364 <__mcmp>
1a006340:	2800      	cmp	r0, #0
1a006342:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a006346:	f340 816f 	ble.w	1a006628 <_dtoa_r+0xab8>
1a00634a:	1e63      	subs	r3, r4, #1
1a00634c:	9903      	ldr	r1, [sp, #12]
1a00634e:	e004      	b.n	1a00635a <_dtoa_r+0x7ea>
1a006350:	4299      	cmp	r1, r3
1a006352:	f000 8177 	beq.w	1a006644 <_dtoa_r+0xad4>
1a006356:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00635a:	2a39      	cmp	r2, #57	; 0x39
1a00635c:	f103 0401 	add.w	r4, r3, #1
1a006360:	d0f6      	beq.n	1a006350 <_dtoa_r+0x7e0>
1a006362:	3201      	adds	r2, #1
1a006364:	701a      	strb	r2, [r3, #0]
1a006366:	4639      	mov	r1, r7
1a006368:	4650      	mov	r0, sl
1a00636a:	f000 fe0f 	bl	1a006f8c <_Bfree>
1a00636e:	2d00      	cmp	r5, #0
1a006370:	f43f ae25 	beq.w	1a005fbe <_dtoa_r+0x44e>
1a006374:	9900      	ldr	r1, [sp, #0]
1a006376:	b121      	cbz	r1, 1a006382 <_dtoa_r+0x812>
1a006378:	42a9      	cmp	r1, r5
1a00637a:	d002      	beq.n	1a006382 <_dtoa_r+0x812>
1a00637c:	4650      	mov	r0, sl
1a00637e:	f000 fe05 	bl	1a006f8c <_Bfree>
1a006382:	4629      	mov	r1, r5
1a006384:	4650      	mov	r0, sl
1a006386:	f000 fe01 	bl	1a006f8c <_Bfree>
1a00638a:	e618      	b.n	1a005fbe <_dtoa_r+0x44e>
1a00638c:	201c      	movs	r0, #28
1a00638e:	e78e      	b.n	1a0062ae <_dtoa_r+0x73e>
1a006390:	2401      	movs	r4, #1
1a006392:	e4b6      	b.n	1a005d02 <_dtoa_r+0x192>
1a006394:	f1c3 0620 	rsb	r6, r3, #32
1a006398:	9b00      	ldr	r3, [sp, #0]
1a00639a:	fa03 f006 	lsl.w	r0, r3, r6
1a00639e:	e447      	b.n	1a005c30 <_dtoa_r+0xc0>
1a0063a0:	4601      	mov	r1, r0
1a0063a2:	464a      	mov	r2, r9
1a0063a4:	4650      	mov	r0, sl
1a0063a6:	f000 ff33 	bl	1a007210 <__pow5mult>
1a0063aa:	9b02      	ldr	r3, [sp, #8]
1a0063ac:	2b01      	cmp	r3, #1
1a0063ae:	4607      	mov	r7, r0
1a0063b0:	f340 81b2 	ble.w	1a006718 <_dtoa_r+0xba8>
1a0063b4:	2600      	movs	r6, #0
1a0063b6:	693b      	ldr	r3, [r7, #16]
1a0063b8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a0063bc:	6918      	ldr	r0, [r3, #16]
1a0063be:	f000 fe35 	bl	1a00702c <__hi0bits>
1a0063c2:	f1c0 0020 	rsb	r0, r0, #32
1a0063c6:	e767      	b.n	1a006298 <_dtoa_r+0x728>
1a0063c8:	40240000 	.word	0x40240000
1a0063cc:	1a0080fc 	.word	0x1a0080fc
1a0063d0:	4629      	mov	r1, r5
1a0063d2:	2300      	movs	r3, #0
1a0063d4:	220a      	movs	r2, #10
1a0063d6:	4650      	mov	r0, sl
1a0063d8:	f000 fde2 	bl	1a006fa0 <__multadd>
1a0063dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0063de:	2b00      	cmp	r3, #0
1a0063e0:	4605      	mov	r5, r0
1a0063e2:	f340 82c1 	ble.w	1a006968 <_dtoa_r+0xdf8>
1a0063e6:	9309      	str	r3, [sp, #36]	; 0x24
1a0063e8:	2c00      	cmp	r4, #0
1a0063ea:	f300 810d 	bgt.w	1a006608 <_dtoa_r+0xa98>
1a0063ee:	2e00      	cmp	r6, #0
1a0063f0:	f040 81c5 	bne.w	1a00677e <_dtoa_r+0xc0e>
1a0063f4:	46a8      	mov	r8, r5
1a0063f6:	9b00      	ldr	r3, [sp, #0]
1a0063f8:	9902      	ldr	r1, [sp, #8]
1a0063fa:	9e03      	ldr	r6, [sp, #12]
1a0063fc:	f003 0201 	and.w	r2, r3, #1
1a006400:	920b      	str	r2, [sp, #44]	; 0x2c
1a006402:	430a      	orrs	r2, r1
1a006404:	920a      	str	r2, [sp, #40]	; 0x28
1a006406:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a006408:	1e73      	subs	r3, r6, #1
1a00640a:	441a      	add	r2, r3
1a00640c:	9209      	str	r2, [sp, #36]	; 0x24
1a00640e:	463c      	mov	r4, r7
1a006410:	4621      	mov	r1, r4
1a006412:	4658      	mov	r0, fp
1a006414:	f7ff fb18 	bl	1a005a48 <quorem>
1a006418:	4629      	mov	r1, r5
1a00641a:	9000      	str	r0, [sp, #0]
1a00641c:	4658      	mov	r0, fp
1a00641e:	f000 ffa1 	bl	1a007364 <__mcmp>
1a006422:	4642      	mov	r2, r8
1a006424:	4607      	mov	r7, r0
1a006426:	4621      	mov	r1, r4
1a006428:	4650      	mov	r0, sl
1a00642a:	f000 ffb7 	bl	1a00739c <__mdiff>
1a00642e:	9b00      	ldr	r3, [sp, #0]
1a006430:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a006434:	68c3      	ldr	r3, [r0, #12]
1a006436:	4681      	mov	r9, r0
1a006438:	2b00      	cmp	r3, #0
1a00643a:	d13e      	bne.n	1a0064ba <_dtoa_r+0x94a>
1a00643c:	4601      	mov	r1, r0
1a00643e:	4658      	mov	r0, fp
1a006440:	9208      	str	r2, [sp, #32]
1a006442:	f000 ff8f 	bl	1a007364 <__mcmp>
1a006446:	4649      	mov	r1, r9
1a006448:	9004      	str	r0, [sp, #16]
1a00644a:	4650      	mov	r0, sl
1a00644c:	f000 fd9e 	bl	1a006f8c <_Bfree>
1a006450:	9b04      	ldr	r3, [sp, #16]
1a006452:	9a08      	ldr	r2, [sp, #32]
1a006454:	b91b      	cbnz	r3, 1a00645e <_dtoa_r+0x8ee>
1a006456:	990a      	ldr	r1, [sp, #40]	; 0x28
1a006458:	2900      	cmp	r1, #0
1a00645a:	f000 8271 	beq.w	1a006940 <_dtoa_r+0xdd0>
1a00645e:	2f00      	cmp	r7, #0
1a006460:	f106 0901 	add.w	r9, r6, #1
1a006464:	f2c0 816e 	blt.w	1a006744 <_dtoa_r+0xbd4>
1a006468:	9902      	ldr	r1, [sp, #8]
1a00646a:	430f      	orrs	r7, r1
1a00646c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00646e:	4339      	orrs	r1, r7
1a006470:	f000 8168 	beq.w	1a006744 <_dtoa_r+0xbd4>
1a006474:	2b00      	cmp	r3, #0
1a006476:	f300 81a2 	bgt.w	1a0067be <_dtoa_r+0xc4e>
1a00647a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00647c:	7032      	strb	r2, [r6, #0]
1a00647e:	42b3      	cmp	r3, r6
1a006480:	f000 81a9 	beq.w	1a0067d6 <_dtoa_r+0xc66>
1a006484:	4659      	mov	r1, fp
1a006486:	2300      	movs	r3, #0
1a006488:	220a      	movs	r2, #10
1a00648a:	4650      	mov	r0, sl
1a00648c:	f000 fd88 	bl	1a006fa0 <__multadd>
1a006490:	4545      	cmp	r5, r8
1a006492:	4683      	mov	fp, r0
1a006494:	4629      	mov	r1, r5
1a006496:	f04f 0300 	mov.w	r3, #0
1a00649a:	f04f 020a 	mov.w	r2, #10
1a00649e:	4650      	mov	r0, sl
1a0064a0:	d013      	beq.n	1a0064ca <_dtoa_r+0x95a>
1a0064a2:	f000 fd7d 	bl	1a006fa0 <__multadd>
1a0064a6:	4641      	mov	r1, r8
1a0064a8:	4605      	mov	r5, r0
1a0064aa:	2300      	movs	r3, #0
1a0064ac:	220a      	movs	r2, #10
1a0064ae:	4650      	mov	r0, sl
1a0064b0:	f000 fd76 	bl	1a006fa0 <__multadd>
1a0064b4:	464e      	mov	r6, r9
1a0064b6:	4680      	mov	r8, r0
1a0064b8:	e7aa      	b.n	1a006410 <_dtoa_r+0x8a0>
1a0064ba:	4601      	mov	r1, r0
1a0064bc:	4650      	mov	r0, sl
1a0064be:	9204      	str	r2, [sp, #16]
1a0064c0:	f000 fd64 	bl	1a006f8c <_Bfree>
1a0064c4:	2301      	movs	r3, #1
1a0064c6:	9a04      	ldr	r2, [sp, #16]
1a0064c8:	e7c9      	b.n	1a00645e <_dtoa_r+0x8ee>
1a0064ca:	f000 fd69 	bl	1a006fa0 <__multadd>
1a0064ce:	464e      	mov	r6, r9
1a0064d0:	4605      	mov	r5, r0
1a0064d2:	4680      	mov	r8, r0
1a0064d4:	e79c      	b.n	1a006410 <_dtoa_r+0x8a0>
1a0064d6:	9b02      	ldr	r3, [sp, #8]
1a0064d8:	2b02      	cmp	r3, #2
1a0064da:	f340 8082 	ble.w	1a0065e2 <_dtoa_r+0xa72>
1a0064de:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0064e0:	2b00      	cmp	r3, #0
1a0064e2:	f47f adae 	bne.w	1a006042 <_dtoa_r+0x4d2>
1a0064e6:	4639      	mov	r1, r7
1a0064e8:	2205      	movs	r2, #5
1a0064ea:	4650      	mov	r0, sl
1a0064ec:	f000 fd58 	bl	1a006fa0 <__multadd>
1a0064f0:	4601      	mov	r1, r0
1a0064f2:	4607      	mov	r7, r0
1a0064f4:	4658      	mov	r0, fp
1a0064f6:	f000 ff35 	bl	1a007364 <__mcmp>
1a0064fa:	2800      	cmp	r0, #0
1a0064fc:	f77f ada1 	ble.w	1a006042 <_dtoa_r+0x4d2>
1a006500:	9c03      	ldr	r4, [sp, #12]
1a006502:	9b06      	ldr	r3, [sp, #24]
1a006504:	2231      	movs	r2, #49	; 0x31
1a006506:	f804 2b01 	strb.w	r2, [r4], #1
1a00650a:	3301      	adds	r3, #1
1a00650c:	3301      	adds	r3, #1
1a00650e:	4639      	mov	r1, r7
1a006510:	4650      	mov	r0, sl
1a006512:	9306      	str	r3, [sp, #24]
1a006514:	f000 fd3a 	bl	1a006f8c <_Bfree>
1a006518:	2d00      	cmp	r5, #0
1a00651a:	f47f af32 	bne.w	1a006382 <_dtoa_r+0x812>
1a00651e:	e54e      	b.n	1a005fbe <_dtoa_r+0x44e>
1a006520:	4639      	mov	r1, r7
1a006522:	4658      	mov	r0, fp
1a006524:	f000 ff1e 	bl	1a007364 <__mcmp>
1a006528:	2800      	cmp	r0, #0
1a00652a:	f6bf aedb 	bge.w	1a0062e4 <_dtoa_r+0x774>
1a00652e:	4659      	mov	r1, fp
1a006530:	2300      	movs	r3, #0
1a006532:	220a      	movs	r2, #10
1a006534:	4650      	mov	r0, sl
1a006536:	f000 fd33 	bl	1a006fa0 <__multadd>
1a00653a:	9b06      	ldr	r3, [sp, #24]
1a00653c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a006540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006542:	4683      	mov	fp, r0
1a006544:	2b00      	cmp	r3, #0
1a006546:	f47f af43 	bne.w	1a0063d0 <_dtoa_r+0x860>
1a00654a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00654c:	2b00      	cmp	r3, #0
1a00654e:	f340 8202 	ble.w	1a006956 <_dtoa_r+0xde6>
1a006552:	9309      	str	r3, [sp, #36]	; 0x24
1a006554:	e6d0      	b.n	1a0062f8 <_dtoa_r+0x788>
1a006556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006558:	4659      	mov	r1, fp
1a00655a:	4650      	mov	r0, sl
1a00655c:	f000 fe58 	bl	1a007210 <__pow5mult>
1a006560:	4683      	mov	fp, r0
1a006562:	e686      	b.n	1a006272 <_dtoa_r+0x702>
1a006564:	4b9f      	ldr	r3, [pc, #636]	; (1a0067e4 <_dtoa_r+0xc74>)
1a006566:	9303      	str	r3, [sp, #12]
1a006568:	3303      	adds	r3, #3
1a00656a:	f7ff bbe5 	b.w	1a005d38 <_dtoa_r+0x1c8>
1a00656e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a006572:	2900      	cmp	r1, #0
1a006574:	f47f ae8a 	bne.w	1a00628c <_dtoa_r+0x71c>
1a006578:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00657c:	2b00      	cmp	r3, #0
1a00657e:	f000 80d5 	beq.w	1a00672c <_dtoa_r+0xbbc>
1a006582:	9e00      	ldr	r6, [sp, #0]
1a006584:	e683      	b.n	1a00628e <_dtoa_r+0x71e>
1a006586:	2301      	movs	r3, #1
1a006588:	930b      	str	r3, [sp, #44]	; 0x2c
1a00658a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00658c:	2800      	cmp	r0, #0
1a00658e:	dd46      	ble.n	1a00661e <_dtoa_r+0xaae>
1a006590:	900f      	str	r0, [sp, #60]	; 0x3c
1a006592:	9009      	str	r0, [sp, #36]	; 0x24
1a006594:	2100      	movs	r1, #0
1a006596:	2817      	cmp	r0, #23
1a006598:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00659c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00659e:	f77f ac19 	ble.w	1a005dd4 <_dtoa_r+0x264>
1a0065a2:	2201      	movs	r2, #1
1a0065a4:	2304      	movs	r3, #4
1a0065a6:	005b      	lsls	r3, r3, #1
1a0065a8:	f103 0614 	add.w	r6, r3, #20
1a0065ac:	42b0      	cmp	r0, r6
1a0065ae:	4611      	mov	r1, r2
1a0065b0:	f102 0201 	add.w	r2, r2, #1
1a0065b4:	d2f7      	bcs.n	1a0065a6 <_dtoa_r+0xa36>
1a0065b6:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a0065ba:	e40b      	b.n	1a005dd4 <_dtoa_r+0x264>
1a0065bc:	2301      	movs	r3, #1
1a0065be:	930b      	str	r3, [sp, #44]	; 0x2c
1a0065c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0065c2:	9a06      	ldr	r2, [sp, #24]
1a0065c4:	4413      	add	r3, r2
1a0065c6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0065c8:	3301      	adds	r3, #1
1a0065ca:	2b01      	cmp	r3, #1
1a0065cc:	4618      	mov	r0, r3
1a0065ce:	9309      	str	r3, [sp, #36]	; 0x24
1a0065d0:	bfb8      	it	lt
1a0065d2:	2001      	movlt	r0, #1
1a0065d4:	e7de      	b.n	1a006594 <_dtoa_r+0xa24>
1a0065d6:	2300      	movs	r3, #0
1a0065d8:	930b      	str	r3, [sp, #44]	; 0x2c
1a0065da:	e7f1      	b.n	1a0065c0 <_dtoa_r+0xa50>
1a0065dc:	2300      	movs	r3, #0
1a0065de:	930b      	str	r3, [sp, #44]	; 0x2c
1a0065e0:	e7d3      	b.n	1a00658a <_dtoa_r+0xa1a>
1a0065e2:	9b06      	ldr	r3, [sp, #24]
1a0065e4:	3301      	adds	r3, #1
1a0065e6:	9306      	str	r3, [sp, #24]
1a0065e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0065ea:	2b00      	cmp	r3, #0
1a0065ec:	f47f aefc 	bne.w	1a0063e8 <_dtoa_r+0x878>
1a0065f0:	4639      	mov	r1, r7
1a0065f2:	4658      	mov	r0, fp
1a0065f4:	f7ff fa28 	bl	1a005a48 <quorem>
1a0065f8:	9c03      	ldr	r4, [sp, #12]
1a0065fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0065fe:	2300      	movs	r3, #0
1a006600:	f804 9b01 	strb.w	r9, [r4], #1
1a006604:	9300      	str	r3, [sp, #0]
1a006606:	e692      	b.n	1a00632e <_dtoa_r+0x7be>
1a006608:	4629      	mov	r1, r5
1a00660a:	4622      	mov	r2, r4
1a00660c:	4650      	mov	r0, sl
1a00660e:	f000 fe4f 	bl	1a0072b0 <__lshift>
1a006612:	4605      	mov	r5, r0
1a006614:	e6eb      	b.n	1a0063ee <_dtoa_r+0x87e>
1a006616:	1b9e      	subs	r6, r3, r6
1a006618:	e5ce      	b.n	1a0061b8 <_dtoa_r+0x648>
1a00661a:	2602      	movs	r6, #2
1a00661c:	e403      	b.n	1a005e26 <_dtoa_r+0x2b6>
1a00661e:	2501      	movs	r5, #1
1a006620:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a006624:	f7ff bbd2 	b.w	1a005dcc <_dtoa_r+0x25c>
1a006628:	d103      	bne.n	1a006632 <_dtoa_r+0xac2>
1a00662a:	f019 0f01 	tst.w	r9, #1
1a00662e:	f47f ae8c 	bne.w	1a00634a <_dtoa_r+0x7da>
1a006632:	1e63      	subs	r3, r4, #1
1a006634:	e001      	b.n	1a00663a <_dtoa_r+0xaca>
1a006636:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00663a:	2a30      	cmp	r2, #48	; 0x30
1a00663c:	f103 0401 	add.w	r4, r3, #1
1a006640:	d0f9      	beq.n	1a006636 <_dtoa_r+0xac6>
1a006642:	e690      	b.n	1a006366 <_dtoa_r+0x7f6>
1a006644:	9a06      	ldr	r2, [sp, #24]
1a006646:	3201      	adds	r2, #1
1a006648:	9206      	str	r2, [sp, #24]
1a00664a:	9a03      	ldr	r2, [sp, #12]
1a00664c:	2331      	movs	r3, #49	; 0x31
1a00664e:	7013      	strb	r3, [r2, #0]
1a006650:	e689      	b.n	1a006366 <_dtoa_r+0x7f6>
1a006652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a006654:	2a00      	cmp	r2, #0
1a006656:	f000 8126 	beq.w	1a0068a6 <_dtoa_r+0xd36>
1a00665a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a00665e:	9a08      	ldr	r2, [sp, #32]
1a006660:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a006662:	4614      	mov	r4, r2
1a006664:	441a      	add	r2, r3
1a006666:	4498      	add	r8, r3
1a006668:	9208      	str	r2, [sp, #32]
1a00666a:	e5ae      	b.n	1a0061ca <_dtoa_r+0x65a>
1a00666c:	4630      	mov	r0, r6
1a00666e:	f7fb fec5 	bl	1a0023fc <__aeabi_i2d>
1a006672:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006676:	f7fb ff2b 	bl	1a0024d0 <__aeabi_dmul>
1a00667a:	2200      	movs	r2, #0
1a00667c:	4b5a      	ldr	r3, [pc, #360]	; (1a0067e8 <_dtoa_r+0xc78>)
1a00667e:	f7fb fd71 	bl	1a002164 <__adddf3>
1a006682:	4604      	mov	r4, r0
1a006684:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a006688:	2200      	movs	r2, #0
1a00668a:	4b58      	ldr	r3, [pc, #352]	; (1a0067ec <_dtoa_r+0xc7c>)
1a00668c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006690:	f7fb fd66 	bl	1a002160 <__aeabi_dsub>
1a006694:	4622      	mov	r2, r4
1a006696:	462b      	mov	r3, r5
1a006698:	4606      	mov	r6, r0
1a00669a:	460f      	mov	r7, r1
1a00669c:	f7fc f9a8 	bl	1a0029f0 <__aeabi_dcmpgt>
1a0066a0:	2800      	cmp	r0, #0
1a0066a2:	f040 8089 	bne.w	1a0067b8 <_dtoa_r+0xc48>
1a0066a6:	4622      	mov	r2, r4
1a0066a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a0066ac:	4630      	mov	r0, r6
1a0066ae:	4639      	mov	r1, r7
1a0066b0:	f7fc f980 	bl	1a0029b4 <__aeabi_dcmplt>
1a0066b4:	2800      	cmp	r0, #0
1a0066b6:	f43f ac9c 	beq.w	1a005ff2 <_dtoa_r+0x482>
1a0066ba:	2700      	movs	r7, #0
1a0066bc:	463d      	mov	r5, r7
1a0066be:	e4c0      	b.n	1a006042 <_dtoa_r+0x4d2>
1a0066c0:	f000 80f5 	beq.w	1a0068ae <_dtoa_r+0xd3e>
1a0066c4:	9b06      	ldr	r3, [sp, #24]
1a0066c6:	425c      	negs	r4, r3
1a0066c8:	4b49      	ldr	r3, [pc, #292]	; (1a0067f0 <_dtoa_r+0xc80>)
1a0066ca:	f004 020f 	and.w	r2, r4, #15
1a0066ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0066d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0066da:	f7fb fef9 	bl	1a0024d0 <__aeabi_dmul>
1a0066de:	1124      	asrs	r4, r4, #4
1a0066e0:	e9cd 0100 	strd	r0, r1, [sp]
1a0066e4:	f000 80e3 	beq.w	1a0068ae <_dtoa_r+0xd3e>
1a0066e8:	4d42      	ldr	r5, [pc, #264]	; (1a0067f4 <_dtoa_r+0xc84>)
1a0066ea:	2300      	movs	r3, #0
1a0066ec:	2602      	movs	r6, #2
1a0066ee:	07e2      	lsls	r2, r4, #31
1a0066f0:	d505      	bpl.n	1a0066fe <_dtoa_r+0xb8e>
1a0066f2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a0066f6:	f7fb feeb 	bl	1a0024d0 <__aeabi_dmul>
1a0066fa:	3601      	adds	r6, #1
1a0066fc:	2301      	movs	r3, #1
1a0066fe:	1064      	asrs	r4, r4, #1
1a006700:	f105 0508 	add.w	r5, r5, #8
1a006704:	d1f3      	bne.n	1a0066ee <_dtoa_r+0xb7e>
1a006706:	2b00      	cmp	r3, #0
1a006708:	f43f aba6 	beq.w	1a005e58 <_dtoa_r+0x2e8>
1a00670c:	e9cd 0100 	strd	r0, r1, [sp]
1a006710:	f7ff bba2 	b.w	1a005e58 <_dtoa_r+0x2e8>
1a006714:	900d      	str	r0, [sp, #52]	; 0x34
1a006716:	e564      	b.n	1a0061e2 <_dtoa_r+0x672>
1a006718:	e9dd 1200 	ldrd	r1, r2, [sp]
1a00671c:	2900      	cmp	r1, #0
1a00671e:	f47f ae49 	bne.w	1a0063b4 <_dtoa_r+0x844>
1a006722:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a006726:	2b00      	cmp	r3, #0
1a006728:	f47f ae44 	bne.w	1a0063b4 <_dtoa_r+0x844>
1a00672c:	4e32      	ldr	r6, [pc, #200]	; (1a0067f8 <_dtoa_r+0xc88>)
1a00672e:	4016      	ands	r6, r2
1a006730:	2e00      	cmp	r6, #0
1a006732:	f43f adac 	beq.w	1a00628e <_dtoa_r+0x71e>
1a006736:	9b08      	ldr	r3, [sp, #32]
1a006738:	3301      	adds	r3, #1
1a00673a:	9308      	str	r3, [sp, #32]
1a00673c:	f108 0801 	add.w	r8, r8, #1
1a006740:	2601      	movs	r6, #1
1a006742:	e5a4      	b.n	1a00628e <_dtoa_r+0x71e>
1a006744:	2b00      	cmp	r3, #0
1a006746:	4627      	mov	r7, r4
1a006748:	464c      	mov	r4, r9
1a00674a:	4691      	mov	r9, r2
1a00674c:	dd12      	ble.n	1a006774 <_dtoa_r+0xc04>
1a00674e:	4659      	mov	r1, fp
1a006750:	2201      	movs	r2, #1
1a006752:	4650      	mov	r0, sl
1a006754:	f000 fdac 	bl	1a0072b0 <__lshift>
1a006758:	4639      	mov	r1, r7
1a00675a:	4683      	mov	fp, r0
1a00675c:	f000 fe02 	bl	1a007364 <__mcmp>
1a006760:	2800      	cmp	r0, #0
1a006762:	f340 80df 	ble.w	1a006924 <_dtoa_r+0xdb4>
1a006766:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a00676a:	f000 80d0 	beq.w	1a00690e <_dtoa_r+0xd9e>
1a00676e:	9b00      	ldr	r3, [sp, #0]
1a006770:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a006774:	9500      	str	r5, [sp, #0]
1a006776:	f886 9000 	strb.w	r9, [r6]
1a00677a:	4645      	mov	r5, r8
1a00677c:	e5f3      	b.n	1a006366 <_dtoa_r+0x7f6>
1a00677e:	6869      	ldr	r1, [r5, #4]
1a006780:	4650      	mov	r0, sl
1a006782:	f000 fbdd 	bl	1a006f40 <_Balloc>
1a006786:	692b      	ldr	r3, [r5, #16]
1a006788:	3302      	adds	r3, #2
1a00678a:	009a      	lsls	r2, r3, #2
1a00678c:	4604      	mov	r4, r0
1a00678e:	f105 010c 	add.w	r1, r5, #12
1a006792:	300c      	adds	r0, #12
1a006794:	f7fd f8ea 	bl	1a00396c <memcpy>
1a006798:	4621      	mov	r1, r4
1a00679a:	2201      	movs	r2, #1
1a00679c:	4650      	mov	r0, sl
1a00679e:	f000 fd87 	bl	1a0072b0 <__lshift>
1a0067a2:	4680      	mov	r8, r0
1a0067a4:	e627      	b.n	1a0063f6 <_dtoa_r+0x886>
1a0067a6:	f8dd b000 	ldr.w	fp, [sp]
1a0067aa:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0067ae:	e406      	b.n	1a005fbe <_dtoa_r+0x44e>
1a0067b0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a0067b4:	1a9c      	subs	r4, r3, r2
1a0067b6:	e508      	b.n	1a0061ca <_dtoa_r+0x65a>
1a0067b8:	2700      	movs	r7, #0
1a0067ba:	463d      	mov	r5, r7
1a0067bc:	e6a0      	b.n	1a006500 <_dtoa_r+0x990>
1a0067be:	2a39      	cmp	r2, #57	; 0x39
1a0067c0:	4627      	mov	r7, r4
1a0067c2:	464c      	mov	r4, r9
1a0067c4:	f000 80a3 	beq.w	1a00690e <_dtoa_r+0xd9e>
1a0067c8:	f102 0901 	add.w	r9, r2, #1
1a0067cc:	9500      	str	r5, [sp, #0]
1a0067ce:	f886 9000 	strb.w	r9, [r6]
1a0067d2:	4645      	mov	r5, r8
1a0067d4:	e5c7      	b.n	1a006366 <_dtoa_r+0x7f6>
1a0067d6:	4627      	mov	r7, r4
1a0067d8:	9500      	str	r5, [sp, #0]
1a0067da:	464c      	mov	r4, r9
1a0067dc:	4645      	mov	r5, r8
1a0067de:	4691      	mov	r9, r2
1a0067e0:	e5a5      	b.n	1a00632e <_dtoa_r+0x7be>
1a0067e2:	bf00      	nop
1a0067e4:	1a008120 	.word	0x1a008120
1a0067e8:	401c0000 	.word	0x401c0000
1a0067ec:	40140000 	.word	0x40140000
1a0067f0:	1a008158 	.word	0x1a008158
1a0067f4:	1a008130 	.word	0x1a008130
1a0067f8:	7ff00000 	.word	0x7ff00000
1a0067fc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006800:	f7fb fe66 	bl	1a0024d0 <__aeabi_dmul>
1a006804:	9b03      	ldr	r3, [sp, #12]
1a006806:	701d      	strb	r5, [r3, #0]
1a006808:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00680a:	2b01      	cmp	r3, #1
1a00680c:	e9cd 0100 	strd	r0, r1, [sp]
1a006810:	d023      	beq.n	1a00685a <_dtoa_r+0xcea>
1a006812:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a006814:	9a03      	ldr	r2, [sp, #12]
1a006816:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a00681a:	4413      	add	r3, r2
1a00681c:	46c1      	mov	r9, r8
1a00681e:	4698      	mov	r8, r3
1a006820:	2200      	movs	r2, #0
1a006822:	4b64      	ldr	r3, [pc, #400]	; (1a0069b4 <_dtoa_r+0xe44>)
1a006824:	4630      	mov	r0, r6
1a006826:	4639      	mov	r1, r7
1a006828:	f7fb fe52 	bl	1a0024d0 <__aeabi_dmul>
1a00682c:	460f      	mov	r7, r1
1a00682e:	4606      	mov	r6, r0
1a006830:	f7fc f8fe 	bl	1a002a30 <__aeabi_d2iz>
1a006834:	4605      	mov	r5, r0
1a006836:	f7fb fde1 	bl	1a0023fc <__aeabi_i2d>
1a00683a:	3530      	adds	r5, #48	; 0x30
1a00683c:	4602      	mov	r2, r0
1a00683e:	460b      	mov	r3, r1
1a006840:	4630      	mov	r0, r6
1a006842:	4639      	mov	r1, r7
1a006844:	f7fb fc8c 	bl	1a002160 <__aeabi_dsub>
1a006848:	f804 5b01 	strb.w	r5, [r4], #1
1a00684c:	45a0      	cmp	r8, r4
1a00684e:	4606      	mov	r6, r0
1a006850:	460f      	mov	r7, r1
1a006852:	d1e5      	bne.n	1a006820 <_dtoa_r+0xcb0>
1a006854:	46c8      	mov	r8, r9
1a006856:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a00685a:	4b57      	ldr	r3, [pc, #348]	; (1a0069b8 <_dtoa_r+0xe48>)
1a00685c:	2200      	movs	r2, #0
1a00685e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a006862:	f7fb fc7f 	bl	1a002164 <__adddf3>
1a006866:	4632      	mov	r2, r6
1a006868:	463b      	mov	r3, r7
1a00686a:	f7fc f8a3 	bl	1a0029b4 <__aeabi_dcmplt>
1a00686e:	2800      	cmp	r0, #0
1a006870:	d152      	bne.n	1a006918 <_dtoa_r+0xda8>
1a006872:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006876:	2000      	movs	r0, #0
1a006878:	494f      	ldr	r1, [pc, #316]	; (1a0069b8 <_dtoa_r+0xe48>)
1a00687a:	f7fb fc71 	bl	1a002160 <__aeabi_dsub>
1a00687e:	4632      	mov	r2, r6
1a006880:	463b      	mov	r3, r7
1a006882:	f7fc f8b5 	bl	1a0029f0 <__aeabi_dcmpgt>
1a006886:	2800      	cmp	r0, #0
1a006888:	f43f abb3 	beq.w	1a005ff2 <_dtoa_r+0x482>
1a00688c:	e000      	b.n	1a006890 <_dtoa_r+0xd20>
1a00688e:	4614      	mov	r4, r2
1a006890:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a006894:	2b30      	cmp	r3, #48	; 0x30
1a006896:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a00689a:	d0f8      	beq.n	1a00688e <_dtoa_r+0xd1e>
1a00689c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00689e:	3301      	adds	r3, #1
1a0068a0:	9306      	str	r3, [sp, #24]
1a0068a2:	f7ff bb8c 	b.w	1a005fbe <_dtoa_r+0x44e>
1a0068a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0068a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a0068ac:	e6d7      	b.n	1a00665e <_dtoa_r+0xaee>
1a0068ae:	2602      	movs	r6, #2
1a0068b0:	f7ff bad2 	b.w	1a005e58 <_dtoa_r+0x2e8>
1a0068b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0068b6:	2b00      	cmp	r3, #0
1a0068b8:	f43f aed8 	beq.w	1a00666c <_dtoa_r+0xafc>
1a0068bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a0068be:	2f00      	cmp	r7, #0
1a0068c0:	f77f ab97 	ble.w	1a005ff2 <_dtoa_r+0x482>
1a0068c4:	2200      	movs	r2, #0
1a0068c6:	4b3b      	ldr	r3, [pc, #236]	; (1a0069b4 <_dtoa_r+0xe44>)
1a0068c8:	4620      	mov	r0, r4
1a0068ca:	4629      	mov	r1, r5
1a0068cc:	f7fb fe00 	bl	1a0024d0 <__aeabi_dmul>
1a0068d0:	4604      	mov	r4, r0
1a0068d2:	460d      	mov	r5, r1
1a0068d4:	1c70      	adds	r0, r6, #1
1a0068d6:	e9cd 4500 	strd	r4, r5, [sp]
1a0068da:	f7fb fd8f 	bl	1a0023fc <__aeabi_i2d>
1a0068de:	4622      	mov	r2, r4
1a0068e0:	462b      	mov	r3, r5
1a0068e2:	f7fb fdf5 	bl	1a0024d0 <__aeabi_dmul>
1a0068e6:	4b35      	ldr	r3, [pc, #212]	; (1a0069bc <_dtoa_r+0xe4c>)
1a0068e8:	2200      	movs	r2, #0
1a0068ea:	f7fb fc3b 	bl	1a002164 <__adddf3>
1a0068ee:	9b06      	ldr	r3, [sp, #24]
1a0068f0:	9710      	str	r7, [sp, #64]	; 0x40
1a0068f2:	3b01      	subs	r3, #1
1a0068f4:	4604      	mov	r4, r0
1a0068f6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a0068fa:	9312      	str	r3, [sp, #72]	; 0x48
1a0068fc:	f7ff bacf 	b.w	1a005e9e <_dtoa_r+0x32e>
1a006900:	9a06      	ldr	r2, [sp, #24]
1a006902:	3201      	adds	r2, #1
1a006904:	9206      	str	r2, [sp, #24]
1a006906:	2231      	movs	r2, #49	; 0x31
1a006908:	701a      	strb	r2, [r3, #0]
1a00690a:	f7ff bb58 	b.w	1a005fbe <_dtoa_r+0x44e>
1a00690e:	2239      	movs	r2, #57	; 0x39
1a006910:	9500      	str	r5, [sp, #0]
1a006912:	7032      	strb	r2, [r6, #0]
1a006914:	4645      	mov	r5, r8
1a006916:	e518      	b.n	1a00634a <_dtoa_r+0x7da>
1a006918:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00691a:	3301      	adds	r3, #1
1a00691c:	9306      	str	r3, [sp, #24]
1a00691e:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a006922:	e427      	b.n	1a006174 <_dtoa_r+0x604>
1a006924:	f47f af26 	bne.w	1a006774 <_dtoa_r+0xc04>
1a006928:	f019 0f01 	tst.w	r9, #1
1a00692c:	f47f af1b 	bne.w	1a006766 <_dtoa_r+0xbf6>
1a006930:	e720      	b.n	1a006774 <_dtoa_r+0xc04>
1a006932:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006934:	3301      	adds	r3, #1
1a006936:	46da      	mov	sl, fp
1a006938:	9306      	str	r3, [sp, #24]
1a00693a:	f8dd b000 	ldr.w	fp, [sp]
1a00693e:	e419      	b.n	1a006174 <_dtoa_r+0x604>
1a006940:	2a39      	cmp	r2, #57	; 0x39
1a006942:	463b      	mov	r3, r7
1a006944:	4691      	mov	r9, r2
1a006946:	4627      	mov	r7, r4
1a006948:	f106 0401 	add.w	r4, r6, #1
1a00694c:	d0df      	beq.n	1a00690e <_dtoa_r+0xd9e>
1a00694e:	2b00      	cmp	r3, #0
1a006950:	f73f af0d 	bgt.w	1a00676e <_dtoa_r+0xbfe>
1a006954:	e70e      	b.n	1a006774 <_dtoa_r+0xc04>
1a006956:	9b02      	ldr	r3, [sp, #8]
1a006958:	2b02      	cmp	r3, #2
1a00695a:	f77f ae49 	ble.w	1a0065f0 <_dtoa_r+0xa80>
1a00695e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006960:	9309      	str	r3, [sp, #36]	; 0x24
1a006962:	f8cd 8018 	str.w	r8, [sp, #24]
1a006966:	e5ba      	b.n	1a0064de <_dtoa_r+0x96e>
1a006968:	9b02      	ldr	r3, [sp, #8]
1a00696a:	2b02      	cmp	r3, #2
1a00696c:	dcf7      	bgt.n	1a00695e <_dtoa_r+0xdee>
1a00696e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006970:	e539      	b.n	1a0063e6 <_dtoa_r+0x876>
1a006972:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a006974:	3301      	adds	r3, #1
1a006976:	9306      	str	r3, [sp, #24]
1a006978:	f7ff bbfc 	b.w	1a006174 <_dtoa_r+0x604>
1a00697c:	4b10      	ldr	r3, [pc, #64]	; (1a0069c0 <_dtoa_r+0xe50>)
1a00697e:	9303      	str	r3, [sp, #12]
1a006980:	f7ff b934 	b.w	1a005bec <_dtoa_r+0x7c>
1a006984:	f43f ac98 	beq.w	1a0062b8 <_dtoa_r+0x748>
1a006988:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a00698c:	e48f      	b.n	1a0062ae <_dtoa_r+0x73e>
1a00698e:	2400      	movs	r4, #0
1a006990:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a006994:	4621      	mov	r1, r4
1a006996:	4650      	mov	r0, sl
1a006998:	f000 fad2 	bl	1a006f40 <_Balloc>
1a00699c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0069a0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a0069a4:	930f      	str	r3, [sp, #60]	; 0x3c
1a0069a6:	2301      	movs	r3, #1
1a0069a8:	9003      	str	r0, [sp, #12]
1a0069aa:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a0069ae:	930b      	str	r3, [sp, #44]	; 0x2c
1a0069b0:	f7ff bb23 	b.w	1a005ffa <_dtoa_r+0x48a>
1a0069b4:	40240000 	.word	0x40240000
1a0069b8:	3fe00000 	.word	0x3fe00000
1a0069bc:	401c0000 	.word	0x401c0000
1a0069c0:	1a008124 	.word	0x1a008124

1a0069c4 <__sfvwrite_r>:
1a0069c4:	6893      	ldr	r3, [r2, #8]
1a0069c6:	2b00      	cmp	r3, #0
1a0069c8:	f000 8102 	beq.w	1a006bd0 <__sfvwrite_r+0x20c>
1a0069cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0069d0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a0069d4:	b29b      	uxth	r3, r3
1a0069d6:	460c      	mov	r4, r1
1a0069d8:	0719      	lsls	r1, r3, #28
1a0069da:	b083      	sub	sp, #12
1a0069dc:	4682      	mov	sl, r0
1a0069de:	4690      	mov	r8, r2
1a0069e0:	d535      	bpl.n	1a006a4e <__sfvwrite_r+0x8a>
1a0069e2:	6922      	ldr	r2, [r4, #16]
1a0069e4:	b39a      	cbz	r2, 1a006a4e <__sfvwrite_r+0x8a>
1a0069e6:	f013 0202 	ands.w	r2, r3, #2
1a0069ea:	f8d8 6000 	ldr.w	r6, [r8]
1a0069ee:	d03d      	beq.n	1a006a6c <__sfvwrite_r+0xa8>
1a0069f0:	2700      	movs	r7, #0
1a0069f2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a0069f6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a0069fa:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a006cc8 <__sfvwrite_r+0x304>
1a0069fe:	463d      	mov	r5, r7
1a006a00:	454d      	cmp	r5, r9
1a006a02:	462b      	mov	r3, r5
1a006a04:	463a      	mov	r2, r7
1a006a06:	bf28      	it	cs
1a006a08:	464b      	movcs	r3, r9
1a006a0a:	4661      	mov	r1, ip
1a006a0c:	4650      	mov	r0, sl
1a006a0e:	b1d5      	cbz	r5, 1a006a46 <__sfvwrite_r+0x82>
1a006a10:	47d8      	blx	fp
1a006a12:	2800      	cmp	r0, #0
1a006a14:	f340 80d2 	ble.w	1a006bbc <__sfvwrite_r+0x1f8>
1a006a18:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a006a1c:	1a1b      	subs	r3, r3, r0
1a006a1e:	4407      	add	r7, r0
1a006a20:	1a2d      	subs	r5, r5, r0
1a006a22:	f8c8 3008 	str.w	r3, [r8, #8]
1a006a26:	2b00      	cmp	r3, #0
1a006a28:	f000 80b7 	beq.w	1a006b9a <__sfvwrite_r+0x1d6>
1a006a2c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a006a30:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a006a34:	454d      	cmp	r5, r9
1a006a36:	462b      	mov	r3, r5
1a006a38:	463a      	mov	r2, r7
1a006a3a:	bf28      	it	cs
1a006a3c:	464b      	movcs	r3, r9
1a006a3e:	4661      	mov	r1, ip
1a006a40:	4650      	mov	r0, sl
1a006a42:	2d00      	cmp	r5, #0
1a006a44:	d1e4      	bne.n	1a006a10 <__sfvwrite_r+0x4c>
1a006a46:	e9d6 7500 	ldrd	r7, r5, [r6]
1a006a4a:	3608      	adds	r6, #8
1a006a4c:	e7d8      	b.n	1a006a00 <__sfvwrite_r+0x3c>
1a006a4e:	4621      	mov	r1, r4
1a006a50:	4650      	mov	r0, sl
1a006a52:	f7fe ff91 	bl	1a005978 <__swsetup_r>
1a006a56:	2800      	cmp	r0, #0
1a006a58:	f040 8130 	bne.w	1a006cbc <__sfvwrite_r+0x2f8>
1a006a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006a60:	f8d8 6000 	ldr.w	r6, [r8]
1a006a64:	b29b      	uxth	r3, r3
1a006a66:	f013 0202 	ands.w	r2, r3, #2
1a006a6a:	d1c1      	bne.n	1a0069f0 <__sfvwrite_r+0x2c>
1a006a6c:	f013 0901 	ands.w	r9, r3, #1
1a006a70:	f040 80b0 	bne.w	1a006bd4 <__sfvwrite_r+0x210>
1a006a74:	68a7      	ldr	r7, [r4, #8]
1a006a76:	6820      	ldr	r0, [r4, #0]
1a006a78:	464d      	mov	r5, r9
1a006a7a:	2d00      	cmp	r5, #0
1a006a7c:	d054      	beq.n	1a006b28 <__sfvwrite_r+0x164>
1a006a7e:	059a      	lsls	r2, r3, #22
1a006a80:	f140 80bc 	bpl.w	1a006bfc <__sfvwrite_r+0x238>
1a006a84:	42af      	cmp	r7, r5
1a006a86:	46bb      	mov	fp, r7
1a006a88:	f200 80e7 	bhi.w	1a006c5a <__sfvwrite_r+0x296>
1a006a8c:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a006a90:	d02f      	beq.n	1a006af2 <__sfvwrite_r+0x12e>
1a006a92:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a006a96:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a006a9a:	eba0 0b01 	sub.w	fp, r0, r1
1a006a9e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a006aa2:	1c68      	adds	r0, r5, #1
1a006aa4:	107f      	asrs	r7, r7, #1
1a006aa6:	4458      	add	r0, fp
1a006aa8:	42b8      	cmp	r0, r7
1a006aaa:	463a      	mov	r2, r7
1a006aac:	bf84      	itt	hi
1a006aae:	4607      	movhi	r7, r0
1a006ab0:	463a      	movhi	r2, r7
1a006ab2:	055b      	lsls	r3, r3, #21
1a006ab4:	f140 80e9 	bpl.w	1a006c8a <__sfvwrite_r+0x2c6>
1a006ab8:	4611      	mov	r1, r2
1a006aba:	4650      	mov	r0, sl
1a006abc:	f7fc fc9e 	bl	1a0033fc <_malloc_r>
1a006ac0:	2800      	cmp	r0, #0
1a006ac2:	f000 80f5 	beq.w	1a006cb0 <__sfvwrite_r+0x2ec>
1a006ac6:	465a      	mov	r2, fp
1a006ac8:	6921      	ldr	r1, [r4, #16]
1a006aca:	9001      	str	r0, [sp, #4]
1a006acc:	f7fc ff4e 	bl	1a00396c <memcpy>
1a006ad0:	89a2      	ldrh	r2, [r4, #12]
1a006ad2:	9b01      	ldr	r3, [sp, #4]
1a006ad4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a006ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a006adc:	81a2      	strh	r2, [r4, #12]
1a006ade:	eba7 020b 	sub.w	r2, r7, fp
1a006ae2:	eb03 000b 	add.w	r0, r3, fp
1a006ae6:	6167      	str	r7, [r4, #20]
1a006ae8:	6123      	str	r3, [r4, #16]
1a006aea:	6020      	str	r0, [r4, #0]
1a006aec:	60a2      	str	r2, [r4, #8]
1a006aee:	462f      	mov	r7, r5
1a006af0:	46ab      	mov	fp, r5
1a006af2:	465a      	mov	r2, fp
1a006af4:	4649      	mov	r1, r9
1a006af6:	f000 f9bb 	bl	1a006e70 <memmove>
1a006afa:	68a2      	ldr	r2, [r4, #8]
1a006afc:	6823      	ldr	r3, [r4, #0]
1a006afe:	1bd2      	subs	r2, r2, r7
1a006b00:	445b      	add	r3, fp
1a006b02:	462f      	mov	r7, r5
1a006b04:	60a2      	str	r2, [r4, #8]
1a006b06:	6023      	str	r3, [r4, #0]
1a006b08:	2500      	movs	r5, #0
1a006b0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a006b0e:	1bdb      	subs	r3, r3, r7
1a006b10:	44b9      	add	r9, r7
1a006b12:	f8c8 3008 	str.w	r3, [r8, #8]
1a006b16:	2b00      	cmp	r3, #0
1a006b18:	d03f      	beq.n	1a006b9a <__sfvwrite_r+0x1d6>
1a006b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006b1e:	68a7      	ldr	r7, [r4, #8]
1a006b20:	6820      	ldr	r0, [r4, #0]
1a006b22:	b29b      	uxth	r3, r3
1a006b24:	2d00      	cmp	r5, #0
1a006b26:	d1aa      	bne.n	1a006a7e <__sfvwrite_r+0xba>
1a006b28:	e9d6 9500 	ldrd	r9, r5, [r6]
1a006b2c:	3608      	adds	r6, #8
1a006b2e:	e7a4      	b.n	1a006a7a <__sfvwrite_r+0xb6>
1a006b30:	f10b 0308 	add.w	r3, fp, #8
1a006b34:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a006b38:	469b      	mov	fp, r3
1a006b3a:	3308      	adds	r3, #8
1a006b3c:	2f00      	cmp	r7, #0
1a006b3e:	d0f9      	beq.n	1a006b34 <__sfvwrite_r+0x170>
1a006b40:	463a      	mov	r2, r7
1a006b42:	210a      	movs	r1, #10
1a006b44:	4630      	mov	r0, r6
1a006b46:	f000 f943 	bl	1a006dd0 <memchr>
1a006b4a:	2800      	cmp	r0, #0
1a006b4c:	d053      	beq.n	1a006bf6 <__sfvwrite_r+0x232>
1a006b4e:	3001      	adds	r0, #1
1a006b50:	eba0 0906 	sub.w	r9, r0, r6
1a006b54:	464b      	mov	r3, r9
1a006b56:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a006b5a:	6820      	ldr	r0, [r4, #0]
1a006b5c:	42bb      	cmp	r3, r7
1a006b5e:	bf28      	it	cs
1a006b60:	463b      	movcs	r3, r7
1a006b62:	4288      	cmp	r0, r1
1a006b64:	d903      	bls.n	1a006b6e <__sfvwrite_r+0x1aa>
1a006b66:	68a5      	ldr	r5, [r4, #8]
1a006b68:	4415      	add	r5, r2
1a006b6a:	42ab      	cmp	r3, r5
1a006b6c:	dc19      	bgt.n	1a006ba2 <__sfvwrite_r+0x1de>
1a006b6e:	429a      	cmp	r2, r3
1a006b70:	dc7d      	bgt.n	1a006c6e <__sfvwrite_r+0x2aa>
1a006b72:	4613      	mov	r3, r2
1a006b74:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a006b76:	69e1      	ldr	r1, [r4, #28]
1a006b78:	4632      	mov	r2, r6
1a006b7a:	4650      	mov	r0, sl
1a006b7c:	47a8      	blx	r5
1a006b7e:	1e05      	subs	r5, r0, #0
1a006b80:	dd1c      	ble.n	1a006bbc <__sfvwrite_r+0x1f8>
1a006b82:	ebb9 0905 	subs.w	r9, r9, r5
1a006b86:	d06b      	beq.n	1a006c60 <__sfvwrite_r+0x29c>
1a006b88:	2001      	movs	r0, #1
1a006b8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a006b8e:	1b5b      	subs	r3, r3, r5
1a006b90:	442e      	add	r6, r5
1a006b92:	1b7f      	subs	r7, r7, r5
1a006b94:	f8c8 3008 	str.w	r3, [r8, #8]
1a006b98:	bb13      	cbnz	r3, 1a006be0 <__sfvwrite_r+0x21c>
1a006b9a:	2000      	movs	r0, #0
1a006b9c:	b003      	add	sp, #12
1a006b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006ba2:	4631      	mov	r1, r6
1a006ba4:	462a      	mov	r2, r5
1a006ba6:	f000 f963 	bl	1a006e70 <memmove>
1a006baa:	6823      	ldr	r3, [r4, #0]
1a006bac:	442b      	add	r3, r5
1a006bae:	6023      	str	r3, [r4, #0]
1a006bb0:	4621      	mov	r1, r4
1a006bb2:	4650      	mov	r0, sl
1a006bb4:	f7fc f9f4 	bl	1a002fa0 <_fflush_r>
1a006bb8:	2800      	cmp	r0, #0
1a006bba:	d0e2      	beq.n	1a006b82 <__sfvwrite_r+0x1be>
1a006bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006bc8:	81a3      	strh	r3, [r4, #12]
1a006bca:	b003      	add	sp, #12
1a006bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006bd0:	2000      	movs	r0, #0
1a006bd2:	4770      	bx	lr
1a006bd4:	4633      	mov	r3, r6
1a006bd6:	4691      	mov	r9, r2
1a006bd8:	4610      	mov	r0, r2
1a006bda:	4617      	mov	r7, r2
1a006bdc:	464e      	mov	r6, r9
1a006bde:	469b      	mov	fp, r3
1a006be0:	2f00      	cmp	r7, #0
1a006be2:	d0a5      	beq.n	1a006b30 <__sfvwrite_r+0x16c>
1a006be4:	2800      	cmp	r0, #0
1a006be6:	d1b5      	bne.n	1a006b54 <__sfvwrite_r+0x190>
1a006be8:	463a      	mov	r2, r7
1a006bea:	210a      	movs	r1, #10
1a006bec:	4630      	mov	r0, r6
1a006bee:	f000 f8ef 	bl	1a006dd0 <memchr>
1a006bf2:	2800      	cmp	r0, #0
1a006bf4:	d1ab      	bne.n	1a006b4e <__sfvwrite_r+0x18a>
1a006bf6:	1c7b      	adds	r3, r7, #1
1a006bf8:	4699      	mov	r9, r3
1a006bfa:	e7ac      	b.n	1a006b56 <__sfvwrite_r+0x192>
1a006bfc:	6923      	ldr	r3, [r4, #16]
1a006bfe:	4283      	cmp	r3, r0
1a006c00:	d315      	bcc.n	1a006c2e <__sfvwrite_r+0x26a>
1a006c02:	6961      	ldr	r1, [r4, #20]
1a006c04:	42a9      	cmp	r1, r5
1a006c06:	d812      	bhi.n	1a006c2e <__sfvwrite_r+0x26a>
1a006c08:	4b2e      	ldr	r3, [pc, #184]	; (1a006cc4 <__sfvwrite_r+0x300>)
1a006c0a:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a006c0c:	429d      	cmp	r5, r3
1a006c0e:	bf94      	ite	ls
1a006c10:	462b      	movls	r3, r5
1a006c12:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a006c16:	464a      	mov	r2, r9
1a006c18:	fb93 f3f1 	sdiv	r3, r3, r1
1a006c1c:	4650      	mov	r0, sl
1a006c1e:	fb01 f303 	mul.w	r3, r1, r3
1a006c22:	69e1      	ldr	r1, [r4, #28]
1a006c24:	47b8      	blx	r7
1a006c26:	1e07      	subs	r7, r0, #0
1a006c28:	ddc8      	ble.n	1a006bbc <__sfvwrite_r+0x1f8>
1a006c2a:	1bed      	subs	r5, r5, r7
1a006c2c:	e76d      	b.n	1a006b0a <__sfvwrite_r+0x146>
1a006c2e:	42af      	cmp	r7, r5
1a006c30:	bf28      	it	cs
1a006c32:	462f      	movcs	r7, r5
1a006c34:	463a      	mov	r2, r7
1a006c36:	4649      	mov	r1, r9
1a006c38:	f000 f91a 	bl	1a006e70 <memmove>
1a006c3c:	68a3      	ldr	r3, [r4, #8]
1a006c3e:	6822      	ldr	r2, [r4, #0]
1a006c40:	1bdb      	subs	r3, r3, r7
1a006c42:	443a      	add	r2, r7
1a006c44:	60a3      	str	r3, [r4, #8]
1a006c46:	6022      	str	r2, [r4, #0]
1a006c48:	2b00      	cmp	r3, #0
1a006c4a:	d1ee      	bne.n	1a006c2a <__sfvwrite_r+0x266>
1a006c4c:	4621      	mov	r1, r4
1a006c4e:	4650      	mov	r0, sl
1a006c50:	f7fc f9a6 	bl	1a002fa0 <_fflush_r>
1a006c54:	2800      	cmp	r0, #0
1a006c56:	d0e8      	beq.n	1a006c2a <__sfvwrite_r+0x266>
1a006c58:	e7b0      	b.n	1a006bbc <__sfvwrite_r+0x1f8>
1a006c5a:	462f      	mov	r7, r5
1a006c5c:	46ab      	mov	fp, r5
1a006c5e:	e748      	b.n	1a006af2 <__sfvwrite_r+0x12e>
1a006c60:	4621      	mov	r1, r4
1a006c62:	4650      	mov	r0, sl
1a006c64:	f7fc f99c 	bl	1a002fa0 <_fflush_r>
1a006c68:	2800      	cmp	r0, #0
1a006c6a:	d08e      	beq.n	1a006b8a <__sfvwrite_r+0x1c6>
1a006c6c:	e7a6      	b.n	1a006bbc <__sfvwrite_r+0x1f8>
1a006c6e:	461a      	mov	r2, r3
1a006c70:	4631      	mov	r1, r6
1a006c72:	9301      	str	r3, [sp, #4]
1a006c74:	f000 f8fc 	bl	1a006e70 <memmove>
1a006c78:	9b01      	ldr	r3, [sp, #4]
1a006c7a:	68a1      	ldr	r1, [r4, #8]
1a006c7c:	6822      	ldr	r2, [r4, #0]
1a006c7e:	1ac9      	subs	r1, r1, r3
1a006c80:	441a      	add	r2, r3
1a006c82:	60a1      	str	r1, [r4, #8]
1a006c84:	6022      	str	r2, [r4, #0]
1a006c86:	461d      	mov	r5, r3
1a006c88:	e77b      	b.n	1a006b82 <__sfvwrite_r+0x1be>
1a006c8a:	4650      	mov	r0, sl
1a006c8c:	f000 fc62 	bl	1a007554 <_realloc_r>
1a006c90:	4603      	mov	r3, r0
1a006c92:	2800      	cmp	r0, #0
1a006c94:	f47f af23 	bne.w	1a006ade <__sfvwrite_r+0x11a>
1a006c98:	6921      	ldr	r1, [r4, #16]
1a006c9a:	4650      	mov	r0, sl
1a006c9c:	f7fc fa62 	bl	1a003164 <_free_r>
1a006ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006ca4:	220c      	movs	r2, #12
1a006ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a006caa:	f8ca 2000 	str.w	r2, [sl]
1a006cae:	e787      	b.n	1a006bc0 <__sfvwrite_r+0x1fc>
1a006cb0:	230c      	movs	r3, #12
1a006cb2:	f8ca 3000 	str.w	r3, [sl]
1a006cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006cba:	e781      	b.n	1a006bc0 <__sfvwrite_r+0x1fc>
1a006cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006cc0:	e76c      	b.n	1a006b9c <__sfvwrite_r+0x1d8>
1a006cc2:	bf00      	nop
1a006cc4:	7ffffffe 	.word	0x7ffffffe
1a006cc8:	7ffffc00 	.word	0x7ffffc00

1a006ccc <_localeconv_r>:
1a006ccc:	4800      	ldr	r0, [pc, #0]	; (1a006cd0 <_localeconv_r+0x4>)
1a006cce:	4770      	bx	lr
1a006cd0:	10000968 	.word	0x10000968

1a006cd4 <__swhatbuf_r>:
1a006cd4:	b570      	push	{r4, r5, r6, lr}
1a006cd6:	460c      	mov	r4, r1
1a006cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006cdc:	2900      	cmp	r1, #0
1a006cde:	b096      	sub	sp, #88	; 0x58
1a006ce0:	4615      	mov	r5, r2
1a006ce2:	461e      	mov	r6, r3
1a006ce4:	db14      	blt.n	1a006d10 <__swhatbuf_r+0x3c>
1a006ce6:	466a      	mov	r2, sp
1a006ce8:	f7f9 fc90 	bl	1a00060c <_fstat_r>
1a006cec:	2800      	cmp	r0, #0
1a006cee:	db0f      	blt.n	1a006d10 <__swhatbuf_r+0x3c>
1a006cf0:	9a01      	ldr	r2, [sp, #4]
1a006cf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a006cf6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a006cfa:	fab2 f282 	clz	r2, r2
1a006cfe:	0952      	lsrs	r2, r2, #5
1a006d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a006d04:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a006d08:	6032      	str	r2, [r6, #0]
1a006d0a:	602b      	str	r3, [r5, #0]
1a006d0c:	b016      	add	sp, #88	; 0x58
1a006d0e:	bd70      	pop	{r4, r5, r6, pc}
1a006d10:	89a2      	ldrh	r2, [r4, #12]
1a006d12:	2300      	movs	r3, #0
1a006d14:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a006d18:	6033      	str	r3, [r6, #0]
1a006d1a:	d004      	beq.n	1a006d26 <__swhatbuf_r+0x52>
1a006d1c:	2240      	movs	r2, #64	; 0x40
1a006d1e:	4618      	mov	r0, r3
1a006d20:	602a      	str	r2, [r5, #0]
1a006d22:	b016      	add	sp, #88	; 0x58
1a006d24:	bd70      	pop	{r4, r5, r6, pc}
1a006d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a006d2a:	602b      	str	r3, [r5, #0]
1a006d2c:	b016      	add	sp, #88	; 0x58
1a006d2e:	bd70      	pop	{r4, r5, r6, pc}

1a006d30 <__smakebuf_r>:
1a006d30:	898a      	ldrh	r2, [r1, #12]
1a006d32:	0792      	lsls	r2, r2, #30
1a006d34:	460b      	mov	r3, r1
1a006d36:	d506      	bpl.n	1a006d46 <__smakebuf_r+0x16>
1a006d38:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a006d3c:	2101      	movs	r1, #1
1a006d3e:	601a      	str	r2, [r3, #0]
1a006d40:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a006d44:	4770      	bx	lr
1a006d46:	b570      	push	{r4, r5, r6, lr}
1a006d48:	b082      	sub	sp, #8
1a006d4a:	ab01      	add	r3, sp, #4
1a006d4c:	466a      	mov	r2, sp
1a006d4e:	460c      	mov	r4, r1
1a006d50:	4606      	mov	r6, r0
1a006d52:	f7ff ffbf 	bl	1a006cd4 <__swhatbuf_r>
1a006d56:	9900      	ldr	r1, [sp, #0]
1a006d58:	4605      	mov	r5, r0
1a006d5a:	4630      	mov	r0, r6
1a006d5c:	f7fc fb4e 	bl	1a0033fc <_malloc_r>
1a006d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006d64:	b170      	cbz	r0, 1a006d84 <__smakebuf_r+0x54>
1a006d66:	4916      	ldr	r1, [pc, #88]	; (1a006dc0 <__smakebuf_r+0x90>)
1a006d68:	63f1      	str	r1, [r6, #60]	; 0x3c
1a006d6a:	9a01      	ldr	r2, [sp, #4]
1a006d6c:	9900      	ldr	r1, [sp, #0]
1a006d6e:	6020      	str	r0, [r4, #0]
1a006d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a006d74:	81a3      	strh	r3, [r4, #12]
1a006d76:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a006d7a:	b98a      	cbnz	r2, 1a006da0 <__smakebuf_r+0x70>
1a006d7c:	432b      	orrs	r3, r5
1a006d7e:	81a3      	strh	r3, [r4, #12]
1a006d80:	b002      	add	sp, #8
1a006d82:	bd70      	pop	{r4, r5, r6, pc}
1a006d84:	059a      	lsls	r2, r3, #22
1a006d86:	d4fb      	bmi.n	1a006d80 <__smakebuf_r+0x50>
1a006d88:	f023 0303 	bic.w	r3, r3, #3
1a006d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a006d90:	f043 0302 	orr.w	r3, r3, #2
1a006d94:	2101      	movs	r1, #1
1a006d96:	81a3      	strh	r3, [r4, #12]
1a006d98:	6022      	str	r2, [r4, #0]
1a006d9a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a006d9e:	e7ef      	b.n	1a006d80 <__smakebuf_r+0x50>
1a006da0:	4630      	mov	r0, r6
1a006da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006da6:	f7f9 fc37 	bl	1a000618 <_isatty_r>
1a006daa:	b910      	cbnz	r0, 1a006db2 <__smakebuf_r+0x82>
1a006dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006db0:	e7e4      	b.n	1a006d7c <__smakebuf_r+0x4c>
1a006db2:	89a3      	ldrh	r3, [r4, #12]
1a006db4:	f023 0303 	bic.w	r3, r3, #3
1a006db8:	f043 0301 	orr.w	r3, r3, #1
1a006dbc:	b21b      	sxth	r3, r3
1a006dbe:	e7dd      	b.n	1a006d7c <__smakebuf_r+0x4c>
1a006dc0:	1a00304d 	.word	0x1a00304d
1a006dc4:	ffffffff 	.word	0xffffffff
1a006dc8:	ffffffff 	.word	0xffffffff
1a006dcc:	ffffffff 	.word	0xffffffff

1a006dd0 <memchr>:
1a006dd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006dd4:	2a10      	cmp	r2, #16
1a006dd6:	db2b      	blt.n	1a006e30 <memchr+0x60>
1a006dd8:	f010 0f07 	tst.w	r0, #7
1a006ddc:	d008      	beq.n	1a006df0 <memchr+0x20>
1a006dde:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006de2:	3a01      	subs	r2, #1
1a006de4:	428b      	cmp	r3, r1
1a006de6:	d02d      	beq.n	1a006e44 <memchr+0x74>
1a006de8:	f010 0f07 	tst.w	r0, #7
1a006dec:	b342      	cbz	r2, 1a006e40 <memchr+0x70>
1a006dee:	d1f6      	bne.n	1a006dde <memchr+0xe>
1a006df0:	b4f0      	push	{r4, r5, r6, r7}
1a006df2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a006df6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a006dfa:	f022 0407 	bic.w	r4, r2, #7
1a006dfe:	f07f 0700 	mvns.w	r7, #0
1a006e02:	2300      	movs	r3, #0
1a006e04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a006e08:	3c08      	subs	r4, #8
1a006e0a:	ea85 0501 	eor.w	r5, r5, r1
1a006e0e:	ea86 0601 	eor.w	r6, r6, r1
1a006e12:	fa85 f547 	uadd8	r5, r5, r7
1a006e16:	faa3 f587 	sel	r5, r3, r7
1a006e1a:	fa86 f647 	uadd8	r6, r6, r7
1a006e1e:	faa5 f687 	sel	r6, r5, r7
1a006e22:	b98e      	cbnz	r6, 1a006e48 <memchr+0x78>
1a006e24:	d1ee      	bne.n	1a006e04 <memchr+0x34>
1a006e26:	bcf0      	pop	{r4, r5, r6, r7}
1a006e28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006e2c:	f002 0207 	and.w	r2, r2, #7
1a006e30:	b132      	cbz	r2, 1a006e40 <memchr+0x70>
1a006e32:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006e36:	3a01      	subs	r2, #1
1a006e38:	ea83 0301 	eor.w	r3, r3, r1
1a006e3c:	b113      	cbz	r3, 1a006e44 <memchr+0x74>
1a006e3e:	d1f8      	bne.n	1a006e32 <memchr+0x62>
1a006e40:	2000      	movs	r0, #0
1a006e42:	4770      	bx	lr
1a006e44:	3801      	subs	r0, #1
1a006e46:	4770      	bx	lr
1a006e48:	2d00      	cmp	r5, #0
1a006e4a:	bf06      	itte	eq
1a006e4c:	4635      	moveq	r5, r6
1a006e4e:	3803      	subeq	r0, #3
1a006e50:	3807      	subne	r0, #7
1a006e52:	f015 0f01 	tst.w	r5, #1
1a006e56:	d107      	bne.n	1a006e68 <memchr+0x98>
1a006e58:	3001      	adds	r0, #1
1a006e5a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a006e5e:	bf02      	ittt	eq
1a006e60:	3001      	addeq	r0, #1
1a006e62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a006e66:	3001      	addeq	r0, #1
1a006e68:	bcf0      	pop	{r4, r5, r6, r7}
1a006e6a:	3801      	subs	r0, #1
1a006e6c:	4770      	bx	lr
1a006e6e:	bf00      	nop

1a006e70 <memmove>:
1a006e70:	4288      	cmp	r0, r1
1a006e72:	b4f0      	push	{r4, r5, r6, r7}
1a006e74:	d90d      	bls.n	1a006e92 <memmove+0x22>
1a006e76:	188b      	adds	r3, r1, r2
1a006e78:	4283      	cmp	r3, r0
1a006e7a:	d90a      	bls.n	1a006e92 <memmove+0x22>
1a006e7c:	1884      	adds	r4, r0, r2
1a006e7e:	b132      	cbz	r2, 1a006e8e <memmove+0x1e>
1a006e80:	4622      	mov	r2, r4
1a006e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a006e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a006e8a:	4299      	cmp	r1, r3
1a006e8c:	d1f9      	bne.n	1a006e82 <memmove+0x12>
1a006e8e:	bcf0      	pop	{r4, r5, r6, r7}
1a006e90:	4770      	bx	lr
1a006e92:	2a0f      	cmp	r2, #15
1a006e94:	d80e      	bhi.n	1a006eb4 <memmove+0x44>
1a006e96:	4603      	mov	r3, r0
1a006e98:	1e54      	subs	r4, r2, #1
1a006e9a:	2a00      	cmp	r2, #0
1a006e9c:	d0f7      	beq.n	1a006e8e <memmove+0x1e>
1a006e9e:	3401      	adds	r4, #1
1a006ea0:	440c      	add	r4, r1
1a006ea2:	3b01      	subs	r3, #1
1a006ea4:	f811 2b01 	ldrb.w	r2, [r1], #1
1a006ea8:	f803 2f01 	strb.w	r2, [r3, #1]!
1a006eac:	42a1      	cmp	r1, r4
1a006eae:	d1f9      	bne.n	1a006ea4 <memmove+0x34>
1a006eb0:	bcf0      	pop	{r4, r5, r6, r7}
1a006eb2:	4770      	bx	lr
1a006eb4:	ea40 0301 	orr.w	r3, r0, r1
1a006eb8:	079b      	lsls	r3, r3, #30
1a006eba:	d13b      	bne.n	1a006f34 <memmove+0xc4>
1a006ebc:	f1a2 0710 	sub.w	r7, r2, #16
1a006ec0:	093f      	lsrs	r7, r7, #4
1a006ec2:	f101 0620 	add.w	r6, r1, #32
1a006ec6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a006eca:	f101 0310 	add.w	r3, r1, #16
1a006ece:	f100 0410 	add.w	r4, r0, #16
1a006ed2:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a006ed6:	f844 5c10 	str.w	r5, [r4, #-16]
1a006eda:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a006ede:	f844 5c0c 	str.w	r5, [r4, #-12]
1a006ee2:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a006ee6:	f844 5c08 	str.w	r5, [r4, #-8]
1a006eea:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a006eee:	f844 5c04 	str.w	r5, [r4, #-4]
1a006ef2:	3310      	adds	r3, #16
1a006ef4:	42b3      	cmp	r3, r6
1a006ef6:	f104 0410 	add.w	r4, r4, #16
1a006efa:	d1ea      	bne.n	1a006ed2 <memmove+0x62>
1a006efc:	1c7b      	adds	r3, r7, #1
1a006efe:	011b      	lsls	r3, r3, #4
1a006f00:	f012 0f0c 	tst.w	r2, #12
1a006f04:	4419      	add	r1, r3
1a006f06:	f002 050f 	and.w	r5, r2, #15
1a006f0a:	4403      	add	r3, r0
1a006f0c:	d015      	beq.n	1a006f3a <memmove+0xca>
1a006f0e:	3d04      	subs	r5, #4
1a006f10:	08ad      	lsrs	r5, r5, #2
1a006f12:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a006f16:	1f1c      	subs	r4, r3, #4
1a006f18:	460e      	mov	r6, r1
1a006f1a:	f856 7b04 	ldr.w	r7, [r6], #4
1a006f1e:	f844 7f04 	str.w	r7, [r4, #4]!
1a006f22:	4564      	cmp	r4, ip
1a006f24:	d1f9      	bne.n	1a006f1a <memmove+0xaa>
1a006f26:	3501      	adds	r5, #1
1a006f28:	00ad      	lsls	r5, r5, #2
1a006f2a:	442b      	add	r3, r5
1a006f2c:	4429      	add	r1, r5
1a006f2e:	f002 0203 	and.w	r2, r2, #3
1a006f32:	e7b1      	b.n	1a006e98 <memmove+0x28>
1a006f34:	1e54      	subs	r4, r2, #1
1a006f36:	4603      	mov	r3, r0
1a006f38:	e7b1      	b.n	1a006e9e <memmove+0x2e>
1a006f3a:	462a      	mov	r2, r5
1a006f3c:	e7ac      	b.n	1a006e98 <memmove+0x28>
1a006f3e:	bf00      	nop

1a006f40 <_Balloc>:
1a006f40:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006f42:	b570      	push	{r4, r5, r6, lr}
1a006f44:	4605      	mov	r5, r0
1a006f46:	460c      	mov	r4, r1
1a006f48:	b14b      	cbz	r3, 1a006f5e <_Balloc+0x1e>
1a006f4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a006f4e:	b180      	cbz	r0, 1a006f72 <_Balloc+0x32>
1a006f50:	6802      	ldr	r2, [r0, #0]
1a006f52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a006f56:	2300      	movs	r3, #0
1a006f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a006f5c:	bd70      	pop	{r4, r5, r6, pc}
1a006f5e:	2221      	movs	r2, #33	; 0x21
1a006f60:	2104      	movs	r1, #4
1a006f62:	f000 fd63 	bl	1a007a2c <_calloc_r>
1a006f66:	4603      	mov	r3, r0
1a006f68:	64e8      	str	r0, [r5, #76]	; 0x4c
1a006f6a:	2800      	cmp	r0, #0
1a006f6c:	d1ed      	bne.n	1a006f4a <_Balloc+0xa>
1a006f6e:	2000      	movs	r0, #0
1a006f70:	bd70      	pop	{r4, r5, r6, pc}
1a006f72:	2101      	movs	r1, #1
1a006f74:	fa01 f604 	lsl.w	r6, r1, r4
1a006f78:	1d72      	adds	r2, r6, #5
1a006f7a:	4628      	mov	r0, r5
1a006f7c:	0092      	lsls	r2, r2, #2
1a006f7e:	f000 fd55 	bl	1a007a2c <_calloc_r>
1a006f82:	2800      	cmp	r0, #0
1a006f84:	d0f3      	beq.n	1a006f6e <_Balloc+0x2e>
1a006f86:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a006f8a:	e7e4      	b.n	1a006f56 <_Balloc+0x16>

1a006f8c <_Bfree>:
1a006f8c:	b131      	cbz	r1, 1a006f9c <_Bfree+0x10>
1a006f8e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006f90:	684a      	ldr	r2, [r1, #4]
1a006f92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a006f96:	6008      	str	r0, [r1, #0]
1a006f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a006f9c:	4770      	bx	lr
1a006f9e:	bf00      	nop

1a006fa0 <__multadd>:
1a006fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006fa2:	690c      	ldr	r4, [r1, #16]
1a006fa4:	b083      	sub	sp, #12
1a006fa6:	460d      	mov	r5, r1
1a006fa8:	4606      	mov	r6, r0
1a006faa:	f101 0c14 	add.w	ip, r1, #20
1a006fae:	2700      	movs	r7, #0
1a006fb0:	f8dc 0000 	ldr.w	r0, [ip]
1a006fb4:	b281      	uxth	r1, r0
1a006fb6:	fb02 3301 	mla	r3, r2, r1, r3
1a006fba:	0c19      	lsrs	r1, r3, #16
1a006fbc:	0c00      	lsrs	r0, r0, #16
1a006fbe:	fb02 1000 	mla	r0, r2, r0, r1
1a006fc2:	b29b      	uxth	r3, r3
1a006fc4:	3701      	adds	r7, #1
1a006fc6:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a006fca:	42bc      	cmp	r4, r7
1a006fcc:	f84c 3b04 	str.w	r3, [ip], #4
1a006fd0:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a006fd4:	dcec      	bgt.n	1a006fb0 <__multadd+0x10>
1a006fd6:	b13b      	cbz	r3, 1a006fe8 <__multadd+0x48>
1a006fd8:	68aa      	ldr	r2, [r5, #8]
1a006fda:	42a2      	cmp	r2, r4
1a006fdc:	dd07      	ble.n	1a006fee <__multadd+0x4e>
1a006fde:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006fe2:	3401      	adds	r4, #1
1a006fe4:	6153      	str	r3, [r2, #20]
1a006fe6:	612c      	str	r4, [r5, #16]
1a006fe8:	4628      	mov	r0, r5
1a006fea:	b003      	add	sp, #12
1a006fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006fee:	6869      	ldr	r1, [r5, #4]
1a006ff0:	9301      	str	r3, [sp, #4]
1a006ff2:	3101      	adds	r1, #1
1a006ff4:	4630      	mov	r0, r6
1a006ff6:	f7ff ffa3 	bl	1a006f40 <_Balloc>
1a006ffa:	692a      	ldr	r2, [r5, #16]
1a006ffc:	3202      	adds	r2, #2
1a006ffe:	f105 010c 	add.w	r1, r5, #12
1a007002:	4607      	mov	r7, r0
1a007004:	0092      	lsls	r2, r2, #2
1a007006:	300c      	adds	r0, #12
1a007008:	f7fc fcb0 	bl	1a00396c <memcpy>
1a00700c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a00700e:	6869      	ldr	r1, [r5, #4]
1a007010:	9b01      	ldr	r3, [sp, #4]
1a007012:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a007016:	6028      	str	r0, [r5, #0]
1a007018:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a00701c:	463d      	mov	r5, r7
1a00701e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a007022:	3401      	adds	r4, #1
1a007024:	6153      	str	r3, [r2, #20]
1a007026:	612c      	str	r4, [r5, #16]
1a007028:	e7de      	b.n	1a006fe8 <__multadd+0x48>
1a00702a:	bf00      	nop

1a00702c <__hi0bits>:
1a00702c:	0c02      	lsrs	r2, r0, #16
1a00702e:	0412      	lsls	r2, r2, #16
1a007030:	4603      	mov	r3, r0
1a007032:	b9ca      	cbnz	r2, 1a007068 <__hi0bits+0x3c>
1a007034:	0403      	lsls	r3, r0, #16
1a007036:	2010      	movs	r0, #16
1a007038:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a00703c:	bf04      	itt	eq
1a00703e:	021b      	lsleq	r3, r3, #8
1a007040:	3008      	addeq	r0, #8
1a007042:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a007046:	bf04      	itt	eq
1a007048:	011b      	lsleq	r3, r3, #4
1a00704a:	3004      	addeq	r0, #4
1a00704c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a007050:	bf04      	itt	eq
1a007052:	009b      	lsleq	r3, r3, #2
1a007054:	3002      	addeq	r0, #2
1a007056:	2b00      	cmp	r3, #0
1a007058:	db05      	blt.n	1a007066 <__hi0bits+0x3a>
1a00705a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a00705e:	f100 0001 	add.w	r0, r0, #1
1a007062:	bf08      	it	eq
1a007064:	2020      	moveq	r0, #32
1a007066:	4770      	bx	lr
1a007068:	2000      	movs	r0, #0
1a00706a:	e7e5      	b.n	1a007038 <__hi0bits+0xc>

1a00706c <__lo0bits>:
1a00706c:	6803      	ldr	r3, [r0, #0]
1a00706e:	f013 0207 	ands.w	r2, r3, #7
1a007072:	4601      	mov	r1, r0
1a007074:	d007      	beq.n	1a007086 <__lo0bits+0x1a>
1a007076:	07da      	lsls	r2, r3, #31
1a007078:	d420      	bmi.n	1a0070bc <__lo0bits+0x50>
1a00707a:	0798      	lsls	r0, r3, #30
1a00707c:	d522      	bpl.n	1a0070c4 <__lo0bits+0x58>
1a00707e:	085b      	lsrs	r3, r3, #1
1a007080:	600b      	str	r3, [r1, #0]
1a007082:	2001      	movs	r0, #1
1a007084:	4770      	bx	lr
1a007086:	b298      	uxth	r0, r3
1a007088:	b9b0      	cbnz	r0, 1a0070b8 <__lo0bits+0x4c>
1a00708a:	0c1b      	lsrs	r3, r3, #16
1a00708c:	2010      	movs	r0, #16
1a00708e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a007092:	bf04      	itt	eq
1a007094:	0a1b      	lsreq	r3, r3, #8
1a007096:	3008      	addeq	r0, #8
1a007098:	071a      	lsls	r2, r3, #28
1a00709a:	bf04      	itt	eq
1a00709c:	091b      	lsreq	r3, r3, #4
1a00709e:	3004      	addeq	r0, #4
1a0070a0:	079a      	lsls	r2, r3, #30
1a0070a2:	bf04      	itt	eq
1a0070a4:	089b      	lsreq	r3, r3, #2
1a0070a6:	3002      	addeq	r0, #2
1a0070a8:	07da      	lsls	r2, r3, #31
1a0070aa:	d403      	bmi.n	1a0070b4 <__lo0bits+0x48>
1a0070ac:	085b      	lsrs	r3, r3, #1
1a0070ae:	f100 0001 	add.w	r0, r0, #1
1a0070b2:	d005      	beq.n	1a0070c0 <__lo0bits+0x54>
1a0070b4:	600b      	str	r3, [r1, #0]
1a0070b6:	4770      	bx	lr
1a0070b8:	4610      	mov	r0, r2
1a0070ba:	e7e8      	b.n	1a00708e <__lo0bits+0x22>
1a0070bc:	2000      	movs	r0, #0
1a0070be:	4770      	bx	lr
1a0070c0:	2020      	movs	r0, #32
1a0070c2:	4770      	bx	lr
1a0070c4:	089b      	lsrs	r3, r3, #2
1a0070c6:	600b      	str	r3, [r1, #0]
1a0070c8:	2002      	movs	r0, #2
1a0070ca:	4770      	bx	lr

1a0070cc <__i2b>:
1a0070cc:	b510      	push	{r4, lr}
1a0070ce:	460c      	mov	r4, r1
1a0070d0:	2101      	movs	r1, #1
1a0070d2:	f7ff ff35 	bl	1a006f40 <_Balloc>
1a0070d6:	2201      	movs	r2, #1
1a0070d8:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a0070dc:	bd10      	pop	{r4, pc}
1a0070de:	bf00      	nop

1a0070e0 <__multiply>:
1a0070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0070e4:	690e      	ldr	r6, [r1, #16]
1a0070e6:	6917      	ldr	r7, [r2, #16]
1a0070e8:	42be      	cmp	r6, r7
1a0070ea:	b083      	sub	sp, #12
1a0070ec:	460c      	mov	r4, r1
1a0070ee:	4615      	mov	r5, r2
1a0070f0:	db05      	blt.n	1a0070fe <__multiply+0x1e>
1a0070f2:	463a      	mov	r2, r7
1a0070f4:	462b      	mov	r3, r5
1a0070f6:	4637      	mov	r7, r6
1a0070f8:	460d      	mov	r5, r1
1a0070fa:	4616      	mov	r6, r2
1a0070fc:	461c      	mov	r4, r3
1a0070fe:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a007102:	eb07 0806 	add.w	r8, r7, r6
1a007106:	4543      	cmp	r3, r8
1a007108:	bfb8      	it	lt
1a00710a:	3101      	addlt	r1, #1
1a00710c:	f7ff ff18 	bl	1a006f40 <_Balloc>
1a007110:	f100 0a14 	add.w	sl, r0, #20
1a007114:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a007118:	45ca      	cmp	sl, r9
1a00711a:	9000      	str	r0, [sp, #0]
1a00711c:	d205      	bcs.n	1a00712a <__multiply+0x4a>
1a00711e:	4653      	mov	r3, sl
1a007120:	2100      	movs	r1, #0
1a007122:	f843 1b04 	str.w	r1, [r3], #4
1a007126:	4599      	cmp	r9, r3
1a007128:	d8fb      	bhi.n	1a007122 <__multiply+0x42>
1a00712a:	f104 0e14 	add.w	lr, r4, #20
1a00712e:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a007132:	f105 0314 	add.w	r3, r5, #20
1a007136:	45de      	cmp	lr, fp
1a007138:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a00713c:	d253      	bcs.n	1a0071e6 <__multiply+0x106>
1a00713e:	f8cd 8004 	str.w	r8, [sp, #4]
1a007142:	4698      	mov	r8, r3
1a007144:	e005      	b.n	1a007152 <__multiply+0x72>
1a007146:	0c09      	lsrs	r1, r1, #16
1a007148:	d128      	bne.n	1a00719c <__multiply+0xbc>
1a00714a:	45f3      	cmp	fp, lr
1a00714c:	f10a 0a04 	add.w	sl, sl, #4
1a007150:	d947      	bls.n	1a0071e2 <__multiply+0x102>
1a007152:	f85e 1b04 	ldr.w	r1, [lr], #4
1a007156:	b28e      	uxth	r6, r1
1a007158:	2e00      	cmp	r6, #0
1a00715a:	d0f4      	beq.n	1a007146 <__multiply+0x66>
1a00715c:	4645      	mov	r5, r8
1a00715e:	4654      	mov	r4, sl
1a007160:	2300      	movs	r3, #0
1a007162:	f855 1b04 	ldr.w	r1, [r5], #4
1a007166:	6820      	ldr	r0, [r4, #0]
1a007168:	b28a      	uxth	r2, r1
1a00716a:	fa1f fc80 	uxth.w	ip, r0
1a00716e:	fb06 c202 	mla	r2, r6, r2, ip
1a007172:	0c09      	lsrs	r1, r1, #16
1a007174:	0c00      	lsrs	r0, r0, #16
1a007176:	4413      	add	r3, r2
1a007178:	fb06 0201 	mla	r2, r6, r1, r0
1a00717c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a007180:	b29b      	uxth	r3, r3
1a007182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a007186:	42af      	cmp	r7, r5
1a007188:	f844 3b04 	str.w	r3, [r4], #4
1a00718c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a007190:	d8e7      	bhi.n	1a007162 <__multiply+0x82>
1a007192:	6023      	str	r3, [r4, #0]
1a007194:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a007198:	0c09      	lsrs	r1, r1, #16
1a00719a:	d0d6      	beq.n	1a00714a <__multiply+0x6a>
1a00719c:	f8da 3000 	ldr.w	r3, [sl]
1a0071a0:	4640      	mov	r0, r8
1a0071a2:	461a      	mov	r2, r3
1a0071a4:	4654      	mov	r4, sl
1a0071a6:	f04f 0c00 	mov.w	ip, #0
1a0071aa:	8805      	ldrh	r5, [r0, #0]
1a0071ac:	0c12      	lsrs	r2, r2, #16
1a0071ae:	fb01 2205 	mla	r2, r1, r5, r2
1a0071b2:	4494      	add	ip, r2
1a0071b4:	b29b      	uxth	r3, r3
1a0071b6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a0071ba:	f844 3b04 	str.w	r3, [r4], #4
1a0071be:	f850 3b04 	ldr.w	r3, [r0], #4
1a0071c2:	6822      	ldr	r2, [r4, #0]
1a0071c4:	0c1b      	lsrs	r3, r3, #16
1a0071c6:	b295      	uxth	r5, r2
1a0071c8:	fb01 5303 	mla	r3, r1, r3, r5
1a0071cc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a0071d0:	4287      	cmp	r7, r0
1a0071d2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a0071d6:	d8e8      	bhi.n	1a0071aa <__multiply+0xca>
1a0071d8:	45f3      	cmp	fp, lr
1a0071da:	6023      	str	r3, [r4, #0]
1a0071dc:	f10a 0a04 	add.w	sl, sl, #4
1a0071e0:	d8b7      	bhi.n	1a007152 <__multiply+0x72>
1a0071e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a0071e6:	f1b8 0f00 	cmp.w	r8, #0
1a0071ea:	dd0b      	ble.n	1a007204 <__multiply+0x124>
1a0071ec:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a0071f0:	f1a9 0904 	sub.w	r9, r9, #4
1a0071f4:	b11b      	cbz	r3, 1a0071fe <__multiply+0x11e>
1a0071f6:	e005      	b.n	1a007204 <__multiply+0x124>
1a0071f8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a0071fc:	b913      	cbnz	r3, 1a007204 <__multiply+0x124>
1a0071fe:	f1b8 0801 	subs.w	r8, r8, #1
1a007202:	d1f9      	bne.n	1a0071f8 <__multiply+0x118>
1a007204:	9800      	ldr	r0, [sp, #0]
1a007206:	f8c0 8010 	str.w	r8, [r0, #16]
1a00720a:	b003      	add	sp, #12
1a00720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a007210 <__pow5mult>:
1a007210:	f012 0303 	ands.w	r3, r2, #3
1a007214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007218:	4614      	mov	r4, r2
1a00721a:	4607      	mov	r7, r0
1a00721c:	d12e      	bne.n	1a00727c <__pow5mult+0x6c>
1a00721e:	460d      	mov	r5, r1
1a007220:	10a4      	asrs	r4, r4, #2
1a007222:	d01c      	beq.n	1a00725e <__pow5mult+0x4e>
1a007224:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a007226:	b396      	cbz	r6, 1a00728e <__pow5mult+0x7e>
1a007228:	07e3      	lsls	r3, r4, #31
1a00722a:	f04f 0800 	mov.w	r8, #0
1a00722e:	d406      	bmi.n	1a00723e <__pow5mult+0x2e>
1a007230:	1064      	asrs	r4, r4, #1
1a007232:	d014      	beq.n	1a00725e <__pow5mult+0x4e>
1a007234:	6830      	ldr	r0, [r6, #0]
1a007236:	b1a8      	cbz	r0, 1a007264 <__pow5mult+0x54>
1a007238:	4606      	mov	r6, r0
1a00723a:	07e3      	lsls	r3, r4, #31
1a00723c:	d5f8      	bpl.n	1a007230 <__pow5mult+0x20>
1a00723e:	4632      	mov	r2, r6
1a007240:	4629      	mov	r1, r5
1a007242:	4638      	mov	r0, r7
1a007244:	f7ff ff4c 	bl	1a0070e0 <__multiply>
1a007248:	b1b5      	cbz	r5, 1a007278 <__pow5mult+0x68>
1a00724a:	686a      	ldr	r2, [r5, #4]
1a00724c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00724e:	1064      	asrs	r4, r4, #1
1a007250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007254:	6029      	str	r1, [r5, #0]
1a007256:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00725a:	4605      	mov	r5, r0
1a00725c:	d1ea      	bne.n	1a007234 <__pow5mult+0x24>
1a00725e:	4628      	mov	r0, r5
1a007260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a007264:	4632      	mov	r2, r6
1a007266:	4631      	mov	r1, r6
1a007268:	4638      	mov	r0, r7
1a00726a:	f7ff ff39 	bl	1a0070e0 <__multiply>
1a00726e:	6030      	str	r0, [r6, #0]
1a007270:	f8c0 8000 	str.w	r8, [r0]
1a007274:	4606      	mov	r6, r0
1a007276:	e7e0      	b.n	1a00723a <__pow5mult+0x2a>
1a007278:	4605      	mov	r5, r0
1a00727a:	e7d9      	b.n	1a007230 <__pow5mult+0x20>
1a00727c:	3b01      	subs	r3, #1
1a00727e:	4a0b      	ldr	r2, [pc, #44]	; (1a0072ac <__pow5mult+0x9c>)
1a007280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a007284:	2300      	movs	r3, #0
1a007286:	f7ff fe8b 	bl	1a006fa0 <__multadd>
1a00728a:	4605      	mov	r5, r0
1a00728c:	e7c8      	b.n	1a007220 <__pow5mult+0x10>
1a00728e:	2101      	movs	r1, #1
1a007290:	4638      	mov	r0, r7
1a007292:	f7ff fe55 	bl	1a006f40 <_Balloc>
1a007296:	f240 2371 	movw	r3, #625	; 0x271
1a00729a:	6143      	str	r3, [r0, #20]
1a00729c:	2201      	movs	r2, #1
1a00729e:	2300      	movs	r3, #0
1a0072a0:	6102      	str	r2, [r0, #16]
1a0072a2:	4606      	mov	r6, r0
1a0072a4:	64b8      	str	r0, [r7, #72]	; 0x48
1a0072a6:	6003      	str	r3, [r0, #0]
1a0072a8:	e7be      	b.n	1a007228 <__pow5mult+0x18>
1a0072aa:	bf00      	nop
1a0072ac:	1a008220 	.word	0x1a008220

1a0072b0 <__lshift>:
1a0072b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0072b4:	690e      	ldr	r6, [r1, #16]
1a0072b6:	460d      	mov	r5, r1
1a0072b8:	ea4f 1962 	mov.w	r9, r2, asr #5
1a0072bc:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a0072c0:	444e      	add	r6, r9
1a0072c2:	1c74      	adds	r4, r6, #1
1a0072c4:	429c      	cmp	r4, r3
1a0072c6:	4690      	mov	r8, r2
1a0072c8:	4607      	mov	r7, r0
1a0072ca:	dd04      	ble.n	1a0072d6 <__lshift+0x26>
1a0072cc:	005b      	lsls	r3, r3, #1
1a0072ce:	429c      	cmp	r4, r3
1a0072d0:	f101 0101 	add.w	r1, r1, #1
1a0072d4:	dcfa      	bgt.n	1a0072cc <__lshift+0x1c>
1a0072d6:	4638      	mov	r0, r7
1a0072d8:	f7ff fe32 	bl	1a006f40 <_Balloc>
1a0072dc:	f1b9 0f00 	cmp.w	r9, #0
1a0072e0:	f100 0c14 	add.w	ip, r0, #20
1a0072e4:	dd0e      	ble.n	1a007304 <__lshift+0x54>
1a0072e6:	f109 0905 	add.w	r9, r9, #5
1a0072ea:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a0072ee:	eb00 0109 	add.w	r1, r0, r9
1a0072f2:	4663      	mov	r3, ip
1a0072f4:	2200      	movs	r2, #0
1a0072f6:	f843 2b04 	str.w	r2, [r3], #4
1a0072fa:	428b      	cmp	r3, r1
1a0072fc:	d1fb      	bne.n	1a0072f6 <__lshift+0x46>
1a0072fe:	f1a9 0914 	sub.w	r9, r9, #20
1a007302:	44cc      	add	ip, r9
1a007304:	6929      	ldr	r1, [r5, #16]
1a007306:	f105 0314 	add.w	r3, r5, #20
1a00730a:	f018 081f 	ands.w	r8, r8, #31
1a00730e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a007312:	d01d      	beq.n	1a007350 <__lshift+0xa0>
1a007314:	f1c8 0920 	rsb	r9, r8, #32
1a007318:	2200      	movs	r2, #0
1a00731a:	6819      	ldr	r1, [r3, #0]
1a00731c:	fa01 f108 	lsl.w	r1, r1, r8
1a007320:	4311      	orrs	r1, r2
1a007322:	f84c 1b04 	str.w	r1, [ip], #4
1a007326:	f853 2b04 	ldr.w	r2, [r3], #4
1a00732a:	4573      	cmp	r3, lr
1a00732c:	fa22 f209 	lsr.w	r2, r2, r9
1a007330:	d3f3      	bcc.n	1a00731a <__lshift+0x6a>
1a007332:	f8cc 2000 	str.w	r2, [ip]
1a007336:	2a00      	cmp	r2, #0
1a007338:	bf18      	it	ne
1a00733a:	4626      	movne	r6, r4
1a00733c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00733e:	686a      	ldr	r2, [r5, #4]
1a007340:	6106      	str	r6, [r0, #16]
1a007342:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007346:	6029      	str	r1, [r5, #0]
1a007348:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00734c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007350:	f1ac 0c04 	sub.w	ip, ip, #4
1a007354:	f853 2b04 	ldr.w	r2, [r3], #4
1a007358:	f84c 2f04 	str.w	r2, [ip, #4]!
1a00735c:	459e      	cmp	lr, r3
1a00735e:	d8f9      	bhi.n	1a007354 <__lshift+0xa4>
1a007360:	e7ec      	b.n	1a00733c <__lshift+0x8c>
1a007362:	bf00      	nop

1a007364 <__mcmp>:
1a007364:	b430      	push	{r4, r5}
1a007366:	690b      	ldr	r3, [r1, #16]
1a007368:	4605      	mov	r5, r0
1a00736a:	6900      	ldr	r0, [r0, #16]
1a00736c:	1ac0      	subs	r0, r0, r3
1a00736e:	d110      	bne.n	1a007392 <__mcmp+0x2e>
1a007370:	009b      	lsls	r3, r3, #2
1a007372:	3514      	adds	r5, #20
1a007374:	3114      	adds	r1, #20
1a007376:	4419      	add	r1, r3
1a007378:	442b      	add	r3, r5
1a00737a:	e001      	b.n	1a007380 <__mcmp+0x1c>
1a00737c:	429d      	cmp	r5, r3
1a00737e:	d208      	bcs.n	1a007392 <__mcmp+0x2e>
1a007380:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a007384:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a007388:	4294      	cmp	r4, r2
1a00738a:	d0f7      	beq.n	1a00737c <__mcmp+0x18>
1a00738c:	d203      	bcs.n	1a007396 <__mcmp+0x32>
1a00738e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007392:	bc30      	pop	{r4, r5}
1a007394:	4770      	bx	lr
1a007396:	2001      	movs	r0, #1
1a007398:	bc30      	pop	{r4, r5}
1a00739a:	4770      	bx	lr

1a00739c <__mdiff>:
1a00739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0073a0:	460f      	mov	r7, r1
1a0073a2:	690d      	ldr	r5, [r1, #16]
1a0073a4:	6911      	ldr	r1, [r2, #16]
1a0073a6:	1a6d      	subs	r5, r5, r1
1a0073a8:	2d00      	cmp	r5, #0
1a0073aa:	4690      	mov	r8, r2
1a0073ac:	4684      	mov	ip, r0
1a0073ae:	f107 0414 	add.w	r4, r7, #20
1a0073b2:	f102 0614 	add.w	r6, r2, #20
1a0073b6:	d114      	bne.n	1a0073e2 <__mdiff+0x46>
1a0073b8:	0089      	lsls	r1, r1, #2
1a0073ba:	1863      	adds	r3, r4, r1
1a0073bc:	4431      	add	r1, r6
1a0073be:	e001      	b.n	1a0073c4 <__mdiff+0x28>
1a0073c0:	42a3      	cmp	r3, r4
1a0073c2:	d95d      	bls.n	1a007480 <__mdiff+0xe4>
1a0073c4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a0073c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a0073cc:	4290      	cmp	r0, r2
1a0073ce:	d0f7      	beq.n	1a0073c0 <__mdiff+0x24>
1a0073d0:	d209      	bcs.n	1a0073e6 <__mdiff+0x4a>
1a0073d2:	4622      	mov	r2, r4
1a0073d4:	463b      	mov	r3, r7
1a0073d6:	4634      	mov	r4, r6
1a0073d8:	4647      	mov	r7, r8
1a0073da:	4616      	mov	r6, r2
1a0073dc:	4698      	mov	r8, r3
1a0073de:	2501      	movs	r5, #1
1a0073e0:	e001      	b.n	1a0073e6 <__mdiff+0x4a>
1a0073e2:	dbf6      	blt.n	1a0073d2 <__mdiff+0x36>
1a0073e4:	2500      	movs	r5, #0
1a0073e6:	4660      	mov	r0, ip
1a0073e8:	6879      	ldr	r1, [r7, #4]
1a0073ea:	f7ff fda9 	bl	1a006f40 <_Balloc>
1a0073ee:	693f      	ldr	r7, [r7, #16]
1a0073f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a0073f4:	60c5      	str	r5, [r0, #12]
1a0073f6:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a0073fa:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a0073fe:	f100 0514 	add.w	r5, r0, #20
1a007402:	2200      	movs	r2, #0
1a007404:	e000      	b.n	1a007408 <__mdiff+0x6c>
1a007406:	460d      	mov	r5, r1
1a007408:	f856 1b04 	ldr.w	r1, [r6], #4
1a00740c:	f854 8b04 	ldr.w	r8, [r4], #4
1a007410:	fa1f f981 	uxth.w	r9, r1
1a007414:	fa12 f388 	uxtah	r3, r2, r8
1a007418:	0c0a      	lsrs	r2, r1, #16
1a00741a:	eba3 0309 	sub.w	r3, r3, r9
1a00741e:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a007422:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a007426:	4629      	mov	r1, r5
1a007428:	b29b      	uxth	r3, r3
1a00742a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00742e:	45b6      	cmp	lr, r6
1a007430:	ea4f 4222 	mov.w	r2, r2, asr #16
1a007434:	f841 3b04 	str.w	r3, [r1], #4
1a007438:	46a0      	mov	r8, r4
1a00743a:	d8e4      	bhi.n	1a007406 <__mdiff+0x6a>
1a00743c:	45a4      	cmp	ip, r4
1a00743e:	d916      	bls.n	1a00746e <__mdiff+0xd2>
1a007440:	460e      	mov	r6, r1
1a007442:	f858 5b04 	ldr.w	r5, [r8], #4
1a007446:	fa12 f385 	uxtah	r3, r2, r5
1a00744a:	141a      	asrs	r2, r3, #16
1a00744c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a007450:	b29b      	uxth	r3, r3
1a007452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a007456:	45c4      	cmp	ip, r8
1a007458:	f846 3b04 	str.w	r3, [r6], #4
1a00745c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a007460:	d8ef      	bhi.n	1a007442 <__mdiff+0xa6>
1a007462:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a007466:	1b2d      	subs	r5, r5, r4
1a007468:	f025 0503 	bic.w	r5, r5, #3
1a00746c:	440d      	add	r5, r1
1a00746e:	b923      	cbnz	r3, 1a00747a <__mdiff+0xde>
1a007470:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a007474:	3f01      	subs	r7, #1
1a007476:	2b00      	cmp	r3, #0
1a007478:	d0fa      	beq.n	1a007470 <__mdiff+0xd4>
1a00747a:	6107      	str	r7, [r0, #16]
1a00747c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007480:	4660      	mov	r0, ip
1a007482:	2100      	movs	r1, #0
1a007484:	f7ff fd5c 	bl	1a006f40 <_Balloc>
1a007488:	2201      	movs	r2, #1
1a00748a:	2300      	movs	r3, #0
1a00748c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a007490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a007494 <__d2b>:
1a007494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a007498:	460f      	mov	r7, r1
1a00749a:	b083      	sub	sp, #12
1a00749c:	2101      	movs	r1, #1
1a00749e:	ec55 4b10 	vmov	r4, r5, d0
1a0074a2:	4616      	mov	r6, r2
1a0074a4:	f7ff fd4c 	bl	1a006f40 <_Balloc>
1a0074a8:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a0074ac:	4681      	mov	r9, r0
1a0074ae:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a0074b2:	f1b8 0f00 	cmp.w	r8, #0
1a0074b6:	d001      	beq.n	1a0074bc <__d2b+0x28>
1a0074b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0074bc:	2c00      	cmp	r4, #0
1a0074be:	9301      	str	r3, [sp, #4]
1a0074c0:	d02b      	beq.n	1a00751a <__d2b+0x86>
1a0074c2:	4668      	mov	r0, sp
1a0074c4:	9400      	str	r4, [sp, #0]
1a0074c6:	f7ff fdd1 	bl	1a00706c <__lo0bits>
1a0074ca:	b9d0      	cbnz	r0, 1a007502 <__d2b+0x6e>
1a0074cc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0074d0:	f8c9 2014 	str.w	r2, [r9, #20]
1a0074d4:	2b00      	cmp	r3, #0
1a0074d6:	bf14      	ite	ne
1a0074d8:	2102      	movne	r1, #2
1a0074da:	2101      	moveq	r1, #1
1a0074dc:	f8c9 3018 	str.w	r3, [r9, #24]
1a0074e0:	f8c9 1010 	str.w	r1, [r9, #16]
1a0074e4:	f1b8 0f00 	cmp.w	r8, #0
1a0074e8:	d024      	beq.n	1a007534 <__d2b+0xa0>
1a0074ea:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a0074ee:	eb08 0300 	add.w	r3, r8, r0
1a0074f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a0074f6:	603b      	str	r3, [r7, #0]
1a0074f8:	6030      	str	r0, [r6, #0]
1a0074fa:	4648      	mov	r0, r9
1a0074fc:	b003      	add	sp, #12
1a0074fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a007502:	e9dd 1300 	ldrd	r1, r3, [sp]
1a007506:	f1c0 0220 	rsb	r2, r0, #32
1a00750a:	fa03 f202 	lsl.w	r2, r3, r2
1a00750e:	430a      	orrs	r2, r1
1a007510:	40c3      	lsrs	r3, r0
1a007512:	9301      	str	r3, [sp, #4]
1a007514:	f8c9 2014 	str.w	r2, [r9, #20]
1a007518:	e7dc      	b.n	1a0074d4 <__d2b+0x40>
1a00751a:	a801      	add	r0, sp, #4
1a00751c:	f7ff fda6 	bl	1a00706c <__lo0bits>
1a007520:	9b01      	ldr	r3, [sp, #4]
1a007522:	f8c9 3014 	str.w	r3, [r9, #20]
1a007526:	2101      	movs	r1, #1
1a007528:	3020      	adds	r0, #32
1a00752a:	f8c9 1010 	str.w	r1, [r9, #16]
1a00752e:	f1b8 0f00 	cmp.w	r8, #0
1a007532:	d1da      	bne.n	1a0074ea <__d2b+0x56>
1a007534:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a007538:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a00753c:	6038      	str	r0, [r7, #0]
1a00753e:	6918      	ldr	r0, [r3, #16]
1a007540:	f7ff fd74 	bl	1a00702c <__hi0bits>
1a007544:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a007548:	6030      	str	r0, [r6, #0]
1a00754a:	4648      	mov	r0, r9
1a00754c:	b003      	add	sp, #12
1a00754e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a007552:	bf00      	nop

1a007554 <_realloc_r>:
1a007554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007558:	4617      	mov	r7, r2
1a00755a:	2900      	cmp	r1, #0
1a00755c:	f000 80bb 	beq.w	1a0076d6 <_realloc_r+0x182>
1a007560:	f107 040b 	add.w	r4, r7, #11
1a007564:	4681      	mov	r9, r0
1a007566:	460d      	mov	r5, r1
1a007568:	f7fc faea 	bl	1a003b40 <__malloc_lock>
1a00756c:	2c16      	cmp	r4, #22
1a00756e:	d85e      	bhi.n	1a00762e <_realloc_r+0xda>
1a007570:	2410      	movs	r4, #16
1a007572:	4622      	mov	r2, r4
1a007574:	42a7      	cmp	r7, r4
1a007576:	d85f      	bhi.n	1a007638 <_realloc_r+0xe4>
1a007578:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00757c:	f02e 0603 	bic.w	r6, lr, #3
1a007580:	f1a5 0808 	sub.w	r8, r5, #8
1a007584:	4296      	cmp	r6, r2
1a007586:	eb08 0a06 	add.w	sl, r8, r6
1a00758a:	f280 8081 	bge.w	1a007690 <_realloc_r+0x13c>
1a00758e:	4bcb      	ldr	r3, [pc, #812]	; (1a0078bc <_realloc_r+0x368>)
1a007590:	f8da 0004 	ldr.w	r0, [sl, #4]
1a007594:	6899      	ldr	r1, [r3, #8]
1a007596:	4551      	cmp	r1, sl
1a007598:	f000 80b5 	beq.w	1a007706 <_realloc_r+0x1b2>
1a00759c:	f020 0301 	bic.w	r3, r0, #1
1a0075a0:	4453      	add	r3, sl
1a0075a2:	685b      	ldr	r3, [r3, #4]
1a0075a4:	07db      	lsls	r3, r3, #31
1a0075a6:	f100 808a 	bmi.w	1a0076be <_realloc_r+0x16a>
1a0075aa:	f020 0003 	bic.w	r0, r0, #3
1a0075ae:	1833      	adds	r3, r6, r0
1a0075b0:	4293      	cmp	r3, r2
1a0075b2:	f280 8112 	bge.w	1a0077da <_realloc_r+0x286>
1a0075b6:	f01e 0f01 	tst.w	lr, #1
1a0075ba:	d10f      	bne.n	1a0075dc <_realloc_r+0x88>
1a0075bc:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a0075c0:	eba8 0b03 	sub.w	fp, r8, r3
1a0075c4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0075c8:	f021 0103 	bic.w	r1, r1, #3
1a0075cc:	4408      	add	r0, r1
1a0075ce:	1983      	adds	r3, r0, r6
1a0075d0:	4293      	cmp	r3, r2
1a0075d2:	f280 8116 	bge.w	1a007802 <_realloc_r+0x2ae>
1a0075d6:	1873      	adds	r3, r6, r1
1a0075d8:	4293      	cmp	r3, r2
1a0075da:	da34      	bge.n	1a007646 <_realloc_r+0xf2>
1a0075dc:	4639      	mov	r1, r7
1a0075de:	4648      	mov	r0, r9
1a0075e0:	f7fb ff0c 	bl	1a0033fc <_malloc_r>
1a0075e4:	4607      	mov	r7, r0
1a0075e6:	b1e0      	cbz	r0, 1a007622 <_realloc_r+0xce>
1a0075e8:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0075ec:	f023 0301 	bic.w	r3, r3, #1
1a0075f0:	4443      	add	r3, r8
1a0075f2:	f1a0 0208 	sub.w	r2, r0, #8
1a0075f6:	4293      	cmp	r3, r2
1a0075f8:	f000 80f7 	beq.w	1a0077ea <_realloc_r+0x296>
1a0075fc:	1f32      	subs	r2, r6, #4
1a0075fe:	2a24      	cmp	r2, #36	; 0x24
1a007600:	f200 80fb 	bhi.w	1a0077fa <_realloc_r+0x2a6>
1a007604:	2a13      	cmp	r2, #19
1a007606:	6829      	ldr	r1, [r5, #0]
1a007608:	f200 80c9 	bhi.w	1a00779e <_realloc_r+0x24a>
1a00760c:	4603      	mov	r3, r0
1a00760e:	462a      	mov	r2, r5
1a007610:	6019      	str	r1, [r3, #0]
1a007612:	6851      	ldr	r1, [r2, #4]
1a007614:	6059      	str	r1, [r3, #4]
1a007616:	6892      	ldr	r2, [r2, #8]
1a007618:	609a      	str	r2, [r3, #8]
1a00761a:	4629      	mov	r1, r5
1a00761c:	4648      	mov	r0, r9
1a00761e:	f7fb fda1 	bl	1a003164 <_free_r>
1a007622:	4648      	mov	r0, r9
1a007624:	f7fc fa92 	bl	1a003b4c <__malloc_unlock>
1a007628:	4638      	mov	r0, r7
1a00762a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00762e:	f024 0407 	bic.w	r4, r4, #7
1a007632:	2c00      	cmp	r4, #0
1a007634:	4622      	mov	r2, r4
1a007636:	da9d      	bge.n	1a007574 <_realloc_r+0x20>
1a007638:	230c      	movs	r3, #12
1a00763a:	f8c9 3000 	str.w	r3, [r9]
1a00763e:	2700      	movs	r7, #0
1a007640:	4638      	mov	r0, r7
1a007642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007646:	465f      	mov	r7, fp
1a007648:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00764c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007650:	1f32      	subs	r2, r6, #4
1a007652:	2a24      	cmp	r2, #36	; 0x24
1a007654:	60c1      	str	r1, [r0, #12]
1a007656:	eb0b 0a03 	add.w	sl, fp, r3
1a00765a:	6088      	str	r0, [r1, #8]
1a00765c:	f200 80d9 	bhi.w	1a007812 <_realloc_r+0x2be>
1a007660:	2a13      	cmp	r2, #19
1a007662:	6829      	ldr	r1, [r5, #0]
1a007664:	f240 80d3 	bls.w	1a00780e <_realloc_r+0x2ba>
1a007668:	f8cb 1008 	str.w	r1, [fp, #8]
1a00766c:	6869      	ldr	r1, [r5, #4]
1a00766e:	f8cb 100c 	str.w	r1, [fp, #12]
1a007672:	2a1b      	cmp	r2, #27
1a007674:	68a9      	ldr	r1, [r5, #8]
1a007676:	f200 80e0 	bhi.w	1a00783a <_realloc_r+0x2e6>
1a00767a:	f10b 0210 	add.w	r2, fp, #16
1a00767e:	3508      	adds	r5, #8
1a007680:	6011      	str	r1, [r2, #0]
1a007682:	6869      	ldr	r1, [r5, #4]
1a007684:	6051      	str	r1, [r2, #4]
1a007686:	68a9      	ldr	r1, [r5, #8]
1a007688:	6091      	str	r1, [r2, #8]
1a00768a:	461e      	mov	r6, r3
1a00768c:	46d8      	mov	r8, fp
1a00768e:	463d      	mov	r5, r7
1a007690:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a007694:	1b32      	subs	r2, r6, r4
1a007696:	2a0f      	cmp	r2, #15
1a007698:	f003 0301 	and.w	r3, r3, #1
1a00769c:	d820      	bhi.n	1a0076e0 <_realloc_r+0x18c>
1a00769e:	4333      	orrs	r3, r6
1a0076a0:	f8c8 3004 	str.w	r3, [r8, #4]
1a0076a4:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0076a8:	f043 0301 	orr.w	r3, r3, #1
1a0076ac:	f8ca 3004 	str.w	r3, [sl, #4]
1a0076b0:	4648      	mov	r0, r9
1a0076b2:	462f      	mov	r7, r5
1a0076b4:	f7fc fa4a 	bl	1a003b4c <__malloc_unlock>
1a0076b8:	4638      	mov	r0, r7
1a0076ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0076be:	f01e 0f01 	tst.w	lr, #1
1a0076c2:	d18b      	bne.n	1a0075dc <_realloc_r+0x88>
1a0076c4:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a0076c8:	eba8 0b03 	sub.w	fp, r8, r3
1a0076cc:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0076d0:	f021 0103 	bic.w	r1, r1, #3
1a0076d4:	e77f      	b.n	1a0075d6 <_realloc_r+0x82>
1a0076d6:	4611      	mov	r1, r2
1a0076d8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0076dc:	f7fb be8e 	b.w	1a0033fc <_malloc_r>
1a0076e0:	eb08 0104 	add.w	r1, r8, r4
1a0076e4:	4323      	orrs	r3, r4
1a0076e6:	f042 0201 	orr.w	r2, r2, #1
1a0076ea:	f8c8 3004 	str.w	r3, [r8, #4]
1a0076ee:	604a      	str	r2, [r1, #4]
1a0076f0:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0076f4:	f043 0301 	orr.w	r3, r3, #1
1a0076f8:	3108      	adds	r1, #8
1a0076fa:	f8ca 3004 	str.w	r3, [sl, #4]
1a0076fe:	4648      	mov	r0, r9
1a007700:	f7fb fd30 	bl	1a003164 <_free_r>
1a007704:	e7d4      	b.n	1a0076b0 <_realloc_r+0x15c>
1a007706:	f020 0003 	bic.w	r0, r0, #3
1a00770a:	1831      	adds	r1, r6, r0
1a00770c:	f104 0c10 	add.w	ip, r4, #16
1a007710:	4561      	cmp	r1, ip
1a007712:	da4f      	bge.n	1a0077b4 <_realloc_r+0x260>
1a007714:	f01e 0f01 	tst.w	lr, #1
1a007718:	f47f af60 	bne.w	1a0075dc <_realloc_r+0x88>
1a00771c:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a007720:	eba8 0b01 	sub.w	fp, r8, r1
1a007724:	f8db 1004 	ldr.w	r1, [fp, #4]
1a007728:	f021 0103 	bic.w	r1, r1, #3
1a00772c:	4408      	add	r0, r1
1a00772e:	eb00 0a06 	add.w	sl, r0, r6
1a007732:	45d4      	cmp	ip, sl
1a007734:	f73f af4f 	bgt.w	1a0075d6 <_realloc_r+0x82>
1a007738:	465f      	mov	r7, fp
1a00773a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00773e:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007742:	1f32      	subs	r2, r6, #4
1a007744:	2a24      	cmp	r2, #36	; 0x24
1a007746:	60c1      	str	r1, [r0, #12]
1a007748:	6088      	str	r0, [r1, #8]
1a00774a:	f200 8099 	bhi.w	1a007880 <_realloc_r+0x32c>
1a00774e:	2a13      	cmp	r2, #19
1a007750:	6829      	ldr	r1, [r5, #0]
1a007752:	f240 8093 	bls.w	1a00787c <_realloc_r+0x328>
1a007756:	f8cb 1008 	str.w	r1, [fp, #8]
1a00775a:	6869      	ldr	r1, [r5, #4]
1a00775c:	f8cb 100c 	str.w	r1, [fp, #12]
1a007760:	2a1b      	cmp	r2, #27
1a007762:	68a9      	ldr	r1, [r5, #8]
1a007764:	f200 8092 	bhi.w	1a00788c <_realloc_r+0x338>
1a007768:	f10b 0210 	add.w	r2, fp, #16
1a00776c:	3508      	adds	r5, #8
1a00776e:	6011      	str	r1, [r2, #0]
1a007770:	6869      	ldr	r1, [r5, #4]
1a007772:	6051      	str	r1, [r2, #4]
1a007774:	68a9      	ldr	r1, [r5, #8]
1a007776:	6091      	str	r1, [r2, #8]
1a007778:	eb0b 0104 	add.w	r1, fp, r4
1a00777c:	ebaa 0204 	sub.w	r2, sl, r4
1a007780:	f042 0201 	orr.w	r2, r2, #1
1a007784:	6099      	str	r1, [r3, #8]
1a007786:	604a      	str	r2, [r1, #4]
1a007788:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00778c:	f003 0301 	and.w	r3, r3, #1
1a007790:	431c      	orrs	r4, r3
1a007792:	4648      	mov	r0, r9
1a007794:	f8cb 4004 	str.w	r4, [fp, #4]
1a007798:	f7fc f9d8 	bl	1a003b4c <__malloc_unlock>
1a00779c:	e750      	b.n	1a007640 <_realloc_r+0xec>
1a00779e:	6001      	str	r1, [r0, #0]
1a0077a0:	686b      	ldr	r3, [r5, #4]
1a0077a2:	6043      	str	r3, [r0, #4]
1a0077a4:	2a1b      	cmp	r2, #27
1a0077a6:	d83c      	bhi.n	1a007822 <_realloc_r+0x2ce>
1a0077a8:	f105 0208 	add.w	r2, r5, #8
1a0077ac:	f100 0308 	add.w	r3, r0, #8
1a0077b0:	68a9      	ldr	r1, [r5, #8]
1a0077b2:	e72d      	b.n	1a007610 <_realloc_r+0xbc>
1a0077b4:	eb08 0004 	add.w	r0, r8, r4
1a0077b8:	1b0a      	subs	r2, r1, r4
1a0077ba:	f042 0201 	orr.w	r2, r2, #1
1a0077be:	6098      	str	r0, [r3, #8]
1a0077c0:	6042      	str	r2, [r0, #4]
1a0077c2:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0077c6:	f003 0301 	and.w	r3, r3, #1
1a0077ca:	431c      	orrs	r4, r3
1a0077cc:	4648      	mov	r0, r9
1a0077ce:	f845 4c04 	str.w	r4, [r5, #-4]
1a0077d2:	f7fc f9bb 	bl	1a003b4c <__malloc_unlock>
1a0077d6:	462f      	mov	r7, r5
1a0077d8:	e732      	b.n	1a007640 <_realloc_r+0xec>
1a0077da:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a0077de:	461e      	mov	r6, r3
1a0077e0:	60ca      	str	r2, [r1, #12]
1a0077e2:	eb08 0a03 	add.w	sl, r8, r3
1a0077e6:	6091      	str	r1, [r2, #8]
1a0077e8:	e752      	b.n	1a007690 <_realloc_r+0x13c>
1a0077ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a0077ee:	f023 0303 	bic.w	r3, r3, #3
1a0077f2:	441e      	add	r6, r3
1a0077f4:	eb08 0a06 	add.w	sl, r8, r6
1a0077f8:	e74a      	b.n	1a007690 <_realloc_r+0x13c>
1a0077fa:	4629      	mov	r1, r5
1a0077fc:	f7ff fb38 	bl	1a006e70 <memmove>
1a007800:	e70b      	b.n	1a00761a <_realloc_r+0xc6>
1a007802:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a007806:	465f      	mov	r7, fp
1a007808:	60ca      	str	r2, [r1, #12]
1a00780a:	6091      	str	r1, [r2, #8]
1a00780c:	e71c      	b.n	1a007648 <_realloc_r+0xf4>
1a00780e:	463a      	mov	r2, r7
1a007810:	e736      	b.n	1a007680 <_realloc_r+0x12c>
1a007812:	4629      	mov	r1, r5
1a007814:	4638      	mov	r0, r7
1a007816:	461e      	mov	r6, r3
1a007818:	46d8      	mov	r8, fp
1a00781a:	f7ff fb29 	bl	1a006e70 <memmove>
1a00781e:	463d      	mov	r5, r7
1a007820:	e736      	b.n	1a007690 <_realloc_r+0x13c>
1a007822:	68ab      	ldr	r3, [r5, #8]
1a007824:	6083      	str	r3, [r0, #8]
1a007826:	68eb      	ldr	r3, [r5, #12]
1a007828:	60c3      	str	r3, [r0, #12]
1a00782a:	2a24      	cmp	r2, #36	; 0x24
1a00782c:	d011      	beq.n	1a007852 <_realloc_r+0x2fe>
1a00782e:	f105 0210 	add.w	r2, r5, #16
1a007832:	f100 0310 	add.w	r3, r0, #16
1a007836:	6929      	ldr	r1, [r5, #16]
1a007838:	e6ea      	b.n	1a007610 <_realloc_r+0xbc>
1a00783a:	f8cb 1010 	str.w	r1, [fp, #16]
1a00783e:	68e9      	ldr	r1, [r5, #12]
1a007840:	f8cb 1014 	str.w	r1, [fp, #20]
1a007844:	2a24      	cmp	r2, #36	; 0x24
1a007846:	d00e      	beq.n	1a007866 <_realloc_r+0x312>
1a007848:	6929      	ldr	r1, [r5, #16]
1a00784a:	f10b 0218 	add.w	r2, fp, #24
1a00784e:	3510      	adds	r5, #16
1a007850:	e716      	b.n	1a007680 <_realloc_r+0x12c>
1a007852:	692b      	ldr	r3, [r5, #16]
1a007854:	6103      	str	r3, [r0, #16]
1a007856:	696b      	ldr	r3, [r5, #20]
1a007858:	6143      	str	r3, [r0, #20]
1a00785a:	69a9      	ldr	r1, [r5, #24]
1a00785c:	f105 0218 	add.w	r2, r5, #24
1a007860:	f100 0318 	add.w	r3, r0, #24
1a007864:	e6d4      	b.n	1a007610 <_realloc_r+0xbc>
1a007866:	692a      	ldr	r2, [r5, #16]
1a007868:	f8cb 2018 	str.w	r2, [fp, #24]
1a00786c:	696a      	ldr	r2, [r5, #20]
1a00786e:	f8cb 201c 	str.w	r2, [fp, #28]
1a007872:	69a9      	ldr	r1, [r5, #24]
1a007874:	f10b 0220 	add.w	r2, fp, #32
1a007878:	3518      	adds	r5, #24
1a00787a:	e701      	b.n	1a007680 <_realloc_r+0x12c>
1a00787c:	463a      	mov	r2, r7
1a00787e:	e776      	b.n	1a00776e <_realloc_r+0x21a>
1a007880:	4629      	mov	r1, r5
1a007882:	4638      	mov	r0, r7
1a007884:	f7ff faf4 	bl	1a006e70 <memmove>
1a007888:	4b0c      	ldr	r3, [pc, #48]	; (1a0078bc <_realloc_r+0x368>)
1a00788a:	e775      	b.n	1a007778 <_realloc_r+0x224>
1a00788c:	f8cb 1010 	str.w	r1, [fp, #16]
1a007890:	68e9      	ldr	r1, [r5, #12]
1a007892:	f8cb 1014 	str.w	r1, [fp, #20]
1a007896:	2a24      	cmp	r2, #36	; 0x24
1a007898:	d004      	beq.n	1a0078a4 <_realloc_r+0x350>
1a00789a:	6929      	ldr	r1, [r5, #16]
1a00789c:	f10b 0218 	add.w	r2, fp, #24
1a0078a0:	3510      	adds	r5, #16
1a0078a2:	e764      	b.n	1a00776e <_realloc_r+0x21a>
1a0078a4:	692a      	ldr	r2, [r5, #16]
1a0078a6:	f8cb 2018 	str.w	r2, [fp, #24]
1a0078aa:	696a      	ldr	r2, [r5, #20]
1a0078ac:	f8cb 201c 	str.w	r2, [fp, #28]
1a0078b0:	69a9      	ldr	r1, [r5, #24]
1a0078b2:	f10b 0220 	add.w	r2, fp, #32
1a0078b6:	3518      	adds	r5, #24
1a0078b8:	e759      	b.n	1a00776e <_realloc_r+0x21a>
1a0078ba:	bf00      	nop
1a0078bc:	10000468 	.word	0x10000468

1a0078c0 <frexp>:
1a0078c0:	ec53 2b10 	vmov	r2, r3, d0
1a0078c4:	b570      	push	{r4, r5, r6, lr}
1a0078c6:	4e16      	ldr	r6, [pc, #88]	; (1a007920 <frexp+0x60>)
1a0078c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a0078cc:	2500      	movs	r5, #0
1a0078ce:	42b1      	cmp	r1, r6
1a0078d0:	4604      	mov	r4, r0
1a0078d2:	6005      	str	r5, [r0, #0]
1a0078d4:	dc21      	bgt.n	1a00791a <frexp+0x5a>
1a0078d6:	ee10 6a10 	vmov	r6, s0
1a0078da:	430e      	orrs	r6, r1
1a0078dc:	d01d      	beq.n	1a00791a <frexp+0x5a>
1a0078de:	4e11      	ldr	r6, [pc, #68]	; (1a007924 <frexp+0x64>)
1a0078e0:	401e      	ands	r6, r3
1a0078e2:	4618      	mov	r0, r3
1a0078e4:	b966      	cbnz	r6, 1a007900 <frexp+0x40>
1a0078e6:	4619      	mov	r1, r3
1a0078e8:	2200      	movs	r2, #0
1a0078ea:	ee10 0a10 	vmov	r0, s0
1a0078ee:	4b0e      	ldr	r3, [pc, #56]	; (1a007928 <frexp+0x68>)
1a0078f0:	f7fa fdee 	bl	1a0024d0 <__aeabi_dmul>
1a0078f4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a0078f8:	4602      	mov	r2, r0
1a0078fa:	4608      	mov	r0, r1
1a0078fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a007900:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a007904:	1509      	asrs	r1, r1, #20
1a007906:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a00790a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a00790e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a007912:	4429      	add	r1, r5
1a007914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a007918:	6021      	str	r1, [r4, #0]
1a00791a:	ec43 2b10 	vmov	d0, r2, r3
1a00791e:	bd70      	pop	{r4, r5, r6, pc}
1a007920:	7fefffff 	.word	0x7fefffff
1a007924:	7ff00000 	.word	0x7ff00000
1a007928:	43500000 	.word	0x43500000

1a00792c <strncpy>:
1a00792c:	b470      	push	{r4, r5, r6}
1a00792e:	ea40 0401 	orr.w	r4, r0, r1
1a007932:	07a3      	lsls	r3, r4, #30
1a007934:	d127      	bne.n	1a007986 <strncpy+0x5a>
1a007936:	2a03      	cmp	r2, #3
1a007938:	d925      	bls.n	1a007986 <strncpy+0x5a>
1a00793a:	460b      	mov	r3, r1
1a00793c:	4606      	mov	r6, r0
1a00793e:	4619      	mov	r1, r3
1a007940:	f853 5b04 	ldr.w	r5, [r3], #4
1a007944:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a007948:	ea24 0405 	bic.w	r4, r4, r5
1a00794c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a007950:	d106      	bne.n	1a007960 <strncpy+0x34>
1a007952:	3a04      	subs	r2, #4
1a007954:	2a03      	cmp	r2, #3
1a007956:	f846 5b04 	str.w	r5, [r6], #4
1a00795a:	4619      	mov	r1, r3
1a00795c:	d8ef      	bhi.n	1a00793e <strncpy+0x12>
1a00795e:	b182      	cbz	r2, 1a007982 <strncpy+0x56>
1a007960:	4633      	mov	r3, r6
1a007962:	780c      	ldrb	r4, [r1, #0]
1a007964:	f803 4b01 	strb.w	r4, [r3], #1
1a007968:	1e55      	subs	r5, r2, #1
1a00796a:	b174      	cbz	r4, 1a00798a <strncpy+0x5e>
1a00796c:	4432      	add	r2, r6
1a00796e:	442e      	add	r6, r5
1a007970:	e005      	b.n	1a00797e <strncpy+0x52>
1a007972:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a007976:	1af5      	subs	r5, r6, r3
1a007978:	f803 4b01 	strb.w	r4, [r3], #1
1a00797c:	b12c      	cbz	r4, 1a00798a <strncpy+0x5e>
1a00797e:	429a      	cmp	r2, r3
1a007980:	d1f7      	bne.n	1a007972 <strncpy+0x46>
1a007982:	bc70      	pop	{r4, r5, r6}
1a007984:	4770      	bx	lr
1a007986:	4606      	mov	r6, r0
1a007988:	e7e9      	b.n	1a00795e <strncpy+0x32>
1a00798a:	2d00      	cmp	r5, #0
1a00798c:	d0f9      	beq.n	1a007982 <strncpy+0x56>
1a00798e:	441d      	add	r5, r3
1a007990:	2200      	movs	r2, #0
1a007992:	f803 2b01 	strb.w	r2, [r3], #1
1a007996:	42ab      	cmp	r3, r5
1a007998:	d1fb      	bne.n	1a007992 <strncpy+0x66>
1a00799a:	bc70      	pop	{r4, r5, r6}
1a00799c:	4770      	bx	lr
1a00799e:	bf00      	nop

1a0079a0 <__sprint_r.part.0>:
1a0079a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0079a4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a0079a6:	049c      	lsls	r4, r3, #18
1a0079a8:	4693      	mov	fp, r2
1a0079aa:	d52d      	bpl.n	1a007a08 <__sprint_r.part.0+0x68>
1a0079ac:	6893      	ldr	r3, [r2, #8]
1a0079ae:	6812      	ldr	r2, [r2, #0]
1a0079b0:	b343      	cbz	r3, 1a007a04 <__sprint_r.part.0+0x64>
1a0079b2:	460e      	mov	r6, r1
1a0079b4:	4607      	mov	r7, r0
1a0079b6:	f102 0908 	add.w	r9, r2, #8
1a0079ba:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1a0079be:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a0079c2:	d015      	beq.n	1a0079f0 <__sprint_r.part.0+0x50>
1a0079c4:	3d04      	subs	r5, #4
1a0079c6:	2400      	movs	r4, #0
1a0079c8:	e001      	b.n	1a0079ce <__sprint_r.part.0+0x2e>
1a0079ca:	45a0      	cmp	r8, r4
1a0079cc:	d00e      	beq.n	1a0079ec <__sprint_r.part.0+0x4c>
1a0079ce:	4632      	mov	r2, r6
1a0079d0:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a0079d4:	4638      	mov	r0, r7
1a0079d6:	f000 f8a9 	bl	1a007b2c <_fputwc_r>
1a0079da:	1c43      	adds	r3, r0, #1
1a0079dc:	f104 0401 	add.w	r4, r4, #1
1a0079e0:	d1f3      	bne.n	1a0079ca <__sprint_r.part.0+0x2a>
1a0079e2:	2300      	movs	r3, #0
1a0079e4:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a0079e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0079ec:	f8db 3008 	ldr.w	r3, [fp, #8]
1a0079f0:	f02a 0a03 	bic.w	sl, sl, #3
1a0079f4:	eba3 030a 	sub.w	r3, r3, sl
1a0079f8:	f8cb 3008 	str.w	r3, [fp, #8]
1a0079fc:	f109 0908 	add.w	r9, r9, #8
1a007a00:	2b00      	cmp	r3, #0
1a007a02:	d1da      	bne.n	1a0079ba <__sprint_r.part.0+0x1a>
1a007a04:	2000      	movs	r0, #0
1a007a06:	e7ec      	b.n	1a0079e2 <__sprint_r.part.0+0x42>
1a007a08:	f7fe ffdc 	bl	1a0069c4 <__sfvwrite_r>
1a007a0c:	2300      	movs	r3, #0
1a007a0e:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a007a12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007a16:	bf00      	nop

1a007a18 <__sprint_r>:
1a007a18:	6893      	ldr	r3, [r2, #8]
1a007a1a:	b10b      	cbz	r3, 1a007a20 <__sprint_r+0x8>
1a007a1c:	f7ff bfc0 	b.w	1a0079a0 <__sprint_r.part.0>
1a007a20:	b410      	push	{r4}
1a007a22:	4618      	mov	r0, r3
1a007a24:	6053      	str	r3, [r2, #4]
1a007a26:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007a2a:	4770      	bx	lr

1a007a2c <_calloc_r>:
1a007a2c:	b510      	push	{r4, lr}
1a007a2e:	fb02 f101 	mul.w	r1, r2, r1
1a007a32:	f7fb fce3 	bl	1a0033fc <_malloc_r>
1a007a36:	4604      	mov	r4, r0
1a007a38:	b168      	cbz	r0, 1a007a56 <_calloc_r+0x2a>
1a007a3a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007a3e:	f022 0203 	bic.w	r2, r2, #3
1a007a42:	3a04      	subs	r2, #4
1a007a44:	2a24      	cmp	r2, #36	; 0x24
1a007a46:	d818      	bhi.n	1a007a7a <_calloc_r+0x4e>
1a007a48:	2a13      	cmp	r2, #19
1a007a4a:	d806      	bhi.n	1a007a5a <_calloc_r+0x2e>
1a007a4c:	4602      	mov	r2, r0
1a007a4e:	2300      	movs	r3, #0
1a007a50:	e9c2 3300 	strd	r3, r3, [r2]
1a007a54:	6093      	str	r3, [r2, #8]
1a007a56:	4620      	mov	r0, r4
1a007a58:	bd10      	pop	{r4, pc}
1a007a5a:	2300      	movs	r3, #0
1a007a5c:	2a1b      	cmp	r2, #27
1a007a5e:	e9c0 3300 	strd	r3, r3, [r0]
1a007a62:	d90f      	bls.n	1a007a84 <_calloc_r+0x58>
1a007a64:	2a24      	cmp	r2, #36	; 0x24
1a007a66:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a007a6a:	bf12      	itee	ne
1a007a6c:	f100 0210 	addne.w	r2, r0, #16
1a007a70:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a007a74:	f100 0218 	addeq.w	r2, r0, #24
1a007a78:	e7e9      	b.n	1a007a4e <_calloc_r+0x22>
1a007a7a:	2100      	movs	r1, #0
1a007a7c:	f7fc f810 	bl	1a003aa0 <memset>
1a007a80:	4620      	mov	r0, r4
1a007a82:	bd10      	pop	{r4, pc}
1a007a84:	f100 0208 	add.w	r2, r0, #8
1a007a88:	e7e1      	b.n	1a007a4e <_calloc_r+0x22>
1a007a8a:	bf00      	nop

1a007a8c <__fputwc>:
1a007a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a007a90:	b082      	sub	sp, #8
1a007a92:	4680      	mov	r8, r0
1a007a94:	4689      	mov	r9, r1
1a007a96:	4614      	mov	r4, r2
1a007a98:	f000 f87a 	bl	1a007b90 <__locale_mb_cur_max>
1a007a9c:	2801      	cmp	r0, #1
1a007a9e:	d103      	bne.n	1a007aa8 <__fputwc+0x1c>
1a007aa0:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a007aa4:	2bfe      	cmp	r3, #254	; 0xfe
1a007aa6:	d933      	bls.n	1a007b10 <__fputwc+0x84>
1a007aa8:	464a      	mov	r2, r9
1a007aaa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a007aae:	a901      	add	r1, sp, #4
1a007ab0:	4640      	mov	r0, r8
1a007ab2:	f000 f8e1 	bl	1a007c78 <_wcrtomb_r>
1a007ab6:	1c42      	adds	r2, r0, #1
1a007ab8:	4606      	mov	r6, r0
1a007aba:	d02f      	beq.n	1a007b1c <__fputwc+0x90>
1a007abc:	b320      	cbz	r0, 1a007b08 <__fputwc+0x7c>
1a007abe:	f89d c004 	ldrb.w	ip, [sp, #4]
1a007ac2:	2500      	movs	r5, #0
1a007ac4:	f10d 0a04 	add.w	sl, sp, #4
1a007ac8:	e009      	b.n	1a007ade <__fputwc+0x52>
1a007aca:	6823      	ldr	r3, [r4, #0]
1a007acc:	1c5a      	adds	r2, r3, #1
1a007ace:	6022      	str	r2, [r4, #0]
1a007ad0:	f883 c000 	strb.w	ip, [r3]
1a007ad4:	3501      	adds	r5, #1
1a007ad6:	42b5      	cmp	r5, r6
1a007ad8:	d216      	bcs.n	1a007b08 <__fputwc+0x7c>
1a007ada:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a007ade:	68a3      	ldr	r3, [r4, #8]
1a007ae0:	3b01      	subs	r3, #1
1a007ae2:	2b00      	cmp	r3, #0
1a007ae4:	60a3      	str	r3, [r4, #8]
1a007ae6:	daf0      	bge.n	1a007aca <__fputwc+0x3e>
1a007ae8:	69a7      	ldr	r7, [r4, #24]
1a007aea:	42bb      	cmp	r3, r7
1a007aec:	4661      	mov	r1, ip
1a007aee:	4622      	mov	r2, r4
1a007af0:	4640      	mov	r0, r8
1a007af2:	db02      	blt.n	1a007afa <__fputwc+0x6e>
1a007af4:	f1bc 0f0a 	cmp.w	ip, #10
1a007af8:	d1e7      	bne.n	1a007aca <__fputwc+0x3e>
1a007afa:	f000 f865 	bl	1a007bc8 <__swbuf_r>
1a007afe:	1c43      	adds	r3, r0, #1
1a007b00:	d1e8      	bne.n	1a007ad4 <__fputwc+0x48>
1a007b02:	b002      	add	sp, #8
1a007b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007b08:	4648      	mov	r0, r9
1a007b0a:	b002      	add	sp, #8
1a007b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007b10:	fa5f fc89 	uxtb.w	ip, r9
1a007b14:	4606      	mov	r6, r0
1a007b16:	f88d c004 	strb.w	ip, [sp, #4]
1a007b1a:	e7d2      	b.n	1a007ac2 <__fputwc+0x36>
1a007b1c:	89a3      	ldrh	r3, [r4, #12]
1a007b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007b22:	81a3      	strh	r3, [r4, #12]
1a007b24:	b002      	add	sp, #8
1a007b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007b2a:	bf00      	nop

1a007b2c <_fputwc_r>:
1a007b2c:	b530      	push	{r4, r5, lr}
1a007b2e:	4605      	mov	r5, r0
1a007b30:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a007b32:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a007b36:	07c0      	lsls	r0, r0, #31
1a007b38:	4614      	mov	r4, r2
1a007b3a:	b083      	sub	sp, #12
1a007b3c:	b29a      	uxth	r2, r3
1a007b3e:	d401      	bmi.n	1a007b44 <_fputwc_r+0x18>
1a007b40:	0590      	lsls	r0, r2, #22
1a007b42:	d51c      	bpl.n	1a007b7e <_fputwc_r+0x52>
1a007b44:	0490      	lsls	r0, r2, #18
1a007b46:	d406      	bmi.n	1a007b56 <_fputwc_r+0x2a>
1a007b48:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a007b4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a007b52:	81a3      	strh	r3, [r4, #12]
1a007b54:	6662      	str	r2, [r4, #100]	; 0x64
1a007b56:	4628      	mov	r0, r5
1a007b58:	4622      	mov	r2, r4
1a007b5a:	f7ff ff97 	bl	1a007a8c <__fputwc>
1a007b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007b60:	07da      	lsls	r2, r3, #31
1a007b62:	4605      	mov	r5, r0
1a007b64:	d402      	bmi.n	1a007b6c <_fputwc_r+0x40>
1a007b66:	89a3      	ldrh	r3, [r4, #12]
1a007b68:	059b      	lsls	r3, r3, #22
1a007b6a:	d502      	bpl.n	1a007b72 <_fputwc_r+0x46>
1a007b6c:	4628      	mov	r0, r5
1a007b6e:	b003      	add	sp, #12
1a007b70:	bd30      	pop	{r4, r5, pc}
1a007b72:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007b74:	f7fb fc40 	bl	1a0033f8 <__retarget_lock_release_recursive>
1a007b78:	4628      	mov	r0, r5
1a007b7a:	b003      	add	sp, #12
1a007b7c:	bd30      	pop	{r4, r5, pc}
1a007b7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007b80:	9101      	str	r1, [sp, #4]
1a007b82:	f7fb fc37 	bl	1a0033f4 <__retarget_lock_acquire_recursive>
1a007b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007b8a:	9901      	ldr	r1, [sp, #4]
1a007b8c:	b29a      	uxth	r2, r3
1a007b8e:	e7d9      	b.n	1a007b44 <_fputwc_r+0x18>

1a007b90 <__locale_mb_cur_max>:
1a007b90:	4b01      	ldr	r3, [pc, #4]	; (1a007b98 <__locale_mb_cur_max+0x8>)
1a007b92:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a007b96:	4770      	bx	lr
1a007b98:	10000878 	.word	0x10000878

1a007b9c <__ascii_mbtowc>:
1a007b9c:	b082      	sub	sp, #8
1a007b9e:	b149      	cbz	r1, 1a007bb4 <__ascii_mbtowc+0x18>
1a007ba0:	b15a      	cbz	r2, 1a007bba <__ascii_mbtowc+0x1e>
1a007ba2:	b16b      	cbz	r3, 1a007bc0 <__ascii_mbtowc+0x24>
1a007ba4:	7813      	ldrb	r3, [r2, #0]
1a007ba6:	600b      	str	r3, [r1, #0]
1a007ba8:	7812      	ldrb	r2, [r2, #0]
1a007baa:	1c10      	adds	r0, r2, #0
1a007bac:	bf18      	it	ne
1a007bae:	2001      	movne	r0, #1
1a007bb0:	b002      	add	sp, #8
1a007bb2:	4770      	bx	lr
1a007bb4:	a901      	add	r1, sp, #4
1a007bb6:	2a00      	cmp	r2, #0
1a007bb8:	d1f3      	bne.n	1a007ba2 <__ascii_mbtowc+0x6>
1a007bba:	4610      	mov	r0, r2
1a007bbc:	b002      	add	sp, #8
1a007bbe:	4770      	bx	lr
1a007bc0:	f06f 0001 	mvn.w	r0, #1
1a007bc4:	e7f4      	b.n	1a007bb0 <__ascii_mbtowc+0x14>
1a007bc6:	bf00      	nop

1a007bc8 <__swbuf_r>:
1a007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a007bca:	460d      	mov	r5, r1
1a007bcc:	4614      	mov	r4, r2
1a007bce:	4606      	mov	r6, r0
1a007bd0:	b110      	cbz	r0, 1a007bd8 <__swbuf_r+0x10>
1a007bd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a007bd4:	2b00      	cmp	r3, #0
1a007bd6:	d043      	beq.n	1a007c60 <__swbuf_r+0x98>
1a007bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007bdc:	69a3      	ldr	r3, [r4, #24]
1a007bde:	60a3      	str	r3, [r4, #8]
1a007be0:	b291      	uxth	r1, r2
1a007be2:	0708      	lsls	r0, r1, #28
1a007be4:	d51b      	bpl.n	1a007c1e <__swbuf_r+0x56>
1a007be6:	6923      	ldr	r3, [r4, #16]
1a007be8:	b1cb      	cbz	r3, 1a007c1e <__swbuf_r+0x56>
1a007bea:	b2ed      	uxtb	r5, r5
1a007bec:	0489      	lsls	r1, r1, #18
1a007bee:	462f      	mov	r7, r5
1a007bf0:	d522      	bpl.n	1a007c38 <__swbuf_r+0x70>
1a007bf2:	6822      	ldr	r2, [r4, #0]
1a007bf4:	6961      	ldr	r1, [r4, #20]
1a007bf6:	1ad3      	subs	r3, r2, r3
1a007bf8:	4299      	cmp	r1, r3
1a007bfa:	dd29      	ble.n	1a007c50 <__swbuf_r+0x88>
1a007bfc:	3301      	adds	r3, #1
1a007bfe:	68a1      	ldr	r1, [r4, #8]
1a007c00:	1c50      	adds	r0, r2, #1
1a007c02:	3901      	subs	r1, #1
1a007c04:	60a1      	str	r1, [r4, #8]
1a007c06:	6020      	str	r0, [r4, #0]
1a007c08:	7015      	strb	r5, [r2, #0]
1a007c0a:	6962      	ldr	r2, [r4, #20]
1a007c0c:	429a      	cmp	r2, r3
1a007c0e:	d02a      	beq.n	1a007c66 <__swbuf_r+0x9e>
1a007c10:	89a3      	ldrh	r3, [r4, #12]
1a007c12:	07db      	lsls	r3, r3, #31
1a007c14:	d501      	bpl.n	1a007c1a <__swbuf_r+0x52>
1a007c16:	2d0a      	cmp	r5, #10
1a007c18:	d025      	beq.n	1a007c66 <__swbuf_r+0x9e>
1a007c1a:	4638      	mov	r0, r7
1a007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a007c1e:	4621      	mov	r1, r4
1a007c20:	4630      	mov	r0, r6
1a007c22:	f7fd fea9 	bl	1a005978 <__swsetup_r>
1a007c26:	bb20      	cbnz	r0, 1a007c72 <__swbuf_r+0xaa>
1a007c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007c2c:	6923      	ldr	r3, [r4, #16]
1a007c2e:	b291      	uxth	r1, r2
1a007c30:	b2ed      	uxtb	r5, r5
1a007c32:	0489      	lsls	r1, r1, #18
1a007c34:	462f      	mov	r7, r5
1a007c36:	d4dc      	bmi.n	1a007bf2 <__swbuf_r+0x2a>
1a007c38:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a007c3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a007c3e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a007c42:	81a2      	strh	r2, [r4, #12]
1a007c44:	6822      	ldr	r2, [r4, #0]
1a007c46:	6661      	str	r1, [r4, #100]	; 0x64
1a007c48:	6961      	ldr	r1, [r4, #20]
1a007c4a:	1ad3      	subs	r3, r2, r3
1a007c4c:	4299      	cmp	r1, r3
1a007c4e:	dcd5      	bgt.n	1a007bfc <__swbuf_r+0x34>
1a007c50:	4621      	mov	r1, r4
1a007c52:	4630      	mov	r0, r6
1a007c54:	f7fb f9a4 	bl	1a002fa0 <_fflush_r>
1a007c58:	b958      	cbnz	r0, 1a007c72 <__swbuf_r+0xaa>
1a007c5a:	6822      	ldr	r2, [r4, #0]
1a007c5c:	2301      	movs	r3, #1
1a007c5e:	e7ce      	b.n	1a007bfe <__swbuf_r+0x36>
1a007c60:	f7fb f9fa 	bl	1a003058 <__sinit>
1a007c64:	e7b8      	b.n	1a007bd8 <__swbuf_r+0x10>
1a007c66:	4621      	mov	r1, r4
1a007c68:	4630      	mov	r0, r6
1a007c6a:	f7fb f999 	bl	1a002fa0 <_fflush_r>
1a007c6e:	2800      	cmp	r0, #0
1a007c70:	d0d3      	beq.n	1a007c1a <__swbuf_r+0x52>
1a007c72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a007c76:	e7d0      	b.n	1a007c1a <__swbuf_r+0x52>

1a007c78 <_wcrtomb_r>:
1a007c78:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007c7a:	4c0b      	ldr	r4, [pc, #44]	; (1a007ca8 <_wcrtomb_r+0x30>)
1a007c7c:	b085      	sub	sp, #20
1a007c7e:	4606      	mov	r6, r0
1a007c80:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a007c84:	461f      	mov	r7, r3
1a007c86:	b121      	cbz	r1, 1a007c92 <_wcrtomb_r+0x1a>
1a007c88:	47a0      	blx	r4
1a007c8a:	1c43      	adds	r3, r0, #1
1a007c8c:	d006      	beq.n	1a007c9c <_wcrtomb_r+0x24>
1a007c8e:	b005      	add	sp, #20
1a007c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007c92:	460a      	mov	r2, r1
1a007c94:	a901      	add	r1, sp, #4
1a007c96:	47a0      	blx	r4
1a007c98:	1c43      	adds	r3, r0, #1
1a007c9a:	d1f8      	bne.n	1a007c8e <_wcrtomb_r+0x16>
1a007c9c:	2200      	movs	r2, #0
1a007c9e:	238a      	movs	r3, #138	; 0x8a
1a007ca0:	603a      	str	r2, [r7, #0]
1a007ca2:	6033      	str	r3, [r6, #0]
1a007ca4:	b005      	add	sp, #20
1a007ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007ca8:	10000878 	.word	0x10000878

1a007cac <__ascii_wctomb>:
1a007cac:	b149      	cbz	r1, 1a007cc2 <__ascii_wctomb+0x16>
1a007cae:	2aff      	cmp	r2, #255	; 0xff
1a007cb0:	d802      	bhi.n	1a007cb8 <__ascii_wctomb+0xc>
1a007cb2:	700a      	strb	r2, [r1, #0]
1a007cb4:	2001      	movs	r0, #1
1a007cb6:	4770      	bx	lr
1a007cb8:	238a      	movs	r3, #138	; 0x8a
1a007cba:	6003      	str	r3, [r0, #0]
1a007cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007cc0:	4770      	bx	lr
1a007cc2:	4608      	mov	r0, r1
1a007cc4:	4770      	bx	lr
1a007cc6:	bf00      	nop
1a007cc8:	72656a45 	.word	0x72656a45
1a007ccc:	69636963 	.word	0x69636963
1a007cd0:	2e41206f 	.word	0x2e41206f
1a007cd4:	6e652032 	.word	0x6e652032
1a007cd8:	55444520 	.word	0x55444520
1a007cdc:	41414943 	.word	0x41414943
1a007ce0:	00000000 	.word	0x00000000
1a007ce4:	65726174 	.word	0x65726174
1a007ce8:	00615f61 	.word	0x00615f61
1a007cec:	65726154 	.word	0x65726154
1a007cf0:	0d412061 	.word	0x0d412061
1a007cf4:	00000000 	.word	0x00000000
1a007cf8:	65726174 	.word	0x65726174
1a007cfc:	00625f61 	.word	0x00625f61
1a007d00:	65726174 	.word	0x65726174
1a007d04:	00635f61 	.word	0x00635f61
1a007d08:	65726174 	.word	0x65726174
1a007d0c:	00645f61 	.word	0x00645f61
1a007d10:	65726154 	.word	0x65726154
1a007d14:	0d422061 	.word	0x0d422061
1a007d18:	ffffff00 	.word	0xffffff00
1a007d1c:	65726154 	.word	0x65726154
1a007d20:	0d432061 	.word	0x0d432061
1a007d24:	ffffff00 	.word	0xffffff00
1a007d28:	65726154 	.word	0x65726154
1a007d2c:	0d442061 	.word	0x0d442061
1a007d30:	ffffff00 	.word	0xffffff00
1a007d34:	70410a0d 	.word	0x70410a0d
1a007d38:	63696c70 	.word	0x63696c70
1a007d3c:	6f697461 	.word	0x6f697461
1a007d40:	7453206e 	.word	0x7453206e
1a007d44:	206b6361 	.word	0x206b6361
1a007d48:	7265764f 	.word	0x7265764f
1a007d4c:	776f6c66 	.word	0x776f6c66
1a007d50:	6f202121 	.word	0x6f202121
1a007d54:	6154206e 	.word	0x6154206e
1a007d58:	203a6b73 	.word	0x203a6b73
1a007d5c:	0a0d7325 	.word	0x0a0d7325
1a007d60:	ffffff00 	.word	0xffffff00
1a007d64:	454c4449 	.word	0x454c4449
1a007d68:	ffffff00 	.word	0xffffff00

1a007d6c <ExtRateIn>:
1a007d6c:	00000000                                ....

1a007d70 <GpioButtons>:
1a007d70:	08000400 09010900                       ........

1a007d78 <GpioLeds>:
1a007d78:	01050005 0e000205 0c010b01              ............

1a007d84 <GpioPorts>:
1a007d84:	03030003 0f050403 05031005 07030603     ................
1a007d94:	ffff0802                                ....

1a007d98 <OscRateIn>:
1a007d98:	00b71b00                                ....

1a007d9c <pinmuxing>:
1a007d9c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a007dac:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a007dbc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a007dcc:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a007ddc:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a007dec:	00d50301 00d50401 00160107 00560207     ..............V.
1a007dfc:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a007e0c:	00570206 0f0f0f03 ffff00ff              ..W.........

1a007e18 <periph_to_base>:
1a007e18:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a007e28:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a007e38:	000100e0 01000100 01200003 00060120     .......... . ...
1a007e48:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a007e58:	01820013 00120182 01a201a2 01c20011     ................
1a007e68:	001001c2 01e201e2 0202000f 000e0202     ................
1a007e78:	02220222 0223000d 001c0223              "."...#.#...

1a007e84 <InitClkStates>:
1a007e84:	00010100 00010909 0001090a 01010701     ................
1a007e94:	00010902 00010906 0101090c 0001090d     ................
1a007ea4:	0001090e 0001090f 00010910 00010911     ................
1a007eb4:	00010912 00010913 00011114 00011119     ................
1a007ec4:	0001111a 0001111b                       ........

1a007ecc <gpioPinsInit>:
1a007ecc:	02000104 00050701 05010d03 04080100     ................
1a007edc:	02020002 02000304 00000403 04070002     ................
1a007eec:	030c0300 09050402 05040103 04030208     ................
1a007efc:	04020305 06040504 0802000c 03000b06     ................
1a007f0c:	00090607 07060503 060f0504 03030004     ................
1a007f1c:	02000404 00050404 06040502 04060200     ................
1a007f2c:	0c050408 05040a04 0003010e 14010a00     ................
1a007f3c:	010f0000 0d000012 00001101 0010010c     ................
1a007f4c:	07070300 000f0300 01000001 00000000     ................
1a007f5c:	000a0600 08060603 06100504 04030005     ................
1a007f6c:	03000106 04090400 04010d05 010b0000     ................
1a007f7c:	0200000f 00000001 00010104 02010800     ................
1a007f8c:	01090000 09010006 05040002 04010200     ................
1a007f9c:	02020105 02020504 0e00000a 01000b02     ................
1a007fac:	000c020b ffff0c01                       ........

1a007fb4 <_ctype_>:
1a007fb4:	20202000 20202020 28282020 20282828     .         ((((( 
1a007fc4:	20202020 20202020 20202020 20202020                     
1a007fd4:	10108820 10101010 10101010 10101010      ...............
1a007fe4:	04040410 04040404 10040404 10101010     ................
1a007ff4:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a008004:	01010101 01010101 01010101 10101010     ................
1a008014:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a008024:	02020202 02020202 02020202 10101010     ................
1a008034:	00000020 00000000 00000000 00000000      ...............
	...
1a0080b4:	ffffff00 ffff000a 00464e49 00666e69     ........INF.inf.
1a0080c4:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
1a0080d4:	42413938 46454443 00000000 33323130     89ABCDEF....0123
1a0080e4:	37363534 62613938 66656463 00000000     456789abcdef....
1a0080f4:	6c756e28 0000296c ffff0030              (null)..0...

1a008100 <blanks.8693>:
1a008100:	20202020 20202020 20202020 20202020                     

1a008110 <zeroes.8694>:
1a008110:	30303030 30303030 30303030 30303030     0000000000000000
1a008120:	004e614e 69666e49 7974696e ffffff00     NaN.Infinity....

1a008130 <__mprec_bigtens>:
1a008130:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a008140:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a008150:	7f73bf3c 75154fdd                       <.s..O.u

1a008158 <__mprec_tens>:
1a008158:	00000000 3ff00000 00000000 40240000     .......?......$@
1a008168:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a008178:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a008188:	00000000 412e8480 00000000 416312d0     .......A......cA
1a008198:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a0081a8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a0081b8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a0081c8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a0081d8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a0081e8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a0081f8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a008208:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a008218:	79d99db4 44ea7843                       ...yCx.D

1a008220 <p05.7442>:
1a008220:	00000005 00000019 0000007d 00000043     ........}...C...
1a008230:	49534f50 ffff0058 0000002e              POSIX.......
